<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>失心耀的博客 • Posts by &#34;人生经历，本科，计算机科学与技术&#34; category</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 11 Aug 2021 18:27:00 +0800</pubDate>
        <lastBuildDate>Wed, 11 Aug 2021 18:27:00 +0800</lastBuildDate>
        <category>ElasticSearch</category>
        <category>Hexo</category>
        <category>Java</category>
        <category>SpringCloud</category>
        <category>Springboot</category>
        <category>驾照</category>
        <category>Git</category>
        <category>Nginx</category>
        <category>数据库系统原理</category>
        <category>linux</category>
        <category>RabbitMQ</category>
        <category>操作系统概论</category>
        <category>SpringBoot</category>
        <category>Redis</category>
        <category>中国近代史</category>
        <item>
            <guid isPermalink="true">http://example.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</guid>
            <title>操作系统概论</title>
            <link>http://example.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</link>
            <category>操作系统概论</category>
            <pubDate>Wed, 11 Aug 2021 18:27:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;操作系统概论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统概论&#34;&gt;#&lt;/a&gt; 操作系统概论&lt;/h1&gt;
&lt;h2 id=&#34;考试题型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试题型&#34;&gt;#&lt;/a&gt; 考试题型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;题型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分支&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单选&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 分 * 20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;填空&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 分 * 10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简答&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 分 * 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;综合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10 分 * 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;40 分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一章操作系统简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一章操作系统简介&#34;&gt;#&lt;/a&gt; 第一章：操作系统简介&lt;/h2&gt;
&lt;h3 id=&#34;11-什么是操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-什么是操作系统&#34;&gt;#&lt;/a&gt; 1.1 什么是操作系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;操作系统的定义&lt;/p&gt;
&lt;p&gt;操作系统（Operating System，OS）是一种复杂的&lt;strong&gt;系统软件&lt;/strong&gt;，是不同于&lt;strong&gt;程序代码&lt;/strong&gt;、&lt;strong&gt;数据结构&lt;/strong&gt;、&lt;strong&gt;数据初始化文件的集合&lt;/strong&gt;，可执行。（选择、填空、简答）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户与硬件之间&lt;/strong&gt;的接口&lt;/p&gt;
&lt;p&gt;操作系统与&lt;strong&gt;硬件部分相互作用&lt;/strong&gt;，比并且为运行在计算机上的&lt;strong&gt;应用程序提供执行环境&lt;/strong&gt;。（选择、填空）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源的管理者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理机管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：决定把处理机先给哪个程序用，后给哪个程序用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：给程序分配内存空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设备管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：完成证明分配设备，分配哪台设备，怎么和设备连接等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：为每个文件分配空间、建立目录、对目录进行组织管理以及根据用户请求从外存（硬盘）读取数据或将数据写入外存（硬盘）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12-操作系统的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-操作系统的发展&#34;&gt;#&lt;/a&gt; 1.2 操作系统的发展&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发展历程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单道 批处理系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：单道批处理系统&lt;strong&gt;内存中只有一道作业&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;自动性、顺序性、单道性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;li&gt;优点：减少了等待人工操作的时间&lt;/li&gt;
&lt;li&gt;缺点：CPU 资源不能得到充分的利用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080901.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080901.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多道 批处理系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：由操作系统的&lt;strong&gt;作业调度程序按一定策略&lt;/strong&gt;从后备作业队列中&lt;strong&gt;选择若干个作业调入内存&lt;/strong&gt;，使他们共享 CPU 和系统中的各种资源&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多道性、无序性、调度性、复杂性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;li&gt;优点：能够提高 CPU、内存和 IO 设备的利用率和系统的吞吐量（选择、简答）&lt;/li&gt;
&lt;li&gt;缺点：系统平均周转时间长（选择、简答）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080902.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080902.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分时 操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：允许&lt;strong&gt;多个用户&lt;/strong&gt;通过终端机&lt;strong&gt;同时使用&lt;/strong&gt;计算机，每个用户通过终端与主机交互时都能得到快速响应。&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多路性、独立性、及时性、交互性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080903.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080903.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实时 操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：实时系统必须&lt;strong&gt;及时响应&lt;/strong&gt;外部时间的请求，在规定时间内完成对该事件的处理。主要用于&lt;strong&gt;实时控制&lt;/strong&gt;和&lt;strong&gt;实时信息处理&lt;/strong&gt;领域。（选择、填空）&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多路性、独立性、及时性、交互性、可靠性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080904.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080904.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统产品现状（可略）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;运行主体&lt;/th&gt;
&lt;th&gt;实例（了解即可）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主机&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;大型主机&lt;/td&gt;
&lt;td&gt;IBM 的 OS / 360、OS / 390&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;服务器&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;网络服务器&lt;/td&gt;
&lt;td&gt;Linux、Windows Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;微机&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;微型计算机&lt;/td&gt;
&lt;td&gt;Windows7、Mac OS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;嵌入式&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;嵌入式设备&lt;/td&gt;
&lt;td&gt;Android、iOS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;13-操作系统特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-操作系统特征&#34;&gt;#&lt;/a&gt; 1.3 操作系统特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;现在操作系统都支持&lt;strong&gt;多任务&lt;/strong&gt;，具有&lt;strong&gt;并发&lt;/strong&gt;、&lt;strong&gt;共享&lt;/strong&gt;、&lt;strong&gt;虚拟&lt;/strong&gt;和&lt;strong&gt;异步性&lt;/strong&gt;特征。
&lt;ul&gt;
&lt;li&gt;并发：两个或多个事件在&lt;strong&gt;同一时间间隔&lt;/strong&gt;内发生&lt;/li&gt;
&lt;li&gt;共享：系统中的&lt;strong&gt;资源&lt;/strong&gt;可供内存中多个并发执行的&lt;strong&gt;进程共同使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;虚拟：最常用&lt;strong&gt;内存虚拟化&lt;/strong&gt;，用户感觉到的内存大于实际内存。&lt;/li&gt;
&lt;li&gt;异步性：进程以&lt;strong&gt;不可预知的速度&lt;/strong&gt;向前推进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-操作系统的功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-操作系统的功能&#34;&gt;#&lt;/a&gt; 1.4 操作系统的功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;管理计算机资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;含义：&lt;/p&gt;
&lt;p&gt;内存管理的主要任务是为&lt;strong&gt;多道程序的运行提供良好的环境&lt;/strong&gt;，方便用户&lt;strong&gt;使用内存&lt;/strong&gt;，提高内存的利用率，以及从&lt;strong&gt;逻辑上扩充内存&lt;/strong&gt;以实现&lt;strong&gt;虚拟存储&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内存分配&lt;/p&gt;
&lt;p&gt;主要任务是&lt;strong&gt;为每道程序分配内存空间&lt;/strong&gt;，可采用两种分配方式，即&lt;strong&gt;静态分配方式&lt;/strong&gt;和&lt;strong&gt;动态分配方式&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态分配方式
&lt;ul&gt;
&lt;li&gt;先把内存划分先把内存划分定的区域&lt;/li&gt;
&lt;li&gt;大小数量不再变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态分配方式
&lt;ul&gt;
&lt;li&gt;根据进程实际，请求分配内存&lt;/li&gt;
&lt;li&gt;大小数量动态变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存保护&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主要任务：&lt;/p&gt;
&lt;p&gt;一是使操作系统&lt;strong&gt;内核的空间&lt;/strong&gt;不会被用户随意访问，以保证系统的安全和稳定；&lt;/p&gt;
&lt;p&gt;二是确保&lt;strong&gt;每道用户程序&lt;/strong&gt;都在&lt;strong&gt;自己的内存空间&lt;/strong&gt;中运行，互不干扰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存保护的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用界限寄存器存放允许程序访问的地址区间的上限和下限。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080905.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080905.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址映射&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;含义：&lt;strong&gt;CPU 执行程序过程中访问内存时，需要把&lt;/strong&gt;程序的逻辑地址转变为物理地址&lt;/strong&gt;，这个转换过程称为&lt;strong&gt;地址映射&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080906.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080906.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存扩充&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;含义：&lt;strong&gt;借助于&lt;/strong&gt;虚拟技术&lt;/strong&gt;，从&lt;strong&gt;逻辑&lt;/strong&gt;上扩充内存容量，使系统能够向用户提供比物理内存大的存储容量。&lt;/p&gt;
&lt;p&gt;👉&lt;strong&gt;请求调入：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许系统在&lt;strong&gt;装入一部分用户程序&lt;/strong&gt;时就启动该程序运行，在程序运行过程中&lt;strong&gt;若发现要执行的指令或访问的数据尚未装入内存&lt;/strong&gt;，通过&lt;strong&gt;请求调入将需要指令或数据装入内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080907.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080907.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;👉&lt;strong&gt;置换功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在请求调入时，&lt;strong&gt;若发现内存空间不足&lt;/strong&gt;，需要&lt;strong&gt;先将内存中的一部分内容换到外存中&lt;/strong&gt;，以便&lt;strong&gt;腾出内存空间&lt;/strong&gt;装入当前需要的内容。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080908.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080908.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容：进程的描述与组织、进程控制、进程同步、进程通信及进程调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：设备管理主要完成用户的&lt;strong&gt; I/O 请求&lt;/strong&gt;，为用户&lt;strong&gt;分配 I/O 设备&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;缓冲管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备分配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备独立性和虚拟设备&lt;/strong&gt; (设备独立性功能使应用程序独&lt;br&gt;
立于物理设备)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件存储空间的管理&lt;/p&gt;
&lt;p&gt;为每个文件分配必要的&lt;strong&gt;外存空间&lt;/strong&gt;，&lt;strong&gt;提高外存利用率&lt;/strong&gt;，并能有助于&lt;strong&gt;提高访问文件的速度&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录管理&lt;/p&gt;
&lt;p&gt;为每个文件建立&lt;strong&gt;目录项&lt;/strong&gt;并对众多目录项进行有效组织。目录项包括文件名、文件属性及文件的地址等信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件的读、写管理和存取控制&lt;/p&gt;
&lt;p&gt;根据用户的请求，&lt;strong&gt;从外存中读取数据&lt;/strong&gt;或&lt;strong&gt;将数据写入外存&lt;/strong&gt;。防止未经审核的用户存取文件，防止冒名顶替存取文件，防止以不正确的方式使用文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供用户接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令接口
&lt;ul&gt;
&lt;li&gt;目的：为了便于用户与计算机系统的交互&lt;/li&gt;
&lt;li&gt;分类：联机用户接口和脱机用户接口&lt;/li&gt;
&lt;li&gt;联机：常命令接口由一组键盘操作命令和命令解释程序组成&lt;/li&gt;
&lt;li&gt;脱机：为批处理作业的用户提供，也称为批处理用户接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形用户接口
&lt;ul&gt;
&lt;li&gt;用户可以轻松地通过&lt;strong&gt;选择窗口、菜单、对话框、滚动条、图标等&lt;/strong&gt;简单的操作来完成对作业和任务的提交与控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序接口
&lt;ul&gt;
&lt;li&gt;用户程序接口指的是&lt;strong&gt;应用程序&lt;/strong&gt;和系统的&lt;strong&gt;核心程序&lt;/strong&gt;的接口，就是&lt;strong&gt;系统调用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;系统调用是一组预先定义好的模块，它们提供&lt;strong&gt;一条管道&lt;/strong&gt;让应用程序或用户能由此得到&lt;strong&gt;核心程&lt;/strong&gt;序的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;15-操作系统的体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-操作系统的体系结构&#34;&gt;#&lt;/a&gt; 1.5 操作系统的体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单的监控程序模型
&lt;ul&gt;
&lt;li&gt;功能简陋，任意时刻系统中只能运行一个任务 ，保证了对系统信息的互斥访问，保护了系统数据的安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单体结构模型一
&lt;ul&gt;
&lt;li&gt;所有的软件和数据结构都放置在 - 个逻辑模块中，对外层的用户程序提供一个完整的内核界面 —— 系统调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;层次结构模型
&lt;ul&gt;
&lt;li&gt;基本思想是将操作系统分解为多个小的，容易理解的层。系统功能被隔离在不同层中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户 / 服务器模型与微内核结构
&lt;ul&gt;
&lt;li&gt;核心思想是核心功能外移，即把传统操作系统内核中的一些组成部分放到内核之外作为 - 个独立的服务器进程来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态可扩展结构模型
&lt;ul&gt;
&lt;li&gt;基本思想就是在运行过程中，能够动态地实现系统行为扩展的结构，也可称之为弹性结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;16-指令的执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-指令的执行&#34;&gt;#&lt;/a&gt; 1.6 指令的执行&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令周期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序是具有独立功能的一组指令的集合&lt;/strong&gt;，程序的执行就是按照某种控制流执行指令的过程。&lt;/li&gt;
&lt;li&gt;一个&lt;strong&gt;单一指令&lt;/strong&gt;需要的&lt;strong&gt;处理&lt;/strong&gt;称为&lt;strong&gt;指令周期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一个指令周期可以划分为两个步骤，分别是&lt;strong&gt;取指周期&lt;/strong&gt;和&lt;strong&gt;执行周期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080909.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080909.png&#34; class=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;** 程序计数器 (PC)&lt;strong&gt; 保存有下一次要取的指令的地址。取到的指令被放置在处理器的&lt;/strong&gt;指令寄存器 (IR)** 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;取指令和执行指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指令中包含确定处理器要采取动作的位，处理器解释指令并执行要求的动作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080910.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080910.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;👉动作分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处理器与存储器&lt;/strong&gt;之间的&lt;strong&gt;指令或数据传送&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理器与 I/O 设备&lt;/strong&gt;之间的&lt;strong&gt;指令或数据传送&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;算术运算&lt;/strong&gt;操作或&lt;strong&gt;逻辑运算&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制&lt;/strong&gt;操作，即&lt;strong&gt;修改指令的执行顺序&lt;/strong&gt;的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二章进程管理重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二章进程管理重点&#34;&gt;#&lt;/a&gt; 第二章：进程管理（重点）&lt;/h2&gt;
&lt;h3 id=&#34;21-进程的描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21-进程的描述&#34;&gt;#&lt;/a&gt; 2.1 进程的描述&lt;/h3&gt;
&lt;h4 id=&#34;211程序的顺序执行与并发执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#211程序的顺序执行与并发执行&#34;&gt;#&lt;/a&gt; 2.1.1 程序的顺序执行与并发执行&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;顺序执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：先进入内存的程序先执行，在一个程序执行完毕之前，不能执行其他程序&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;顺序性、封闭性、可再现性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：程序并发执行是指&lt;strong&gt;同一时间间隔内&lt;/strong&gt;运行多个程序。一个程序执行结束前，可以运行其他程序&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;间断性、失去封闭性、不可再现性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;宏观并行&lt;/strong&gt;：用户看到多个程序同时向前推进&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微观串行&lt;/strong&gt;：任意时刻&lt;strong&gt;一个 CPU&lt;/strong&gt; 上只有&lt;strong&gt;一个程序&lt;/strong&gt;在执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;212进程的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#212进程的概念&#34;&gt;#&lt;/a&gt; 2.1.2 进程的概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是允许并发执行的&lt;strong&gt;程序&lt;/strong&gt;在某个数据集合上的&lt;strong&gt;运行过程&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程是由&lt;strong&gt;正文段、用户数据段及进程控制块&lt;/strong&gt;共同组成的执行环境&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正文段&lt;/th&gt;
&lt;th&gt;存放被执行的机器指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用户数据段&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;存放用户数据&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;进程控制块&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;存放进程的运行环境&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特征&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;并发性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多个进程实体能在一 - 段时间间隔内同时运行&lt;br /&gt;&lt;strong&gt;并发性是进程和现代操作系统的重要特征&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程是实体的执行过程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;独立性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;独立运行和资源调度的基本单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异步性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程的执行时断时续 ，何时执行、何时暂停都无法预知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构特征&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程实体包括用户&lt;strong&gt;正文段、 用户数据段&lt;/strong&gt;和&lt;strong&gt;进程控制块&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程与程序的比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;静态&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;永久&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;暂时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包括正文段、用户数据段、进程控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程和程序的联系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程是程序的一次执行&lt;/li&gt;
&lt;li&gt;一个程序可以对应多个进程&lt;/li&gt;
&lt;li&gt;同一个程序可以在不同的数据集合上运行，构成不同的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;213-进程控制块pcb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#213-进程控制块pcb&#34;&gt;#&lt;/a&gt; 2.1.3 进程控制块（PCB）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;进程实体包括用户正文段、用户数据段和进程控制段&lt;/li&gt;
&lt;li&gt;含义：进程控制块是进程实体的一部分，是操作系统中最重要的数据结构。&lt;strong&gt;记录&lt;/strong&gt;了操作系统所需要的、用于&lt;strong&gt;描述进程&lt;/strong&gt;及&lt;strong&gt;控制进程&lt;/strong&gt;运行所需的&lt;strong&gt;全部信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;包含的信息
&lt;ol&gt;
&lt;li&gt;进程标识符信息：用于唯一标识一个进程&lt;/li&gt;
&lt;li&gt;处理机状态信息
&lt;ol&gt;
&lt;li&gt;通用寄存器&lt;/li&gt;
&lt;li&gt;指令计数器&lt;/li&gt;
&lt;li&gt;程序状态字 PSW&lt;/li&gt;
&lt;li&gt;用户栈指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;进程调度信息：包括进程状态信息、进程优先级和进程调度所需的其他信息&lt;/li&gt;
&lt;li&gt;进程控制信息：包括程序和数据的地址、进程同步和通信机制、资源清单、以及链接指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;214-进程的状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#214-进程的状态&#34;&gt;#&lt;/a&gt; 2.1.4 进程的状态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;就绪态&lt;/li&gt;
&lt;li&gt;执行态&lt;/li&gt;
&lt;li&gt;阻塞态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;215-进程的组织&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#215-进程的组织&#34;&gt;#&lt;/a&gt; 2.1.5 进程的组织&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;链接方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把系统中具有&lt;strong&gt;相同状态&lt;/strong&gt;的进程控制块 PCB 用其中的&lt;strong&gt;链接字&lt;/strong&gt;连成一个对联&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081101.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081101.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统根据所有进程的状态，建立索引表，索引表的每 - 一个表项指向一个 PCB 物理块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081102.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081102.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把具有相同状态的进程控制块用队列组织起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081103.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081103.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-进程的控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-进程的控制&#34;&gt;#&lt;/a&gt; 2.2 进程的控制&lt;/h3&gt;
&lt;h4 id=&#34;221-创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#221-创建&#34;&gt;#&lt;/a&gt; 2.2.1 &lt;strong&gt;创建&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么情况下需要创建新进程呢？&lt;/p&gt;
&lt;p&gt;用户登录	作业调度	提供服务	应用请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何创建新进程？ /  创建新进程的步骤？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;申请空白 PCB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为新进程分配资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化进程控制块&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将新进程插入到就绪队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;222-阻塞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#222-阻塞&#34;&gt;#&lt;/a&gt; 2.2.2 &lt;strong&gt;阻塞&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么情况下会进行进程的阻塞？&lt;/p&gt;
&lt;p&gt;请求系统服务	启动某种操作	新数据尚未达到	无心工作可做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整进程阻塞的过程？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将进程的状态改为阻塞态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程插入响应的阻塞队列&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转到进程调度程序，从就绪队列中选择进程为分配 CPU&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;223-唤醒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#223-唤醒&#34;&gt;#&lt;/a&gt; 2.2.3 &lt;strong&gt;唤醒&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;进程唤醒的过程？
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将进程从阻塞队列中移出&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程状态由阻塞状态改为就绪态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程插入就绪队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;224-终止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#224-终止&#34;&gt;#&lt;/a&gt; 2.2.4 &lt;strong&gt;终止&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;完成进程终止的过程
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从进程 PCB 中读取进程状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;若进程正在执行，则终止进程的执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;释放资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将终止进程的 PCB 移出&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-操作系统内核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-操作系统内核&#34;&gt;#&lt;/a&gt; 2.3 操作系统内核&lt;/h3&gt;
&lt;p&gt;​	操作系统内核是计算机&lt;strong&gt;硬件的第一次扩充&lt;/strong&gt;，与硬件关系密切&lt;/p&gt;
&lt;h4 id=&#34;231-操作系统内核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#231-操作系统内核&#34;&gt;#&lt;/a&gt; 2.3.1 操作系统内核&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;支撑功能&lt;/strong&gt;：中断处理、始终管理、原语操作（原语操作也称原子操作，是一组在执行过程中不能被中断的操作。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源管理功能&lt;/strong&gt;：进程管理、存储管理、设备管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;232-中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#232-中断&#34;&gt;#&lt;/a&gt; 2.3.2 中断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是中断 ？&lt;/p&gt;
&lt;p&gt;中断是&lt;strong&gt;改变&lt;/strong&gt;处理器执行指令顺序的一种&lt;strong&gt;事件&lt;/strong&gt;。出现中断时，计算机停止现在程序的运行，转向&lt;strong&gt;对这些中断事件的处理&lt;/strong&gt;，处理结束后再&lt;strong&gt;返回到现行程序的间断处&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么需要中断 ？&lt;/p&gt;
&lt;p&gt;引入中断机制后， &lt;strong&gt;CPU 可以与其他设备并行工作&lt;/strong&gt;，能有效&lt;strong&gt;提高 CPU 的利用率&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单重中断处理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081104.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081104.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;233-时钟管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#233-时钟管理&#34;&gt;#&lt;/a&gt; 2.3.3 时钟管理&lt;/h4&gt;
&lt;p&gt;时钟是计算机系统的脉搏，计算机的很多活动都是由定时测量来驱动的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机系统中的时钟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时时钟 RTC（CMOS）&lt;/li&gt;
&lt;li&gt;OS 时钟&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081105.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081105.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟机制&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081106.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081106.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟程序功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护日期和时间&lt;/li&gt;
&lt;li&gt;递减当前进程在一个时间片内的剩余执行时间，防止运行超时&lt;/li&gt;
&lt;li&gt;对 CPU 的使用情况记账&lt;/li&gt;
&lt;li&gt;递减报警计数器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;234-系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#234-系统调用&#34;&gt;#&lt;/a&gt; 2.3.4 系统调用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是系统调用？&lt;/p&gt;
&lt;p&gt;系统调用是（一群）&lt;strong&gt;预先定义好的模块&lt;/strong&gt;，提供&lt;strong&gt;一条管道&lt;/strong&gt;让应用程序能由此到&lt;strong&gt;核心程序&lt;/strong&gt;的服务。系统调用是&lt;strong&gt;系统程序&lt;/strong&gt;与&lt;strong&gt;用户程序&lt;/strong&gt;之间的&lt;strong&gt;接口&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用和一般函数调用的区别？&lt;/p&gt;
&lt;p&gt;区别 1: 系统调用运行在&lt;strong&gt;系统态&lt;/strong&gt;，一般函数运行在&lt;strong&gt;用户态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区别 2:&lt;strong&gt; 执行过程不同&lt;/strong&gt; (系统调用执行时，当前进程被中断)&lt;/p&gt;
&lt;p&gt;区别 3: 系统调用进行中断处理，多了&lt;strong&gt;系统开销&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081107.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081107.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用的类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;进程控制类&lt;/strong&gt;系统调用。创建、撤销进程；获得、改变进程属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件操作类&lt;/strong&gt;系统调用。创建、删除、打开、关闭和读 / 写文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备管理类&lt;/strong&gt;系统调用。请求、释放设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信类&lt;/strong&gt;系统调用。打开、关闭链接，交换信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信息维护类&lt;/strong&gt;系统调用。返回系统当前日期、时间、版本号、用户数、空闲内存和磁盘空间大小等信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-进程同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24-进程同步&#34;&gt;#&lt;/a&gt; 2.4 进程同步&lt;/h3&gt;
&lt;p&gt;操作系统同步机制的&lt;strong&gt;主要任务&lt;/strong&gt;就是要&lt;strong&gt;保证&lt;/strong&gt;在多任务共享系统资源的情况下，&lt;strong&gt;程序执行能得到正确的结果&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;241-进程同步的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#241-进程同步的基本概念&#34;&gt;#&lt;/a&gt; 2.4.1 进程同步的基本概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;两个任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是&lt;strong&gt;对具有资源共享关系的进程&lt;/strong&gt;，保证诸进程以&lt;strong&gt;互斥&lt;/strong&gt;的方式&lt;strong&gt;访问临界资源&lt;/strong&gt;。&lt;strong&gt;临界资源是必须以互斥方式访问的共享资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;二是对具有相互合作关系的进程，保证相互合作的诸进程协调执行。相互合作的进程可能同时存在资源共享的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;并发问题的解决&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 PIN 和 POUT&lt;strong&gt; 互斥&lt;/strong&gt;地访问 count ，&lt;strong&gt;即 PIN 访问 count 时， POUT 就必须等待 PIN 对 count 的访问完全结束，再开始对 count 的访问&lt;/strong&gt;，反之亦然。这样就不会出现计算结果的错误了。&lt;/p&gt;
&lt;p&gt;像 count 这样必须以&lt;strong&gt;互斥方式访问&lt;/strong&gt;的&lt;strong&gt;共享资源&lt;/strong&gt;称为&lt;strong&gt;临界资源&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里采用临界区&lt;strong&gt;加锁&lt;/strong&gt;的方法，在临界区前加入&lt;strong&gt;进入区代码&lt;/strong&gt;，在临界区之后加&lt;strong&gt;退出区代码&lt;/strong&gt;来实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;242-同步机制应遵循的准则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#242-同步机制应遵循的准则&#34;&gt;#&lt;/a&gt; 2.4.2 同步机制应遵循的准则&lt;/h4&gt;
&lt;p&gt;同步机制应遵循的准则可以提供判断、选择和评价同步技术的参考依据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空闲让进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当没有进程处于临界区时&lt;/strong&gt;，表明临界资源处于空闲状态，应&lt;strong&gt;允许一个&lt;/strong&gt;请求进入临界区的进程立即进入自己的临界区，以有效地利用临界资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忙则等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当己有进程进入临界区时，表明临界资源正在被访问，因而其他试图进入临界区的进程必须等待，以保证对临界资源的互斥访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有限等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对要求访问临界资源的进程，应保证在有限时间内能进入自己的临界区，以免进程陷入无限等待的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;让权等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当进程申请不到共享资源的访问权时，应立即释放处理机&lt;/strong&gt;，以兔进程陷入 “忙等” 状态，浪费 CPU 资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;243-信号量机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#243-信号量机制&#34;&gt;#&lt;/a&gt; 2.4.3 信号量机制&lt;/h4&gt;
&lt;p&gt;​	在信号量机制中，用&lt;strong&gt;信号量的取值&lt;/strong&gt;来表示资源的使用状况，或某种事件是否发生，以此为基础实现进程的同步。&lt;/p&gt;
&lt;p&gt;​	对不同的共享资源设置被称为信号量的变量，&lt;strong&gt;用信号量的取值来表示资源的使用状况&lt;/strong&gt;，或某种事件是否发生。&lt;/p&gt;
&lt;p&gt;​	通过信号量的取值来判断进程是否能访问与信号量对应的共享资源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;整形信号量机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果整型量 &amp;gt; 0，说明有可用资源；如果整型量≤0，说明资源忙，进程必须等待。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;一次只允许一个进程访问&lt;/strong&gt;的临界资源，可定义一个用于&lt;strong&gt;互斥&lt;/strong&gt;的整型信号量，并将其&lt;strong&gt;初始化为 1&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;具体操作&lt;/p&gt;
&lt;p&gt;整型信号量的值只能通过两个特定的原子操作 wait 和 signal 来改变&lt;/p&gt;
&lt;p&gt;wait 和 signal 操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;wait(s) //用于申请资源
&amp;#123;
    while s&amp;lt;=0 do no-op;// s &amp;lt;= 0时循环执行空操作
    s=s-1;
&amp;#125;

signal(s) //用于释放资源
&amp;#123;
    s=s+1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整型信号量的值只能由 wait 和 siqnal 操作改变。&lt;/li&gt;
&lt;li&gt;wait 和 signal 操作都是&lt;strong&gt;原子操作&lt;/strong&gt;，即这两个操作中对信号量的访问&lt;strong&gt;不能被中断&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;原子操作可以通过关中断来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的资源对应不同的信号量，并不是系统中所有的资源都用同一个信号量表示&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;记录型信号量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：是不存在 “忙等” 采取了” 让权等待” 的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AND 型信号量机制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本思想是将进程在整个运行过程中所需要的所有资源一次性地全部分配给进程，待该进程使用完后再一起释放。只要还有一个资源不能分配给该进程，其他所有可能为之分配的资源也不分配给它。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;244-经典的进程同步问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#244-经典的进程同步问题&#34;&gt;#&lt;/a&gt; 2.4.4 经典的进程同步问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生产者一 消费者问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者进程生产消息，并将消息提供给消费者进程消费。在生产者进程和消费者进程之间设置了一个具有 n 个缓冲区的缓冲池，生产者进程可以将它所产生的消息放入缓冲池的一个缓冲区中，消费者进程可以从一个缓冲区中取得一个消息消费。&lt;/li&gt;
&lt;li&gt;任意两个进程必须以互斥的方式访问公共缓冲池。当缓冲池空，没有可供消费的消息时，消费者进程必须阻塞等待。当缓冲池装满消息，没有空闲缓冲区时，生产者进程必须阻塞等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要解决的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现任意两个进程对缓冲池的互斥访问。&lt;/li&gt;
&lt;li&gt;实现对生产者进程和消费者进程的 “协调”&lt;/li&gt;
&lt;li&gt;即缓冲池中有消息时消费者进程才能执行取消息的操作。无消息时，阻塞消费者进程。缓冲池中有空闲缓冲区时，生产者进程才能执行放消息的操作。无空闲缓冲区时，阻塞生产者进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号量的设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置一个互斥信号量 mulex ，用于实现对公共缓冲池的互斥访问，初值为 1。&lt;/li&gt;
&lt;li&gt;设置两个资源信号量，分别表示可用资源数。empty : 表示缓冲池中的空缓冲区数，初值为 n。full : 表示装有消息的缓冲区数，初值为 0 (一个缓冲区中放一个消息)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用记录型信号量机制实现生产者 —— 消费者问题的同步代码如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产者进程同步代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;Producer:
begin
repeat
...
produce an item in nextp;
wait(empty);//申请空缓冲区
wait(mutex);//申请公共缓冲池的互斥访问权
buffer(in)=nextp; //将消息放入in指针指向的缓冲区
in=(in+ 1) mod n; //in指针指向下一个空缓冲区
signal(mutex); //释放对公共缓冲池的互斥访问权
signal(full); //释放消息资源
until false
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消费者进程同步代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;Consumer:
begin 
repeat
...
wait(ull); //申请消息
wait(mutex); //申请公共缓冲池的互斥访问权
nextc= buffer(out); //从out指针指向的缓冲区中取消息
out=(out+ 1) mod h; //out指针指向下一个装有消息的缓冲区
signal(mutex); //释放对公共缓冲池的互斥访问权
signal(empty); //释放空缓冲区
consume item in nextc ;
until false
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;245-管程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#245-管程&#34;&gt;#&lt;/a&gt; 2.4.5 管程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;管程的定义&lt;/p&gt;
&lt;p&gt;管程是描述共享资源的数据结构和在数据结构上的共享资源管理程序的集合。其中包括变量的定义、变量的初始化代码，以及管理共享资源的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对管程的说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管程是可供程序员调用的软件包&lt;/strong&gt;，是一个由过程、变量及数据结构等组成的集合，它们组成一个特殊的模块或软件包。&lt;strong&gt;进程可以在任何需要的时候调用管程中的过程&lt;/strong&gt;，但不能在管程外的过程中直接访问管程内的数据结构。&lt;/li&gt;
&lt;li&gt;每次只有一个进程调用管程执行，任意时刻管程中只能有一个活跃进程。&lt;/li&gt;
&lt;li&gt;管程是一种编程语言的构件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;25-进程通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25-进程通信&#34;&gt;#&lt;/a&gt; 2.5 进程通信&lt;/h3&gt;
&lt;p&gt;​	操作系统提供进程通信功能，以支持进程之间的信息交换。&lt;/p&gt;
&lt;h4 id=&#34;251-共享存储器系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#251-共享存储器系统&#34;&gt;#&lt;/a&gt; 2.5.1 共享存储器系统&lt;/h4&gt;
&lt;p&gt;​	在共享存储器系统中，&lt;strong&gt;相互通信的进程共享某些数据结构或共享存储区&lt;/strong&gt;，进程之间能够通过这些空间进行通信。共享存储器系统可分为两种类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于&lt;strong&gt;共享数据结构&lt;/strong&gt;的通信方式。要求诸进程公用某些数据结构，以实现进程间的信息交换。&lt;/li&gt;
&lt;li&gt;基于&lt;strong&gt;共享存储区&lt;/strong&gt;的通信方式。进程通过对共享存储区中的数据的读或写来实现通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;252-消息传递系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#252-消息传递系统&#34;&gt;#&lt;/a&gt; 2.5.2 消息传递系统&lt;/h4&gt;
&lt;p&gt;​	进程间通过&lt;strong&gt;操作系统提供的一组通信程序&lt;/strong&gt;传递格式化的信息。这种方式对应用程序隐藏了通信实现的细节使通信过程对用户是透明的。根据传递消息方式的不同，分为直接通信方式和间接通信方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;直接通信方式&lt;/strong&gt;。操作系统利用发送程序&lt;strong&gt;直接&lt;/strong&gt;把消息发送给目标程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;间接通信方式&lt;/strong&gt;。进程之间的通信需要通过用于&lt;strong&gt;暂存&lt;/strong&gt;消息的共享数据结构来实现，如信箱。该方式可以实现实时通信，又可以实现非实时通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;253-管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#253-管道&#34;&gt;#&lt;/a&gt; 2.5.3 管道&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;管道&lt;/strong&gt;是连接读写进程的&lt;strong&gt;一个特殊文件&lt;/strong&gt;，也被称为管道文件。管道文件存在于&lt;strong&gt;外存&lt;/strong&gt;中，其中的消息没有固定长度，能用于进程间大量的信息通信。向管道提供输入的发送进程以&lt;strong&gt;字符流&lt;/strong&gt;的形式将大量的数据送入管道。接受管道输出的接收进程，从管道中接收数据。&lt;/p&gt;
&lt;h4 id=&#34;254-消息缓冲队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#254-消息缓冲队列&#34;&gt;#&lt;/a&gt; 2.5.4 消息缓冲队列&lt;/h4&gt;
&lt;p&gt;​	用于本地进程之间的通信，包括&lt;strong&gt;数据结构、发送原语和接收原语&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	发送进程&lt;strong&gt;发送消息&lt;/strong&gt;时，先&lt;strong&gt;申请一个消息缓冲区&lt;/strong&gt;，将要发送的消息&lt;strong&gt;从发送进程的发送区放入消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓冲区&lt;/strong&gt;。然后，&lt;strong&gt;调用发送原语&lt;/strong&gt;将消息&lt;strong&gt;发送给接收进程&lt;/strong&gt;，发送原语将发送缓冲区插入接收进程的消&lt;/p&gt;
&lt;p&gt;息缓冲队列。&lt;/p&gt;
&lt;p&gt;​	接收消息的进程&lt;strong&gt;通过调用接收原语&lt;/strong&gt;将该进程消息缓冲队列中的消息复制到自己的消息接收区。&lt;/p&gt;
&lt;p&gt;​	消息缓冲区是一个结构型数据结构。&lt;/p&gt;
&lt;p&gt;​	消息缓冲队列需要被当作&lt;strong&gt;临界资源&lt;/strong&gt;，在发送原语和接收原语中&lt;strong&gt;对消息缓冲队列的访问&lt;/strong&gt;需要&lt;strong&gt;进行互斥与同步&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;26-线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#26-线程&#34;&gt;#&lt;/a&gt; 2.6 线程&lt;/h3&gt;
&lt;h4 id=&#34;261-线程的描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#261-线程的描述&#34;&gt;#&lt;/a&gt; 2.6.1 线程的描述&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;为了进一步提高程序的并发性 ，减少系统开销，在操作系统中引入了线程的概念&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	引入线程作为独立调度和分派的单位，&lt;strong&gt;不独立拥有资源，而与其他线程共享同一进程的资源&lt;/strong&gt;，减少了系统的时空开销。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;线程的实质是把进程的任务划分成更小，具有独立功能的单位&lt;/strong&gt;，以线程的形式来并发执行，以提高程序并发执行的程度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线程的概念&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程是进程中的一个实体&lt;/strong&gt;，是被系统独立调度和分派的基本单位。&lt;strong&gt;一个线程可以创建和撤销另一个线程。同一进程中的多个线程可以并发执行。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的分类&lt;/p&gt;
&lt;p&gt;用户级线程和内核级线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的三种基本状态&lt;/p&gt;
&lt;p&gt;就绪、运行和阻塞。&lt;/p&gt;
&lt;p&gt;就绪态是线程一 - 旦获得 CPU 就可以投入运行的状态。&lt;/p&gt;
&lt;p&gt;运行态是线程获得 CPU 正在运行的状态。&lt;/p&gt;
&lt;p&gt;阻塞态是线程由于等待某个事件的发生而暂停执行的状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081108.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081108.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程控制块（TCB）&lt;/p&gt;
&lt;p&gt;每个线程都由一个数据结构表示，包括它的&lt;strong&gt;基本状态、标识及记账信息&lt;/strong&gt;，这个数据结构就是&lt;strong&gt;线程控制块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;线程控制块记录了操作系统所需的，用于描述线程情况及控制线程运行所需的全部信息。&lt;/p&gt;
&lt;p&gt;线程控制块采用&lt;strong&gt;链接&lt;/strong&gt;方式来组织，把&lt;strong&gt;同一进程中具有相同状态的 TCB 用指针链接成列&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程与进程的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;资源和调度&lt;/strong&gt;。&lt;strong&gt;线程是程序执行的基本单位，进程是拥有资源的基本单位。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址空间资源&lt;/strong&gt;。&lt;strong&gt;不同进程的地址空间是相互独立的，而同一进程中的各线程共享同一地址空间。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信关系&lt;/strong&gt;。进程之间的通信必须使用操作系统提供的进程间通信机制，而同一进程中的各线程间可以&lt;strong&gt;通过直接读或写全局变量&lt;/strong&gt;来进行通信，甚至无需操作系统的参与。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发性&lt;/strong&gt;。多进程之间可以并发执行，多线程之间也可以并发执行，同 - 进程中的多个线程之间也可以并发执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统开销&lt;/strong&gt;。创建或撤销进程时，系统都要为之分配或回收资源，系统开销大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本人说明：可以理解为线程是 java 的线程，进程是 windows 的一个软件&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;262-线程的控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#262-线程的控制&#34;&gt;#&lt;/a&gt; 2.6.2 线程的控制&lt;/h4&gt;
&lt;p&gt;​	线程控制包括创建新线程、终止线程、线程调度和线程切换，以及线程由于等待某个事件的发生而被阻塞与该事件发生后线程被唤醒。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;用户线程的创建通过调用线程库中的实用程序完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;内核线程的创建由内核完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如果进程中一个用户线程被阻塞，则整个进程必须等待。&lt;/p&gt;
&lt;p&gt;​	当被阻塞的线程所等待的事件发生时，则由有关进程唤醒原语&lt;strong&gt;将该线程所属的进程唤醒，然后由有关线程唤醒原语将该线程唤醒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如果进程中的一个内核线程被阻塞，内核可以调度同一个进程中的另一个内核线程运行。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;一个进程中的所有线程共享同一个地址空间&lt;/strong&gt;和诸如打开的文件之类的其他资源。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;一个线程对资源的任何修改都会影响同一个进程中其他线程的环境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;同一进程中线程间共享内存和文件资源&lt;/strong&gt;，各线程间可通过&lt;strong&gt;直接读写全局变量&lt;/strong&gt;进行通信。&lt;/p&gt;
&lt;p&gt;​	对于&lt;strong&gt;不同进程的线程间&lt;/strong&gt;通信，则必须&lt;strong&gt;使用操作系统提供的线程间&lt;/strong&gt;通信机制。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三章进程调度与死锁重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三章进程调度与死锁重点&#34;&gt;#&lt;/a&gt; 第三章：进程调度与死锁（重点）&lt;/h2&gt;
&lt;h3 id=&#34;本章考试重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本章考试重点&#34;&gt;#&lt;/a&gt; 本章考试重点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程调度
&lt;ul&gt;
&lt;li&gt;进程调度算法（选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;实时系统中的调度概念及算法 (选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;进程切换 (选择、填空、简答)&lt;/li&gt;
&lt;li&gt;多处理器调度 (选择、填空、简答)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死锁
&lt;ul&gt;
&lt;li&gt;死锁产生的原因、必要条件 (选择、填空、简答&lt;/li&gt;
&lt;li&gt;死锁的预防和避免 (选择、填空、简答)&lt;/li&gt;
&lt;li&gt;银行家算法 (选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;死锁的检测和解除 (选择、填空、简答)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近三年分值分布: 21~ 26 分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-进程调度的功能与时机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31-进程调度的功能与时机&#34;&gt;#&lt;/a&gt; 3.1 进程调度的功能与时机&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程调度功能&lt;/strong&gt;由操作系统内核的&lt;strong&gt;进程调度程序完成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;进程调度的功能是&lt;strong&gt;按照某种策略和算法&lt;/strong&gt;从&lt;strong&gt;就绪态&lt;/strong&gt;进程中为&lt;strong&gt;当前空闲的 CPU&lt;/strong&gt; 选择在其上运行的新进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时机&lt;/p&gt;
&lt;p&gt;当一个进程运行结束、进程阻塞、中断返回、在支持抢占式调度的系统中&lt;strong&gt;有比当前运行进程优先级更高的进程到来&lt;/strong&gt;、当前运行进程的&lt;strong&gt;时间片用完&lt;/strong&gt;，系统都会通过&lt;strong&gt;执行进程调度程序&lt;/strong&gt;重新进行进程调度。（优先级高、当前时间片用完）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-进程调度算法综合题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32-进程调度算法综合题&#34;&gt;#&lt;/a&gt; 3.2 进程调度算法（综合题）&lt;/h3&gt;
&lt;p&gt;进程调度算法是指从&lt;strong&gt;就绪态&lt;/strong&gt;进程中选择一个进程为其分配 CPU ，&lt;strong&gt;使其进入执行态&lt;/strong&gt;的算法。也就是说进程调度算法要 **“决定” 把 CPU 分配给就绪队列中的哪个进程 **。&lt;/p&gt;
&lt;p&gt;进程调度由操作系统内核中的进程调度程序完成。&lt;/p&gt;
&lt;h4 id=&#34;321-选择调度方式和算法的若干准则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#321-选择调度方式和算法的若干准则&#34;&gt;#&lt;/a&gt; 3.2.1 选择调度方式和算法的&lt;strong&gt;若干准则&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;周转时间短&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;周转时间&lt;/strong&gt;是指从&lt;strong&gt;作业被提交给系统开始，到作业完成为止&lt;/strong&gt;的这段时间间隔。&lt;/p&gt;
&lt;p&gt;包括&lt;strong&gt; 4 部分&lt;/strong&gt;时间：&lt;/p&gt;
&lt;p&gt;➢作业在&lt;strong&gt;外存后备队列上等待调度的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程在&lt;strong&gt;就绪队列上等待进程调度的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程在&lt;strong&gt; CPU 上执行的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程等待&lt;strong&gt; I/O 操作完成的时间&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果系统中&lt;strong&gt;有 n 个作业&lt;/strong&gt;，系统的&lt;strong&gt;平均周转时间&lt;/strong&gt;等于 n 个作业的周转时间&lt;strong&gt;之和除以 n&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作业的周转时间 T 与系统为它提供的服务时间 Ts 之比为 W， W 称为&lt;strong&gt;带权周转时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务时间&lt;strong&gt; Ts 是一个作业在 CPU 上执行的总时间&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应时间快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;响应时间是指&lt;strong&gt;用户提交一个请求开始&lt;/strong&gt;至&lt;strong&gt;系统首次产生响应&lt;/strong&gt;的时间为止的一段时间。&lt;/p&gt;
&lt;p&gt;它包括&lt;strong&gt; 3 部分&lt;/strong&gt;时间：从&lt;strong&gt;输入设备信息传送到处理机&lt;/strong&gt;的时间、&lt;strong&gt;处理机对请求信息进行处理&lt;/strong&gt;的时间，以及&lt;strong&gt;将所形成的响应信息回送到终端显示器&lt;/strong&gt;的时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于交互式系统，响应时间是衡量系统时间性能的重要指标。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;截止时间的保证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截止时间是指某个任务&lt;strong&gt;必须开始的最迟时间或必须完成的最迟时间&lt;/strong&gt;。是评价实时系统性能的重要指标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统吞吐量高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;是指&lt;strong&gt;单位时间内完成的作业数&lt;/strong&gt;。是评价系统性能的重要指标之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理机利用率好&lt;/p&gt;
&lt;p&gt;CPU 是计算机系统中影响时间性能的最重要的硬件资源，在多任务系统中，进程调度算法对 CPU 的利用率有很大影响。因此，在&lt;strong&gt;选择和设计进程调度算法时应该考虑使 CPU 的利用率尽可能高&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;322-先来先服务调度算法fcfs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#322-先来先服务调度算法fcfs&#34;&gt;#&lt;/a&gt; 3.2.2 先来先服务调度算法 (&lt;strong&gt;FCFS&lt;/strong&gt; )&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调度算法&lt;/p&gt;
&lt;p&gt;在进程调度中，FCFS 就是从就绪队列的队首选择最先到达就绪队列的进程，为该进程分配 CPU。（First-Come ， First- Served）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能分析&lt;/p&gt;
&lt;p&gt;FCFS&lt;strong&gt; 适合长进程&lt;/strong&gt;，有利于 CPU 繁忙的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;综合题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有3个进程p1、p2和p3 ，分别在0、1、 2时刻进入系统，需要的运行(服务)时间长度分别为24、3、3 .，按照FCFS调度算法， 3个进程的等待时间和周转时间分别是?

[答案]
等待时间=开始时间-进入时间，周转时间=运行时间+等待时间。
注意：开始运行时间从0开始计算
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进程名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进入系统时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;开始运行&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运行时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;等待时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;周转时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;27&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;此种情况下平均周转时间T和平均带权周转时间W为多少?

[答案] T=(24+26+ 28)/3=26
	  W=(24/24+ 26/3+ 28/3)/3-6.33

[解析]
	等待时间=开始时间-进入时间
	周转时间=运行时间+等待时间
	系统的平均周转时间:各个进程的周转时间总和/进程数
	带权周转时间:周转时间/运行时间
	平均带权周转时间:各个进程的带权周转时间总和/进程数
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;323-短进程优先调度算法-shortest-process-firstspf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#323-短进程优先调度算法-shortest-process-firstspf&#34;&gt;#&lt;/a&gt; 3.2.3 短进程优先调度算法 (Shortest-Process-First，SPF)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;算法的缺陷
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对长进程不利&lt;/strong&gt;。如果系统中不断有短进程到来长进程&lt;strong&gt;可能长时间得不到调度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不能保证紧迫进程的及时处理&lt;/strong&gt;，因&lt;strong&gt;本算法不考虑进程的紧迫程度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程的长度由用户估计而定，可能有偏差&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;324-优先权调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#324-优先权调度算法&#34;&gt;#&lt;/a&gt; 3.2.4 优先权调度算法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调度算法&lt;/p&gt;
&lt;p&gt;​	在使用优先权调度的系统中， 每个进程都有一个与之关联的优先权。&lt;/p&gt;
&lt;p&gt;​	当使用优先权调度算法进行进程调度时，系统将 CPU 分配给就绪队列中&lt;strong&gt;优先权值最高&lt;/strong&gt;的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权调度算法的分类&lt;/p&gt;
&lt;p&gt;① 非抢占式优先权调度算法高优先权进程一旦得到处理机， 便一直运行下去直到完成或由于某事件使该进程主动放弃处理机。&lt;/p&gt;
&lt;p&gt;​	即使更高优先权进程到来，也不能剥夺当前进程的 CPU 使用权，只能在就绪队列中等待。&lt;/p&gt;
&lt;p&gt;② 抢占式优先权调度算法&lt;/p&gt;
&lt;p&gt;​	新到达的就绪进程与正在运行进程的优先权相比较，若&lt;strong&gt;新到达进程的优先权高于当前正在运行进程的优先权&lt;/strong&gt;，则&lt;strong&gt;系统会抢占 CPU&lt;/strong&gt; ，分配给新到达的进程，正在执行的进程暂停执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权的类型&lt;/p&gt;
&lt;p&gt;根据优先权的变化特点将优先权的类型分为&lt;strong&gt;静态和动态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;静态优先权&lt;/strong&gt;。在创建时确定，在进程的整个运行期间不变。&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;动态优先权&lt;/strong&gt;。进程创建时被赋予的优先权，随进程的推进或随其等待时间的增加而改变。&lt;strong&gt;动态优先权调度算法可以使系统获得更好的调度性能&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权调度算法存在的问题和解决方案&lt;/p&gt;
&lt;p&gt;① 问题。无穷阻塞或称饥饿问题。指就绪态进程因得不到 CPU 而等待的状态。优先权调度算法可能使某个低优先权进程无穷等待。&lt;/p&gt;
&lt;p&gt;② 解决方案。&lt;strong&gt;老化 (Aging) 技术。逐渐增加在系统中等待时间很长进程的优先权。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;325时间片轮转调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#325时间片轮转调度算法&#34;&gt;#&lt;/a&gt; 3.2.5 时间片轮转调度算法&lt;/h4&gt;
&lt;p&gt;​	时间片轮转调度算法在现代分时系统中广泛使用， UNIX、Linux、 Windows 操作 系统都采用基于时间片轮转、支持优先权和抢占式调度的混合式进程调度算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;时间片轮转调度算法&lt;/p&gt;
&lt;p&gt;时间片是一个较小的时间单位，通常为 10~ 100ms。每当进程在 CPU_上连续运行的时间等于一一个时间片长度时，操作系统在时钟中断处理过程中会抢占 CPU，进行进程切换，用新的就绪进程替代当前进程，&lt;strong&gt;被替换的当前进程重新回到就绪队列中&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间片大小的确定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间片太长&lt;/strong&gt;，可降低进程的周转时间，但可能造成交互用户的响应时间过长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间片太短&lt;/strong&gt;，会增加进程切换和调度的开销，系统的平均周转时间也较长。&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;系统对响应时间的要求&lt;/strong&gt;。响应时间越短，时间片取值应该越小。&lt;/p&gt;
&lt;p&gt;设系统响应时间为 T ，进程数目为 N，时间片为 q ，则有 T=Nq ，即在 N - 定的情况下， T 的大小取决于 q。&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;就绪队列中进程的数目&lt;/strong&gt;。进程越多，响应时间越长。当设定了系统的最长响应时间值后，时间片的大小就与系统允许的最大进程数成反比。&lt;/p&gt;
&lt;p&gt;③ &lt;strong&gt;系统的处理能力&lt;/strong&gt;。必须保证系统支持的基本命令能在一个时间片内执行完。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间片轮转调度算法的性能评价&lt;/p&gt;
&lt;p&gt;时间片轮转调度算法的性能&lt;strong&gt;依赖于时间片的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;时间片很大，与先来先服务算法一样。&lt;/p&gt;
&lt;p&gt;时间片很小，会增加 CPU 用于进程切换和进程调度的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;326-多级队列调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#326-多级队列调度&#34;&gt;#&lt;/a&gt; 3.2.6 多级队列调度&lt;/h4&gt;
&lt;p&gt;​	通常根据&lt;strong&gt;不同进程对响应时间要求的不同&lt;/strong&gt;，采用&lt;strong&gt;多级队列调度算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	多级队列调度算法，根据&lt;strong&gt;进程占用内存的大小、优先权或进程类型&lt;/strong&gt;，将就绪队列分成多个独立队列，&lt;strong&gt;进程被永久地分配到一个队列，每个队列有自己的调度算法&lt;/strong&gt;。&lt;strong&gt;降低了进程调度的开销&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;327多级反馈队列调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#327多级反馈队列调度&#34;&gt;#&lt;/a&gt; 3.2.7 多级反馈队列调度&lt;/h4&gt;
&lt;p&gt;​	采用多级队列调度，对低优先权进程会存在无穷阻塞 (饥饿) 的问题。&lt;/p&gt;
&lt;p&gt;​	多级反馈队列调度算法可以弥补这些不足。在采用多级反馈队列调度的系统中建立多个优先权不同的就绪队列，为每个队列赋予大小不同的时间片。&lt;/p&gt;
&lt;p&gt;​	有一种&lt;strong&gt;反馈策略规定&lt;/strong&gt;：队列优先权越高，时间片越短。新进程被创建后，先插入预先权最高的队列。仅当高优先权队列空时，才调度优先权次之的队列。同一队列中， 采用时间片轮转调度算法。使用 CPU 时间过多的进程会被移到优先权较低的队列中，在较低优先权队列中等待时间过长的进程会被移到较高优先权队列中。&lt;/p&gt;
&lt;p&gt;​	多级反馈队列调度算法的设计要考虑以下几个方面的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;就绪队列的数量。&lt;/li&gt;
&lt;li&gt;根据进程优先权确定进程应该进入哪个就绪队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程何时转移到较高优先权队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程何时转移到较低优先权队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程在需要服务时应该进入哪个队列的算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-实时系统中的调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33-实时系统中的调度&#34;&gt;#&lt;/a&gt; 3.3 实时系统中的调度&lt;/h3&gt;
&lt;h4 id=&#34;331-实现实时调度的基本条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#331-实现实时调度的基本条件&#34;&gt;#&lt;/a&gt; 3.3.1 实现实时调度的基本条件&lt;/h4&gt;
&lt;p&gt;​	为了满足实时系统对截止时间的要求，实现实时调度应具备下列几个条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提供必要的调度信息&lt;/strong&gt;&lt;br&gt;
① 就绪时间&lt;br&gt;
② 开始截止时间和完成截止时间&lt;br&gt;
③ 处理时间&lt;br&gt;
④ 资源要求&lt;br&gt;
⑤优先级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统处理能力强&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（具体没啥用，随便看看）&lt;/p&gt;
&lt;p&gt;​	在实时系统中，通常有多个实时进程，若处理机的处理能力不够强，处理速度不够快，若使某些实时进程不能得到及时处理，可能发生难以预料的后果。&lt;/p&gt;
&lt;p&gt;​	可通过提高处理机的处理能力或增加处理机的数量以提高系统的处理能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采用抢占式调度机制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于时钟中断的抢占式优先权调度算法&lt;/strong&gt;&lt;br&gt;
若高优先权大于正在执行的进程，就等当前进程到时钟中断的时候抢占&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;立即抢占的优先权调度算法&lt;/strong&gt;&lt;br&gt;
一旦接收到就给当前执行的进程一个中断信号，然后抢占&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有快速切换机制&lt;br&gt;
就是需要进程&lt;strong&gt;对外部中断做出快速响应&lt;/strong&gt;和&lt;strong&gt;快速的进程切换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-常用的实时调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#332-常用的实时调度算法&#34;&gt;#&lt;/a&gt; 3.3.2 常用的实时调度算法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最早截止时间优先 EDF 算法&lt;/p&gt;
&lt;p&gt;根据进程的开始截止时间确定进程的优先级，&lt;strong&gt;截止时间越早，进程的优先级越高&lt;/strong&gt;，越优先获得处理机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最低松弛度优先 LLF 算法&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;松弛度用来表示个实时进程的紧迫程度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	如果一个进程的完成截止时间为 T ，当前时间为 Tc 处理完该任务还需要的时间为 Ts，则松弛度 L 的计算式表示为: L=T-Tc-Ts&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;调度时，每次选择松弛度最小的进程&lt;/strong&gt;。该算法按松弛度排序，&lt;strong&gt;让松弛度最小的进程排在就绪队列队首&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-进程切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34-进程切换&#34;&gt;#&lt;/a&gt; 3.4 进程切换&lt;/h3&gt;
&lt;p&gt;​	含义：&lt;strong&gt;用新选择的进程替换原来的进行进程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程切换包括的步骤如下:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;保存 CPU 上下文环境。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新进程控制块。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改进程状态，把执行态改为就绪态或者阻塞态。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将被替换进程的进程控制块移到就绪队列或阻塞队列。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行新进程，并更新改进程的进程控制块。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新内存管理的数据结构。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恢复上下文。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-多处理器调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#35-多处理器调度&#34;&gt;#&lt;/a&gt; 3.5 多处理器调度&lt;/h3&gt;
&lt;h4 id=&#34;351-多处理器系统的类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#351-多处理器系统的类型&#34;&gt;#&lt;/a&gt; 3.5.1 多处理器系统的类型&lt;/h4&gt;
&lt;p&gt;根据处理器的耦合程度，分为紧密耦合和松弛耦合；根据处理器的结构，分为对称和非对称。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;紧密耦合和松弛耦合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;紧密耦合&lt;/li&gt;
&lt;li&gt;松弛耦合&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对称和非对称&lt;/p&gt;
&lt;p&gt;对称属于同构，非对称在功能和结构上各不相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;352-多处理器系统中的进程分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#352-多处理器系统中的进程分配方式&#34;&gt;#&lt;/a&gt; 3.5.2 多处理器系统中的进程分配方式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对称多处理器系统中的进程分配方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态分配&lt;/p&gt;
&lt;p&gt;操作系统为每个处理器建立 - 个专门的就绪队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态分配&lt;/p&gt;
&lt;p&gt;每个进程经过多次调度，每次获得的不一定是同一个处理器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称多处理器系统 (MPS) 中的进程分配方式&lt;/p&gt;
&lt;p&gt;采&lt;strong&gt;用主一从式&lt;/strong&gt;操作系统，操作系统的核心部分驻留在一台主机上，而从机上只运行用户程序，只有主机 执行调度程序，所有从机的进程都是由主机分配的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;353-进程线程调度方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#353-进程线程调度方式&#34;&gt;#&lt;/a&gt; 3.5.3 进程（线程）调度方式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自调度&lt;/p&gt;
&lt;p&gt;采用自调度的系统中设置&lt;strong&gt;有个公共的就绪队列，任何一个空闲的处理器都可以自行从该就绪队列中选取一个进程或者一个线程运行&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;➢ 易移植&lt;/p&gt;
&lt;p&gt;➢ 有利于提高 CPU 的利用率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;p&gt;➢ 瓶颈问题，容易产生并发问题&lt;/p&gt;
&lt;p&gt;➢ 低效性，高速缓冲的命中率较低&lt;/p&gt;
&lt;p&gt;➢ 线程切换频繁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成组调度&lt;/p&gt;
&lt;p&gt;系统&lt;strong&gt;将一组相互合作的进程或线程同时分配到一组处理器上运行，进程或线程与处理器对应&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点:&lt;br&gt;
➢ 减少线程切换，改善系统性能。&lt;br&gt;
➢ 减少调度开销。一次调度一组，减少调度频率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;36-死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#36-死锁&#34;&gt;#&lt;/a&gt; 3.6 死锁&lt;/h3&gt;
&lt;h4 id=&#34;361-产生死锁的原因和必要条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#361-产生死锁的原因和必要条件&#34;&gt;#&lt;/a&gt; 3.6.1 产生死锁的原因和必要条件&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;当多个进程可能竞争数量有限的资源。若一个进程所申请的资源被其他处于阻塞状态的进程占有，该进程就会因为不能获得所申请的资源而被阻塞。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这种由于多个进程竞争共享资源而引起的&lt;strong&gt;进程不能向前推进的僵持状态&lt;/strong&gt;称为&lt;strong&gt;死锁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;产生死锁的原因&lt;/strong&gt;：竞争共享资源且分配资源的顺序不当。&lt;/p&gt;
&lt;p&gt;产生死锁的必要条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;互斥条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指一个进程在访问资源的过程中，其他进程不能访问该资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求和保持条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程已经保持了至少一个资源，又提出了新的资源要求且已经被其他进程占有，此时进程阻塞，但又对已经获得的资源保持不放，使得其他进程无法使用被保持的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不剥夺条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程已经获得的资源不能被剥夺，只能由进程自己释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;环路等待条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在发生死锁时，必然存在一个进程申请资源的环形链。&lt;/p&gt;
&lt;p&gt;注意：只有上述 4 个条件同时满足时才会发生死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;362-处理死锁的基本方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#362-处理死锁的基本方法&#34;&gt;#&lt;/a&gt; 3.6.2 处理死锁的基本方法&lt;/h4&gt;
&lt;p&gt;处理死锁的基本方法有&lt;strong&gt;预防死锁、避免死锁、检测并解除死锁和忽略死锁&lt;/strong&gt;问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;死锁的预防&lt;/p&gt;
&lt;p&gt;通过保证至少其中一个条件不成立来达到预防发生死锁的目的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃请求和保持条件&lt;/strong&gt;&lt;br&gt;
所有进程执行前要一次性地申请在整个运行过程中所需要的全部资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃不剥夺条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个已保持了某些资源的进程，当它再提出新的资源要求而不能立即得到满足时，必须释放它已经保持的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃环路等待条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程必须按规定的顺序申请资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁的避免&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;避免死锁的方法是把系统的资源分配状态分为安全状态和不安全状态&lt;/strong&gt;，只要资源分配使系统资源分配状态处于安全状态，死锁就不会发生。&lt;/p&gt;
&lt;p&gt;​	在避免死锁的方法中，允许进程动态地电请资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;363-银行家算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#363-银行家算法&#34;&gt;#&lt;/a&gt; 3.6.3 银行家算法&lt;/h4&gt;
&lt;p&gt;​	1965 年 Dijkstra (迪杰斯特拉) 提出了种能够避免死锁的资源分配算法。&lt;/p&gt;
&lt;p&gt;​	其基本思想是&lt;strong&gt;一个进程提出资源请求后，系统先进行资源的试分配。然后检测本次的试分配是否使系统处于安全状态，若安全则按试分配方案分配资源，否则不分配资源&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	银行家算法的由来是银行家贷款给客户这一问题。银行家(操作系统)把一定数量的资金(资源)供多个用户(进程)周转使用。当顾客对资金的最大申请量不超过银行家现金时就可接纳一个新顾客。银行可以对顾客的借款推迟支付，但一定使顾客总能在有限的时间内得到借款;当顾客得到全部资金后，他一定能在有限的时间里归还(回收)所有资金(资源)。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;银行家算法分为两个过程:&lt;br&gt;
 一是进行资源试分配的过程；&lt;br&gt;
 二是对试分配后系统的状态做安全性检测的过程。&lt;/p&gt;
&lt;h4 id=&#34;364-死锁的检测和解除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#364-死锁的检测和解除&#34;&gt;#&lt;/a&gt; 3.6.4 死锁的检测和解除&lt;/h4&gt;
&lt;p&gt;何时调用检测算法？&lt;/p&gt;
&lt;p&gt;​	➢ 死锁可能发生的频率&lt;/p&gt;
&lt;p&gt;​	➢ 当死锁发生时受影响的进程数量&lt;/p&gt;
&lt;p&gt;死锁定理&lt;/p&gt;
&lt;p&gt;​	➢ 死锁状态的充分条件是当且仅当资源分配状态是不可完全简化的。&lt;/p&gt;
&lt;p&gt;死锁的解除&lt;/p&gt;
&lt;p&gt;​	➢ 终止处于死锁状态的进程&lt;/p&gt;
&lt;p&gt;​	➢ 抢占死锁进程占有的资源&lt;/p&gt;
&lt;p&gt;单选题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;某系统中有n (n为大于1的整数)个并发进程，每个进程需要同类资源m个(m为大于0的整数), 请问该系统不会发生死锁的最少资源数是( C )。

A. n+m
B.n*m
C.n*(m-1)+1
D.以上都对

[解析]
例如,若某系统中有4个并发进程,每个进程需要同类资源3个,则只要分配4*(3-1)+ 1共9个资源,该系统就不会发生死锁。每个进程都申请到两个资源后,还有1个资源,无论哪个进程获得这个资源都可以继续向前推进,当获得这个资源的进程执行完后,可以释放3个资源再分配给其他3个进程,因此不会发生死锁。
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第四章内存管理重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四章内存管理重点&#34;&gt;#&lt;/a&gt; 第四章：内存管理（重点）&lt;/h2&gt;
&lt;h3 id=&#34;考试重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试重点&#34;&gt;#&lt;/a&gt; 考试重点&lt;/h3&gt;
&lt;p&gt;​	➢ 存储器的层次结构 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 程序的链接和装入 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 连续分配存储管理、动态分区分配算法 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 分页、快表、两级页表 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 虚拟存储、缺页、页分配策略 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 页置换算法 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 分段系统、段表、段页式存储管理 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本章近 3 年分值: 19~22 分&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;41-存储器的层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41-存储器的层次结构&#34;&gt;#&lt;/a&gt; 4.1 存储器的层次结构&lt;/h3&gt;
&lt;p&gt;​	内存是计算机存储系统的一部分，为了更好地理解后续章节内容，先了解存储器系统的层次结构。存储器系统是一个具有不同容量、成本和访问时间的存储设备的层次结构。&lt;/p&gt;
&lt;p&gt;在这个层次系统中，从高层到底层 (L0~L5)，较低层的存储设备速度更慢、容量更大、价格更便宜。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081201.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081201.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果存储在高速缓存中，需要 1~ 10 个周期。&lt;/p&gt;
&lt;p&gt;如果存放在主存中，访问它们需要 50~ 100 个周期。&lt;/p&gt;
&lt;p&gt;如果存放在磁盘中，访问它们需要大约 2000 万个周期。&lt;/p&gt;
&lt;p&gt;​	➢ 程序的执行遵循&lt;strong&gt;局部性&lt;/strong&gt;原理。&lt;/p&gt;
&lt;p&gt;​	程序在执行时呈现出局部性规律，即在一段较短的时间内，程序的执行仅局限于某个部分，相应地，它所访问的存储空间也局限于某个区域。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序执行时，除了少部分的转移和过程调用指令，&lt;strong&gt; 大多数情况下是顺序执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程调用&lt;/strong&gt;将会使程序的执行轨迹由一部分内存区域转移到另一部分内存区域&lt;/li&gt;
&lt;li&gt;程序中存在很多&lt;strong&gt;循环&lt;/strong&gt;结构，它们虽然由少数指令构成但&lt;strong&gt;多次执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;程序中往往包括许多对数据结构的处理，如对数组操作，它们往往&lt;strong&gt;局限在很小的范围内&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;➢ 总的来说，&lt;strong&gt; 局部性&lt;/strong&gt;原理&lt;strong&gt;表现为时间和空间的局部性&lt;/strong&gt;&lt;br&gt;
➢ 时间局部性。如果程序中的某条指令一旦执行则不久后该指令可能再次执行。&lt;br&gt;
➢ 空间局部性。一旦程序访问了某个单元，不久后其附近的存储单元也将被访问&lt;/p&gt;
&lt;h3 id=&#34;42-程序的链接和装入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42-程序的链接和装入&#34;&gt;#&lt;/a&gt; 4.2 程序的链接和装入&lt;/h3&gt;
&lt;p&gt;高级语言程序必须经过编译、链接才能成为可执行程序。操作系统需要为程序的执行分配内存空间。下面介绍链接程序的功能和程序被装入内存的几种方式。&lt;/p&gt;
&lt;h4 id=&#34;421-程序的链接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#421-程序的链接&#34;&gt;#&lt;/a&gt; 4.2.1 程序的链接&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;链接程序&lt;/strong&gt;要解决的问题是&lt;strong&gt;将编译后的目标模块装配成一个可执行的程序&lt;/strong&gt;。根据链接进行的时间和实现方式的不同，可以把链接分为静态链接和动态链接。&lt;br&gt;
➢ &lt;strong&gt;静态链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在程序运行前，用链接程序将目标模块链接成一个完整的装入模块。运行速度快，占用大&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;动态链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	将部分目标模块链接推迟到其中函数被调用执行。采用动态链接节省空间，方便开发，速度慢&lt;/p&gt;
&lt;h4 id=&#34;422-程序的装入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#422-程序的装入&#34;&gt;#&lt;/a&gt; 4.2.2 程序的装入&lt;/h4&gt;
&lt;p&gt;​	将源程序变为可执行程序须经过&lt;strong&gt;编译、链接和装入&lt;/strong&gt; 3 个阶段。&lt;/p&gt;
&lt;p&gt;​	可执行程序以&lt;strong&gt;二进制可执行文件&lt;/strong&gt;的形式存储在磁盘上，为执行程序，操作系统需要把程序调入内存。程序装入内存的方式分为&lt;strong&gt;绝对装入、可重定位装入 (静态重定位) 和动态运行时装入&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;绝对装入方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译程序事先已知程序在内存中的驻留位置，编译时产生物理地址的目标代码。因此装入模块被装入内存后，无需对程序和数据的地址进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可重定位装入方式&lt;/strong&gt; (静态重定位)&lt;/p&gt;
&lt;p&gt;​	如果&lt;strong&gt;编译时不知道&lt;/strong&gt;目标程序将驻留在内存的什么位置，则编译时就必须生成可重定位的代码，其中的地址都是&lt;strong&gt;逻辑地址&lt;/strong&gt;（相对地址）, 在程序被装入内存时，再把这些逻辑地址映射为物理地址&lt;/p&gt;
&lt;p&gt;​	在程序装入时对目标程序中的指令和数据地址的修改过程称为&lt;strong&gt;重定位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081202.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081202.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态运行时装入&lt;/strong&gt; (动态重定位)&lt;/p&gt;
&lt;p&gt;​	一个进程在被换出之前所在的内存位置与后来被从外存重新调入时内存位置不同，这种装入方式称为&lt;strong&gt;动态运行时装入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081203.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081203.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;43-连续分配存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43-连续分配存储管理方式&#34;&gt;#&lt;/a&gt; 4.3 连续分配存储管理方式&lt;/h3&gt;
&lt;p&gt;连续分配是指操作系统分配内存时，为每个进程分配块物理地址连续的内存空间，连续分配方式有 3 种类型。&lt;/p&gt;
&lt;p&gt;➢ 单一连续区分配方式&lt;br&gt;
➢ 固定分区分配方式&lt;br&gt;
➢ 动态分区分配方式&lt;/p&gt;
&lt;h4 id=&#34;431-单一连续区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#431-单一连续区分配方式&#34;&gt;#&lt;/a&gt; 4.3.1 单一连续区分配方式&lt;/h4&gt;
&lt;p&gt;​	适用于单用户、单任务的操作系统，把内存分为&lt;strong&gt;系统区和用户区&lt;/strong&gt;。系统区用于驻留操作系统，用户区用于分配给用户进程使用。&lt;/p&gt;
&lt;p&gt;​	在单用户、单任务操作系统中较常用的方法是设置&lt;strong&gt;一个基址寄存器和一个界限寄存器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;基址寄存器&lt;/strong&gt;中&lt;strong&gt;存放程序在物理内存中的最小地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;界限寄存器&lt;/strong&gt;中&lt;strong&gt;存放装入用户区程序的地址范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在 CPU 访问内存时，检查 CPU 要访问的内存单元的地址是否大于界限寄存器的值，如果大于，则是非法地址，表示用户进程访存越界，程序执行会被中断。&lt;/p&gt;
&lt;h4 id=&#34;432-固定分区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#432-固定分区分配方式&#34;&gt;#&lt;/a&gt; 4.3.2 固定分区分配方式&lt;/h4&gt;
&lt;p&gt;​	将内存用户区划分成若干个固定大小的区域，每个用户区中驻留一道程序。当有一个空闲分区时，可从外存的后备队列中选择一个大小适当的作业装 入该分区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;划分分区的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分区大小相等&lt;/p&gt;
&lt;p&gt;把用户区划分成大小相等的若干个分区。&lt;/p&gt;
&lt;p&gt;缺点是内存利用率比较低。程序太小浪费空间，程序太大装不下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分区大小不相等&lt;/p&gt;
&lt;p&gt;先划分多个大小不同、数量固定的若干个分区。分配的时候看哪个更接近就分配哪个。减少了浪费。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081204.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081204.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;433-动态分区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#433-动态分区分配方式&#34;&gt;#&lt;/a&gt; 4.3.3 动态分区分配方式&lt;/h4&gt;
&lt;p&gt;​	系统初始只有一个大空闲区，根据进程需要的空间大小分配内存。内存中&lt;strong&gt;分区的大小和数量是变化的&lt;/strong&gt;。动态分区方式比固定分区方式&lt;strong&gt;显著地提高了内存利用率&lt;/strong&gt;。系统维护一个记录当前空闲分区情况的数据结构，&lt;strong&gt;当进程请求内存时，系统从所有空闲区中找到大小合适的空闲分区进行分配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	常用的数据结构有&lt;strong&gt;空闲分区表&lt;/strong&gt;和&lt;strong&gt;空闲分区链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;空闲分区表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081205.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081205.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	缺点：设置太多表项会浪费内存空间；设置太少无法记录所有空闲分区情况&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;空闲分区链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	可以&lt;strong&gt;动态地为每一个空闲分区建立一 个结点&lt;/strong&gt;，每个结点包括分区大小、分区起始地址、指向前一个空闲分区结点的指针，以及指向后一个空闲分区结点的指针。空闲分区链中的&lt;strong&gt;每个结点占用的内存可以动态分配动态回收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;动态分区分配算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当进程需要内存空间时，操作系统通过执行动态分区分配算法从多个空闲分区中选定一个合适的分区分配给进程。&lt;/p&gt;
&lt;p&gt;​	内存分配功能由内存分配程序完成。内存不再需要时，由系统调用内存回收程序回收原来被占的内存。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首次适应算法 FF (First Fit)&lt;/p&gt;
&lt;p&gt;​	要求空闲分区链以&lt;strong&gt;地址递增&lt;/strong&gt;的顺序链接。在内存分配时，从链首开始顺序查找，直至找到一个能满足进程大小要求的空闲分区为止。余下的空闲分区仍留在空闲链中。&lt;/p&gt;
&lt;p&gt;​	该算法先分配低地址部分的内存空间，容易使低地址部分留下小分区，而高地址部分大空闲区较多。当进程请求大空间时，要找到合适的空闲分区，&lt;strong&gt; 时间开销大&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环首次适应算法 NF (Next Fit)&lt;/p&gt;
&lt;p&gt;​	为进程分配内存空间时，&lt;strong&gt; 从上次找到的空闲分区的下一个空闲分区开始查找直到找到第个能满足要求的空闲分区&lt;/strong&gt;，并从中划出一块与请求的大小相等的内存空间分配给进程。&lt;/p&gt;
&lt;p&gt;​	为实现该算法，应设置一个起始查找指针，以指示下一次起始查找的空闲分区，并采用&lt;strong&gt;循环查找方式&lt;/strong&gt;。循环首次适应算法的优点是:&lt;strong&gt; 空闲区分布均匀，查找开销较小。缺点是容易使系统缺乏大空闲区&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最佳适应算法 BF (Best Fit)&lt;/p&gt;
&lt;p&gt;​	该算法每次分配内存，把大小与进程所请求的&lt;strong&gt;内存大小最接近分配给进程&lt;/strong&gt;。该算法要求将所有的空闲区按分区大小递增顺序形成一个空闲区链。&lt;/p&gt;
&lt;p&gt;​	优点：避免大材小用，提高内存利用率，但容易留下难以利用的小空闲区&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;外部碎片 / 外碎片：低地址部分的空闲分区反复被划分，可能留下许多很小的空闲分区&lt;br&gt;
内部碎片 / 内碎片：分配给进程的分区若大于进程请求的分区，分区内会有部分未利用的空间&lt;/p&gt;
&lt;h3 id=&#34;44-基本本页存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#44-基本本页存储管理方式&#34;&gt;#&lt;/a&gt; 4.4 基本本页存储管理方式&lt;/h3&gt;
&lt;p&gt;➢ &lt;strong&gt;离散内存管理方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		把进程&lt;strong&gt;离散地&lt;/strong&gt;存储在内存中物理地址不连续的区域中&lt;/p&gt;
&lt;p&gt;​	根据离散内存管理分配内存空间的基本单位不同，分为 3 种管理方式:&lt;strong&gt; 分页存储管理、分段存储管理和段页式存储管理&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;441-分页存储管理的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#441-分页存储管理的基本概念&#34;&gt;#&lt;/a&gt; 4.4.1 分页存储管理的基本概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基础概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;页（Page）：将一个进程的&lt;strong&gt;逻辑地址空间&lt;/strong&gt;分成多个大小相同的片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页框 / 页帧：将&lt;strong&gt;物理内存空间&lt;/strong&gt;分成与页大小相同的多个存储块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页存储：为进程分配内存时，&lt;strong&gt;以页框为单位&lt;/strong&gt;将进程的若干个页&lt;strong&gt;装入多个不相邻的页框中&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页内碎片：进程的最后一页装不满一个页框时，剩下的碎片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页表：&lt;strong&gt;系统为进程建立的数据结构，实现从页号到页框号的映射&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081206.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081206.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;45-基于分页的虚拟存储系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#45-基于分页的虚拟存储系统&#34;&gt;#&lt;/a&gt; 4.5 基于分页的虚拟存储系统&lt;/h3&gt;
&lt;h3 id=&#34;46-分段存储管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#46-分段存储管理&#34;&gt;#&lt;/a&gt; 4.6 分段存储管理&lt;/h3&gt;
&lt;h3 id=&#34;47-linux的伙伴系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#47-linux的伙伴系统&#34;&gt;#&lt;/a&gt; 4.7 Linux 的伙伴系统&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第五章文件管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五章文件管理&#34;&gt;#&lt;/a&gt; 第五章：文件管理&lt;/h2&gt;
&lt;h3 id=&#34;51-文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51-文件&#34;&gt;#&lt;/a&gt; 5.1 文件&lt;/h3&gt;
&lt;h3 id=&#34;52-目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52-目录&#34;&gt;#&lt;/a&gt; 5.2 目录&lt;/h3&gt;
&lt;h3 id=&#34;53-文件系统的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#53-文件系统的实现&#34;&gt;#&lt;/a&gt; 5.3 文件系统的实现&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第六章设备管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六章设备管理&#34;&gt;#&lt;/a&gt; 第六章：设备管理&lt;/h2&gt;
&lt;h3 id=&#34;61-io系统的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61-io系统的组成&#34;&gt;#&lt;/a&gt; 6.1 I/O 系统的组成&lt;/h3&gt;
&lt;h3 id=&#34;62-io控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#62-io控制方式&#34;&gt;#&lt;/a&gt; 6.2 I/O 控制方式&lt;/h3&gt;
&lt;h3 id=&#34;63-缓冲管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#63-缓冲管理&#34;&gt;#&lt;/a&gt; 6.3 缓冲管理&lt;/h3&gt;
&lt;h3 id=&#34;64-设备分配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64-设备分配&#34;&gt;#&lt;/a&gt; 6.4 设备分配&lt;/h3&gt;
&lt;h3 id=&#34;65-io软件原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#65-io软件原理&#34;&gt;#&lt;/a&gt; 6.5 I/O 软件原理&lt;/h3&gt;
&lt;h3 id=&#34;66-磁盘管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#66-磁盘管理&#34;&gt;#&lt;/a&gt; 6.6 磁盘管理&lt;/h3&gt;
 ]]></description>
        </item>
    </channel>
</rss>
