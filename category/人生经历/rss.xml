<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>失心耀的博客 • Posts by &#34;人生经历&#34; category</title>
        <link>https://xinyao_idiot.gitee.io/zxy</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 11 Aug 2021 18:27:00 +0800</pubDate>
        <lastBuildDate>Wed, 11 Aug 2021 18:27:00 +0800</lastBuildDate>
        <category>ElasticSearch</category>
        <category>Hexo</category>
        <category>Java</category>
        <category>SpringCloud</category>
        <category>Springboot</category>
        <category>驾照</category>
        <category>Git</category>
        <category>Nginx</category>
        <category>数据库系统原理</category>
        <category>linux</category>
        <category>RabbitMQ</category>
        <category>SpringBoot</category>
        <category>Redis</category>
        <category>操作系统概论</category>
        <item>
            <guid isPermalink="true">https://xinyao_idiot.gitee.io/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</guid>
            <title>操作系统概论</title>
            <link>https://xinyao_idiot.gitee.io/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</link>
            <category>操作系统概论</category>
            <pubDate>Wed, 11 Aug 2021 18:27:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;操作系统概论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#操作系统概论&#34;&gt;#&lt;/a&gt; 操作系统概论&lt;/h1&gt;
&lt;h2 id=&#34;考试题型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试题型&#34;&gt;#&lt;/a&gt; 考试题型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;题型&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;分支&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;单选&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 分 * 20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;填空&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 分 * 10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;简答&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 分 * 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20 分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;综合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10 分 * 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;40 分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第一章操作系统简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一章操作系统简介&#34;&gt;#&lt;/a&gt; 第一章：操作系统简介&lt;/h2&gt;
&lt;h3 id=&#34;11-什么是操作系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-什么是操作系统&#34;&gt;#&lt;/a&gt; 1.1 什么是操作系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;操作系统的定义&lt;/p&gt;
&lt;p&gt;操作系统（Operating System，OS）是一种复杂的&lt;strong&gt;系统软件&lt;/strong&gt;，是不同于&lt;strong&gt;程序代码&lt;/strong&gt;、&lt;strong&gt;数据结构&lt;/strong&gt;、&lt;strong&gt;数据初始化文件的集合&lt;/strong&gt;，可执行。（选择、填空、简答）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户与硬件之间&lt;/strong&gt;的接口&lt;/p&gt;
&lt;p&gt;操作系统与&lt;strong&gt;硬件部分相互作用&lt;/strong&gt;，比并且为运行在计算机上的&lt;strong&gt;应用程序提供执行环境&lt;/strong&gt;。（选择、填空）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;资源的管理者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理机管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：决定把处理机先给哪个程序用，后给哪个程序用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：给程序分配内存空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设备管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：完成证明分配设备，分配哪台设备，怎么和设备连接等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文件管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义：为每个文件分配空间、建立目录、对目录进行组织管理以及根据用户请求从外存（硬盘）读取数据或将数据写入外存（硬盘）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12-操作系统的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-操作系统的发展&#34;&gt;#&lt;/a&gt; 1.2 操作系统的发展&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发展历程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单道 批处理系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：单道批处理系统&lt;strong&gt;内存中只有一道作业&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;自动性、顺序性、单道性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;li&gt;优点：减少了等待人工操作的时间&lt;/li&gt;
&lt;li&gt;缺点：CPU 资源不能得到充分的利用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080901.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080901.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;多道 批处理系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：由操作系统的&lt;strong&gt;作业调度程序按一定策略&lt;/strong&gt;从后备作业队列中&lt;strong&gt;选择若干个作业调入内存&lt;/strong&gt;，使他们共享 CPU 和系统中的各种资源&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多道性、无序性、调度性、复杂性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;li&gt;优点：能够提高 CPU、内存和 IO 设备的利用率和系统的吞吐量（选择、简答）&lt;/li&gt;
&lt;li&gt;缺点：系统平均周转时间长（选择、简答）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080902.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080902.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分时 操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：允许&lt;strong&gt;多个用户&lt;/strong&gt;通过终端机&lt;strong&gt;同时使用&lt;/strong&gt;计算机，每个用户通过终端与主机交互时都能得到快速响应。&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多路性、独立性、及时性、交互性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080903.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080903.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实时 操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义：实时系统必须&lt;strong&gt;及时响应&lt;/strong&gt;外部时间的请求，在规定时间内完成对该事件的处理。主要用于&lt;strong&gt;实时控制&lt;/strong&gt;和&lt;strong&gt;实时信息处理&lt;/strong&gt;领域。（选择、填空）&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;多路性、独立性、及时性、交互性、可靠性&lt;/strong&gt;（选择、填空）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080904.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080904.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统产品现状（可略）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作系统&lt;/th&gt;
&lt;th&gt;运行主体&lt;/th&gt;
&lt;th&gt;实例（了解即可）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;主机&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;大型主机&lt;/td&gt;
&lt;td&gt;IBM 的 OS / 360、OS / 390&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;服务器&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;网络服务器&lt;/td&gt;
&lt;td&gt;Linux、Windows Server&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;微机&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;微型计算机&lt;/td&gt;
&lt;td&gt;Windows7、Mac OS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;嵌入式&lt;/strong&gt;操作系统&lt;/td&gt;
&lt;td&gt;嵌入式设备&lt;/td&gt;
&lt;td&gt;Android、iOS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;13-操作系统特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-操作系统特征&#34;&gt;#&lt;/a&gt; 1.3 操作系统特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;现在操作系统都支持&lt;strong&gt;多任务&lt;/strong&gt;，具有&lt;strong&gt;并发&lt;/strong&gt;、&lt;strong&gt;共享&lt;/strong&gt;、&lt;strong&gt;虚拟&lt;/strong&gt;和&lt;strong&gt;异步性&lt;/strong&gt;特征。
&lt;ul&gt;
&lt;li&gt;并发：两个或多个事件在&lt;strong&gt;同一时间间隔&lt;/strong&gt;内发生&lt;/li&gt;
&lt;li&gt;共享：系统中的&lt;strong&gt;资源&lt;/strong&gt;可供内存中多个并发执行的&lt;strong&gt;进程共同使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;虚拟：最常用&lt;strong&gt;内存虚拟化&lt;/strong&gt;，用户感觉到的内存大于实际内存。&lt;/li&gt;
&lt;li&gt;异步性：进程以&lt;strong&gt;不可预知的速度&lt;/strong&gt;向前推进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-操作系统的功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-操作系统的功能&#34;&gt;#&lt;/a&gt; 1.4 操作系统的功能&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;管理计算机资源&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;内存管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;含义：&lt;/p&gt;
&lt;p&gt;内存管理的主要任务是为&lt;strong&gt;多道程序的运行提供良好的环境&lt;/strong&gt;，方便用户&lt;strong&gt;使用内存&lt;/strong&gt;，提高内存的利用率，以及从&lt;strong&gt;逻辑上扩充内存&lt;/strong&gt;以实现&lt;strong&gt;虚拟存储&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;内存分配&lt;/p&gt;
&lt;p&gt;主要任务是&lt;strong&gt;为每道程序分配内存空间&lt;/strong&gt;，可采用两种分配方式，即&lt;strong&gt;静态分配方式&lt;/strong&gt;和&lt;strong&gt;动态分配方式&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态分配方式
&lt;ul&gt;
&lt;li&gt;先把内存划分先把内存划分定的区域&lt;/li&gt;
&lt;li&gt;大小数量不再变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态分配方式
&lt;ul&gt;
&lt;li&gt;根据进程实际，请求分配内存&lt;/li&gt;
&lt;li&gt;大小数量动态变化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存保护&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主要任务：&lt;/p&gt;
&lt;p&gt;一是使操作系统&lt;strong&gt;内核的空间&lt;/strong&gt;不会被用户随意访问，以保证系统的安全和稳定；&lt;/p&gt;
&lt;p&gt;二是确保&lt;strong&gt;每道用户程序&lt;/strong&gt;都在&lt;strong&gt;自己的内存空间&lt;/strong&gt;中运行，互不干扰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存保护的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采用界限寄存器存放允许程序访问的地址区间的上限和下限。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080905.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080905.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址映射&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;含义：&lt;strong&gt;CPU 执行程序过程中访问内存时，需要把&lt;/strong&gt;程序的逻辑地址转变为物理地址&lt;/strong&gt;，这个转换过程称为&lt;strong&gt;地址映射&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080906.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080906.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存扩充&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;含义：&lt;strong&gt;借助于&lt;/strong&gt;虚拟技术&lt;/strong&gt;，从&lt;strong&gt;逻辑&lt;/strong&gt;上扩充内存容量，使系统能够向用户提供比物理内存大的存储容量。&lt;/p&gt;
&lt;p&gt;➢&lt;strong&gt;请求调入：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;允许系统在&lt;strong&gt;装入一部分用户程序&lt;/strong&gt;时就启动该程序运行，在程序运行过程中&lt;strong&gt;若发现要执行的指令或访问的数据尚未装入内存&lt;/strong&gt;，通过&lt;strong&gt;请求调入将需要指令或数据装入内存。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080907.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080907.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;➢&lt;strong&gt;置换功能：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在请求调入时，&lt;strong&gt;若发现内存空间不足&lt;/strong&gt;，需要&lt;strong&gt;先将内存中的一部分内容换到外存中&lt;/strong&gt;，以便&lt;strong&gt;腾出内存空间&lt;/strong&gt;装入当前需要的内容。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080908.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080908.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内容：进程的描述与组织、进程控制、进程同步、进程通信及进程调度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：设备管理主要完成用户的&lt;strong&gt; I/O 请求&lt;/strong&gt;，为用户&lt;strong&gt;分配 I/O 设备&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;功能：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;缓冲管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备分配&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备处理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备独立性和虚拟设备&lt;/strong&gt; (设备独立性功能使应用程序独&lt;br&gt;
立于物理设备)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;文件存储空间的管理&lt;/p&gt;
&lt;p&gt;为每个文件分配必要的&lt;strong&gt;外存空间&lt;/strong&gt;，&lt;strong&gt;提高外存利用率&lt;/strong&gt;，并能有助于&lt;strong&gt;提高访问文件的速度&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录管理&lt;/p&gt;
&lt;p&gt;为每个文件建立&lt;strong&gt;目录项&lt;/strong&gt;并对众多目录项进行有效组织。目录项包括文件名、文件属性及文件的地址等信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件的读、写管理和存取控制&lt;/p&gt;
&lt;p&gt;根据用户的请求，&lt;strong&gt;从外存中读取数据&lt;/strong&gt;或&lt;strong&gt;将数据写入外存&lt;/strong&gt;。防止未经审核的用户存取文件，防止冒名顶替存取文件，防止以不正确的方式使用文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供用户接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令接口
&lt;ul&gt;
&lt;li&gt;目的：为了便于用户与计算机系统的交互&lt;/li&gt;
&lt;li&gt;分类：联机用户接口和脱机用户接口&lt;/li&gt;
&lt;li&gt;联机：常命令接口由一组键盘操作命令和命令解释程序组成&lt;/li&gt;
&lt;li&gt;脱机：为批处理作业的用户提供，也称为批处理用户接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形用户接口
&lt;ul&gt;
&lt;li&gt;用户可以轻松地通过&lt;strong&gt;选择窗口、菜单、对话框、滚动条、图标等&lt;/strong&gt;简单的操作来完成对作业和任务的提交与控制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;程序接口
&lt;ul&gt;
&lt;li&gt;用户程序接口指的是&lt;strong&gt;应用程序&lt;/strong&gt;和系统的&lt;strong&gt;核心程序&lt;/strong&gt;的接口，就是&lt;strong&gt;系统调用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;系统调用是一组预先定义好的模块，它们提供&lt;strong&gt;一条管道&lt;/strong&gt;让应用程序或用户能由此得到&lt;strong&gt;核心程&lt;/strong&gt;序的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;15-操作系统的体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-操作系统的体系结构&#34;&gt;#&lt;/a&gt; 1.5 操作系统的体系结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;简单的监控程序模型
&lt;ul&gt;
&lt;li&gt;功能简陋，任意时刻系统中只能运行一个任务 ，保证了对系统信息的互斥访问，保护了系统数据的安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;单体结构模型一
&lt;ul&gt;
&lt;li&gt;所有的软件和数据结构都放置在 - 个逻辑模块中，对外层的用户程序提供一个完整的内核界面 —— 系统调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;层次结构模型
&lt;ul&gt;
&lt;li&gt;基本思想是将操作系统分解为多个小的，容易理解的层。系统功能被隔离在不同层中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客户 / 服务器模型与微内核结构
&lt;ul&gt;
&lt;li&gt;核心思想是核心功能外移，即把传统操作系统内核中的一些组成部分放到内核之外作为 - 个独立的服务器进程来实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态可扩展结构模型
&lt;ul&gt;
&lt;li&gt;基本思想就是在运行过程中，能够动态地实现系统行为扩展的结构，也可称之为弹性结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;16-指令的执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-指令的执行&#34;&gt;#&lt;/a&gt; 1.6 指令的执行&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;指令周期&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序是具有独立功能的一组指令的集合&lt;/strong&gt;，程序的执行就是按照某种控制流执行指令的过程。&lt;/li&gt;
&lt;li&gt;一个&lt;strong&gt;单一指令&lt;/strong&gt;需要的&lt;strong&gt;处理&lt;/strong&gt;称为&lt;strong&gt;指令周期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一个指令周期可以划分为两个步骤，分别是&lt;strong&gt;取指周期&lt;/strong&gt;和&lt;strong&gt;执行周期&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080909.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080909.png&#34; class=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;** 程序计数器 (PC)&lt;strong&gt; 保存有下一次要取的指令的地址。取到的指令被放置在处理器的&lt;/strong&gt;指令寄存器 (IR)** 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;取指令和执行指令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指令中包含确定处理器要采取动作的位，处理器解释指令并执行要求的动作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080910.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21080910.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;➢动作分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;处理器与存储器&lt;/strong&gt;之间的&lt;strong&gt;指令或数据传送&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理器与 I/O 设备&lt;/strong&gt;之间的&lt;strong&gt;指令或数据传送&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;算术运算&lt;/strong&gt;操作或&lt;strong&gt;逻辑运算&lt;/strong&gt;操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制&lt;/strong&gt;操作，即&lt;strong&gt;修改指令的执行顺序&lt;/strong&gt;的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二章进程管理重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二章进程管理重点&#34;&gt;#&lt;/a&gt; 第二章：进程管理（重点）&lt;/h2&gt;
&lt;h3 id=&#34;21-进程的描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#21-进程的描述&#34;&gt;#&lt;/a&gt; 2.1 进程的描述&lt;/h3&gt;
&lt;h4 id=&#34;211程序的顺序执行与并发执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#211程序的顺序执行与并发执行&#34;&gt;#&lt;/a&gt; 2.1.1 程序的顺序执行与并发执行&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;顺序执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：先进入内存的程序先执行，在一个程序执行完毕之前，不能执行其他程序&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;顺序性、封闭性、可再现性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并发执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;含义：程序并发执行是指&lt;strong&gt;同一时间间隔内&lt;/strong&gt;运行多个程序。一个程序执行结束前，可以运行其他程序&lt;/li&gt;
&lt;li&gt;特点：&lt;strong&gt;间断性、失去封闭性、不可再现性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;宏观并行&lt;/strong&gt;：用户看到多个程序同时向前推进&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微观串行&lt;/strong&gt;：任意时刻&lt;strong&gt;一个 CPU&lt;/strong&gt; 上只有&lt;strong&gt;一个程序&lt;/strong&gt;在执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;212进程的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#212进程的概念&#34;&gt;#&lt;/a&gt; 2.1.2 进程的概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进程是允许并发执行的&lt;strong&gt;程序&lt;/strong&gt;在某个数据集合上的&lt;strong&gt;运行过程&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程是由&lt;strong&gt;正文段、用户数据段及进程控制块&lt;/strong&gt;共同组成的执行环境&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;正文段&lt;/th&gt;
&lt;th&gt;存放被执行的机器指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;用户数据段&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;存放用户数据&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;进程控制块&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;存放进程的运行环境&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特征&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;并发性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;多个进程实体能在一 - 段时间间隔内同时运行&lt;br /&gt;&lt;strong&gt;并发性是进程和现代操作系统的重要特征&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程是实体的执行过程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;独立性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;独立运行和资源调度的基本单位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;异步性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程的执行时断时续 ，何时执行、何时暂停都无法预知&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;结构特征&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;进程实体包括用户&lt;strong&gt;正文段、 用户数据段&lt;/strong&gt;和&lt;strong&gt;进程控制块&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程与程序的比较：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;程序&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;静态&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;动态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;永久&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;暂时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指令集合&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;包括正文段、用户数据段、进程控制块&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程和程序的联系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程是程序的一次执行&lt;/li&gt;
&lt;li&gt;一个程序可以对应多个进程&lt;/li&gt;
&lt;li&gt;同一个程序可以在不同的数据集合上运行，构成不同的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;213-进程控制块pcb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#213-进程控制块pcb&#34;&gt;#&lt;/a&gt; 2.1.3 进程控制块（PCB）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;进程实体包括用户正文段、用户数据段和进程控制段&lt;/li&gt;
&lt;li&gt;含义：进程控制块是进程实体的一部分，是操作系统中最重要的数据结构。&lt;strong&gt;记录&lt;/strong&gt;了操作系统所需要的、用于&lt;strong&gt;描述进程&lt;/strong&gt;及&lt;strong&gt;控制进程&lt;/strong&gt;运行所需的&lt;strong&gt;全部信息&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;包含的信息
&lt;ol&gt;
&lt;li&gt;进程标识符信息：用于唯一标识一个进程&lt;/li&gt;
&lt;li&gt;处理机状态信息
&lt;ol&gt;
&lt;li&gt;通用寄存器&lt;/li&gt;
&lt;li&gt;指令计数器&lt;/li&gt;
&lt;li&gt;程序状态字 PSW&lt;/li&gt;
&lt;li&gt;用户栈指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;进程调度信息：包括进程状态信息、进程优先级和进程调度所需的其他信息&lt;/li&gt;
&lt;li&gt;进程控制信息：包括程序和数据的地址、进程同步和通信机制、资源清单、以及链接指针&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;214-进程的状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#214-进程的状态&#34;&gt;#&lt;/a&gt; 2.1.4 进程的状态&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;就绪态&lt;/li&gt;
&lt;li&gt;执行态&lt;/li&gt;
&lt;li&gt;阻塞态&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;215-进程的组织&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#215-进程的组织&#34;&gt;#&lt;/a&gt; 2.1.5 进程的组织&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;链接方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把系统中具有&lt;strong&gt;相同状态&lt;/strong&gt;的进程控制块 PCB 用其中的&lt;strong&gt;链接字&lt;/strong&gt;连成一个对联&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081101.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081101.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统根据所有进程的状态，建立索引表，索引表的每 - 一个表项指向一个 PCB 物理块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081102.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081102.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进程队列&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把具有相同状态的进程控制块用队列组织起来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081103.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081103.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-进程的控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22-进程的控制&#34;&gt;#&lt;/a&gt; 2.2 进程的控制&lt;/h3&gt;
&lt;h4 id=&#34;221-创建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#221-创建&#34;&gt;#&lt;/a&gt; 2.2.1 &lt;strong&gt;创建&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么情况下需要创建新进程呢？&lt;/p&gt;
&lt;p&gt;用户登录	作业调度	提供服务	应用请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何创建新进程？ /  创建新进程的步骤？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;申请空白 PCB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为新进程分配资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化进程控制块&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将新进程插入到就绪队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;222-阻塞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#222-阻塞&#34;&gt;#&lt;/a&gt; 2.2.2 &lt;strong&gt;阻塞&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么情况下会进行进程的阻塞？&lt;/p&gt;
&lt;p&gt;请求系统服务	启动某种操作	新数据尚未达到	无心工作可做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整进程阻塞的过程？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将进程的状态改为阻塞态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程插入响应的阻塞队列&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转到进程调度程序，从就绪队列中选择进程为分配 CPU&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;223-唤醒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#223-唤醒&#34;&gt;#&lt;/a&gt; 2.2.3 &lt;strong&gt;唤醒&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;进程唤醒的过程？
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;将进程从阻塞队列中移出&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程状态由阻塞状态改为就绪态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将进程插入就绪队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;224-终止&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#224-终止&#34;&gt;#&lt;/a&gt; 2.2.4 &lt;strong&gt;终止&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;完成进程终止的过程
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;从进程 PCB 中读取进程状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;若进程正在执行，则终止进程的执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;释放资源&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将终止进程的 PCB 移出&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-操作系统内核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23-操作系统内核&#34;&gt;#&lt;/a&gt; 2.3 操作系统内核&lt;/h3&gt;
&lt;p&gt;​	操作系统内核是计算机&lt;strong&gt;硬件的第一次扩充&lt;/strong&gt;，与硬件关系密切&lt;/p&gt;
&lt;h4 id=&#34;231-操作系统内核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#231-操作系统内核&#34;&gt;#&lt;/a&gt; 2.3.1 操作系统内核&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;支撑功能&lt;/strong&gt;：中断处理、始终管理、原语操作（原语操作也称原子操作，是一组在执行过程中不能被中断的操作。）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源管理功能&lt;/strong&gt;：进程管理、存储管理、设备管理&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;232-中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#232-中断&#34;&gt;#&lt;/a&gt; 2.3.2 中断&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是中断 ？&lt;/p&gt;
&lt;p&gt;中断是&lt;strong&gt;改变&lt;/strong&gt;处理器执行指令顺序的一种&lt;strong&gt;事件&lt;/strong&gt;。出现中断时，计算机停止现在程序的运行，转向&lt;strong&gt;对这些中断事件的处理&lt;/strong&gt;，处理结束后再&lt;strong&gt;返回到现行程序的间断处&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么需要中断 ？&lt;/p&gt;
&lt;p&gt;引入中断机制后， &lt;strong&gt;CPU 可以与其他设备并行工作&lt;/strong&gt;，能有效&lt;strong&gt;提高 CPU 的利用率&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单重中断处理&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081104.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081104.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;233-时钟管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#233-时钟管理&#34;&gt;#&lt;/a&gt; 2.3.3 时钟管理&lt;/h4&gt;
&lt;p&gt;时钟是计算机系统的脉搏，计算机的很多活动都是由定时测量来驱动的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;计算机系统中的时钟&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实时时钟 RTC（CMOS）&lt;/li&gt;
&lt;li&gt;OS 时钟&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081105.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081105.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟机制&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081106.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081106.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时钟程序功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护日期和时间&lt;/li&gt;
&lt;li&gt;递减当前进程在一个时间片内的剩余执行时间，防止运行超时&lt;/li&gt;
&lt;li&gt;对 CPU 的使用情况记账&lt;/li&gt;
&lt;li&gt;递减报警计数器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;234-系统调用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#234-系统调用&#34;&gt;#&lt;/a&gt; 2.3.4 系统调用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是系统调用？&lt;/p&gt;
&lt;p&gt;系统调用是（一群）&lt;strong&gt;预先定义好的模块&lt;/strong&gt;，提供&lt;strong&gt;一条管道&lt;/strong&gt;让应用程序能由此到&lt;strong&gt;核心程序&lt;/strong&gt;的服务。系统调用是&lt;strong&gt;系统程序&lt;/strong&gt;与&lt;strong&gt;用户程序&lt;/strong&gt;之间的&lt;strong&gt;接口&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用和一般函数调用的区别？&lt;/p&gt;
&lt;p&gt;区别 1: 系统调用运行在&lt;strong&gt;系统态&lt;/strong&gt;，一般函数运行在&lt;strong&gt;用户态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区别 2:&lt;strong&gt; 执行过程不同&lt;/strong&gt; (系统调用执行时，当前进程被中断)&lt;/p&gt;
&lt;p&gt;区别 3: 系统调用进行中断处理，多了&lt;strong&gt;系统开销&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081107.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081107.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统调用的类型&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;进程控制类&lt;/strong&gt;系统调用。创建、撤销进程；获得、改变进程属性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件操作类&lt;/strong&gt;系统调用。创建、删除、打开、关闭和读 / 写文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备管理类&lt;/strong&gt;系统调用。请求、释放设备。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信类&lt;/strong&gt;系统调用。打开、关闭链接，交换信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;信息维护类&lt;/strong&gt;系统调用。返回系统当前日期、时间、版本号、用户数、空闲内存和磁盘空间大小等信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-进程同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24-进程同步&#34;&gt;#&lt;/a&gt; 2.4 进程同步&lt;/h3&gt;
&lt;p&gt;操作系统同步机制的&lt;strong&gt;主要任务&lt;/strong&gt;就是要&lt;strong&gt;保证&lt;/strong&gt;在多任务共享系统资源的情况下，&lt;strong&gt;程序执行能得到正确的结果&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;241-进程同步的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#241-进程同步的基本概念&#34;&gt;#&lt;/a&gt; 2.4.1 进程同步的基本概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;两个任务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一是&lt;strong&gt;对具有资源共享关系的进程&lt;/strong&gt;，保证诸进程以&lt;strong&gt;互斥&lt;/strong&gt;的方式&lt;strong&gt;访问临界资源&lt;/strong&gt;。&lt;strong&gt;临界资源是必须以互斥方式访问的共享资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;二是对具有相互合作关系的进程，保证相互合作的诸进程协调执行。相互合作的进程可能同时存在资源共享的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;并发问题的解决&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果 PIN 和 POUT&lt;strong&gt; 互斥&lt;/strong&gt;地访问 count ，&lt;strong&gt;即 PIN 访问 count 时， POUT 就必须等待 PIN 对 count 的访问完全结束，再开始对 count 的访问&lt;/strong&gt;，反之亦然。这样就不会出现计算结果的错误了。&lt;/p&gt;
&lt;p&gt;像 count 这样必须以&lt;strong&gt;互斥方式访问&lt;/strong&gt;的&lt;strong&gt;共享资源&lt;/strong&gt;称为&lt;strong&gt;临界资源&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里采用临界区&lt;strong&gt;加锁&lt;/strong&gt;的方法，在临界区前加入&lt;strong&gt;进入区代码&lt;/strong&gt;，在临界区之后加&lt;strong&gt;退出区代码&lt;/strong&gt;来实现&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;242-同步机制应遵循的准则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#242-同步机制应遵循的准则&#34;&gt;#&lt;/a&gt; 2.4.2 同步机制应遵循的准则&lt;/h4&gt;
&lt;p&gt;同步机制应遵循的准则可以提供判断、选择和评价同步技术的参考依据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空闲让进&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当没有进程处于临界区时&lt;/strong&gt;，表明临界资源处于空闲状态，应&lt;strong&gt;允许一个&lt;/strong&gt;请求进入临界区的进程立即进入自己的临界区，以有效地利用临界资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;忙则等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当己有进程进入临界区时，表明临界资源正在被访问，因而其他试图进入临界区的进程必须等待，以保证对临界资源的互斥访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;有限等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对要求访问临界资源的进程，应保证在有限时间内能进入自己的临界区，以免进程陷入无限等待的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;让权等待&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当进程申请不到共享资源的访问权时，应立即释放处理机&lt;/strong&gt;，以兔进程陷入 “忙等” 状态，浪费 CPU 资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;243-信号量机制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#243-信号量机制&#34;&gt;#&lt;/a&gt; 2.4.3 信号量机制&lt;/h4&gt;
&lt;p&gt;​	在信号量机制中，用&lt;strong&gt;信号量的取值&lt;/strong&gt;来表示资源的使用状况，或某种事件是否发生，以此为基础实现进程的同步。&lt;/p&gt;
&lt;p&gt;​	对不同的共享资源设置被称为信号量的变量，&lt;strong&gt;用信号量的取值来表示资源的使用状况&lt;/strong&gt;，或某种事件是否发生。&lt;/p&gt;
&lt;p&gt;​	通过信号量的取值来判断进程是否能访问与信号量对应的共享资源。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;整形信号量机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果整型量 &amp;gt; 0，说明有可用资源；如果整型量≤0，说明资源忙，进程必须等待。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;一次只允许一个进程访问&lt;/strong&gt;的临界资源，可定义一个用于&lt;strong&gt;互斥&lt;/strong&gt;的整型信号量，并将其&lt;strong&gt;初始化为 1&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;具体操作&lt;/p&gt;
&lt;p&gt;整型信号量的值只能通过两个特定的原子操作 wait 和 signal 来改变&lt;/p&gt;
&lt;p&gt;wait 和 signal 操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;wait(s) //用于申请资源
&amp;#123;
    while s&amp;lt;=0 do no-op;// s &amp;lt;= 0时循环执行空操作
    s=s-1;
&amp;#125;

signal(s) //用于释放资源
&amp;#123;
    s=s+1;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整型信号量的值只能由 wait 和 siqnal 操作改变。&lt;/li&gt;
&lt;li&gt;wait 和 signal 操作都是&lt;strong&gt;原子操作&lt;/strong&gt;，即这两个操作中对信号量的访问&lt;strong&gt;不能被中断&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;原子操作可以通过关中断来实现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不同的资源对应不同的信号量，并不是系统中所有的资源都用同一个信号量表示&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;记录型信号量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：是不存在 “忙等” 采取了” 让权等待” 的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AND 型信号量机制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本思想是将进程在整个运行过程中所需要的所有资源一次性地全部分配给进程，待该进程使用完后再一起释放。只要还有一个资源不能分配给该进程，其他所有可能为之分配的资源也不分配给它。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;244-经典的进程同步问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#244-经典的进程同步问题&#34;&gt;#&lt;/a&gt; 2.4.4 经典的进程同步问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生产者一 消费者问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产者进程生产消息，并将消息提供给消费者进程消费。在生产者进程和消费者进程之间设置了一个具有 n 个缓冲区的缓冲池，生产者进程可以将它所产生的消息放入缓冲池的一个缓冲区中，消费者进程可以从一个缓冲区中取得一个消息消费。&lt;/li&gt;
&lt;li&gt;任意两个进程必须以互斥的方式访问公共缓冲池。当缓冲池空，没有可供消费的消息时，消费者进程必须阻塞等待。当缓冲池装满消息，没有空闲缓冲区时，生产者进程必须阻塞等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要解决的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现任意两个进程对缓冲池的互斥访问。&lt;/li&gt;
&lt;li&gt;实现对生产者进程和消费者进程的 “协调”&lt;/li&gt;
&lt;li&gt;即缓冲池中有消息时消费者进程才能执行取消息的操作。无消息时，阻塞消费者进程。缓冲池中有空闲缓冲区时，生产者进程才能执行放消息的操作。无空闲缓冲区时，阻塞生产者进程。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号量的设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置一个互斥信号量 mulex ，用于实现对公共缓冲池的互斥访问，初值为 1。&lt;/li&gt;
&lt;li&gt;设置两个资源信号量，分别表示可用资源数。empty : 表示缓冲池中的空缓冲区数，初值为 n。full : 表示装有消息的缓冲区数，初值为 0 (一个缓冲区中放一个消息)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步程序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用记录型信号量机制实现生产者 —— 消费者问题的同步代码如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生产者进程同步代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;Producer:
begin
repeat
...
produce an item in nextp;
wait(empty);//申请空缓冲区
wait(mutex);//申请公共缓冲池的互斥访问权
buffer(in)=nextp; //将消息放入in指针指向的缓冲区
in=(in+ 1) mod n; //in指针指向下一个空缓冲区
signal(mutex); //释放对公共缓冲池的互斥访问权
signal(full); //释放消息资源
until false
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消费者进程同步代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-伪代码&#34;&gt;Consumer:
begin 
repeat
...
wait(ull); //申请消息
wait(mutex); //申请公共缓冲池的互斥访问权
nextc= buffer(out); //从out指针指向的缓冲区中取消息
out=(out+ 1) mod h; //out指针指向下一个装有消息的缓冲区
signal(mutex); //释放对公共缓冲池的互斥访问权
signal(empty); //释放空缓冲区
consume item in nextc ;
until false
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;245-管程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#245-管程&#34;&gt;#&lt;/a&gt; 2.4.5 管程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;管程的定义&lt;/p&gt;
&lt;p&gt;管程是描述共享资源的数据结构和在数据结构上的共享资源管理程序的集合。其中包括变量的定义、变量的初始化代码，以及管理共享资源的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对管程的说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;管程是可供程序员调用的软件包&lt;/strong&gt;，是一个由过程、变量及数据结构等组成的集合，它们组成一个特殊的模块或软件包。&lt;strong&gt;进程可以在任何需要的时候调用管程中的过程&lt;/strong&gt;，但不能在管程外的过程中直接访问管程内的数据结构。&lt;/li&gt;
&lt;li&gt;每次只有一个进程调用管程执行，任意时刻管程中只能有一个活跃进程。&lt;/li&gt;
&lt;li&gt;管程是一种编程语言的构件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;25-进程通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25-进程通信&#34;&gt;#&lt;/a&gt; 2.5 进程通信&lt;/h3&gt;
&lt;p&gt;​	操作系统提供进程通信功能，以支持进程之间的信息交换。&lt;/p&gt;
&lt;h4 id=&#34;251-共享存储器系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#251-共享存储器系统&#34;&gt;#&lt;/a&gt; 2.5.1 共享存储器系统&lt;/h4&gt;
&lt;p&gt;​	在共享存储器系统中，&lt;strong&gt;相互通信的进程共享某些数据结构或共享存储区&lt;/strong&gt;，进程之间能够通过这些空间进行通信。共享存储器系统可分为两种类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于&lt;strong&gt;共享数据结构&lt;/strong&gt;的通信方式。要求诸进程公用某些数据结构，以实现进程间的信息交换。&lt;/li&gt;
&lt;li&gt;基于&lt;strong&gt;共享存储区&lt;/strong&gt;的通信方式。进程通过对共享存储区中的数据的读或写来实现通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;252-消息传递系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#252-消息传递系统&#34;&gt;#&lt;/a&gt; 2.5.2 消息传递系统&lt;/h4&gt;
&lt;p&gt;​	进程间通过&lt;strong&gt;操作系统提供的一组通信程序&lt;/strong&gt;传递格式化的信息。这种方式对应用程序隐藏了通信实现的细节使通信过程对用户是透明的。根据传递消息方式的不同，分为直接通信方式和间接通信方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;直接通信方式&lt;/strong&gt;。操作系统利用发送程序&lt;strong&gt;直接&lt;/strong&gt;把消息发送给目标程序。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;间接通信方式&lt;/strong&gt;。进程之间的通信需要通过用于&lt;strong&gt;暂存&lt;/strong&gt;消息的共享数据结构来实现，如信箱。该方式可以实现实时通信，又可以实现非实时通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;253-管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#253-管道&#34;&gt;#&lt;/a&gt; 2.5.3 管道&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;管道&lt;/strong&gt;是连接读写进程的&lt;strong&gt;一个特殊文件&lt;/strong&gt;，也被称为管道文件。管道文件存在于&lt;strong&gt;外存&lt;/strong&gt;中，其中的消息没有固定长度，能用于进程间大量的信息通信。向管道提供输入的发送进程以&lt;strong&gt;字符流&lt;/strong&gt;的形式将大量的数据送入管道。接受管道输出的接收进程，从管道中接收数据。&lt;/p&gt;
&lt;h4 id=&#34;254-消息缓冲队列&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#254-消息缓冲队列&#34;&gt;#&lt;/a&gt; 2.5.4 消息缓冲队列&lt;/h4&gt;
&lt;p&gt;​	用于本地进程之间的通信，包括&lt;strong&gt;数据结构、发送原语和接收原语&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	发送进程&lt;strong&gt;发送消息&lt;/strong&gt;时，先&lt;strong&gt;申请一个消息缓冲区&lt;/strong&gt;，将要发送的消息&lt;strong&gt;从发送进程的发送区放入消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缓冲区&lt;/strong&gt;。然后，&lt;strong&gt;调用发送原语&lt;/strong&gt;将消息&lt;strong&gt;发送给接收进程&lt;/strong&gt;，发送原语将发送缓冲区插入接收进程的消&lt;/p&gt;
&lt;p&gt;息缓冲队列。&lt;/p&gt;
&lt;p&gt;​	接收消息的进程&lt;strong&gt;通过调用接收原语&lt;/strong&gt;将该进程消息缓冲队列中的消息复制到自己的消息接收区。&lt;/p&gt;
&lt;p&gt;​	消息缓冲区是一个结构型数据结构。&lt;/p&gt;
&lt;p&gt;​	消息缓冲队列需要被当作&lt;strong&gt;临界资源&lt;/strong&gt;，在发送原语和接收原语中&lt;strong&gt;对消息缓冲队列的访问&lt;/strong&gt;需要&lt;strong&gt;进行互斥与同步&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;26-线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#26-线程&#34;&gt;#&lt;/a&gt; 2.6 线程&lt;/h3&gt;
&lt;h4 id=&#34;261-线程的描述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#261-线程的描述&#34;&gt;#&lt;/a&gt; 2.6.1 线程的描述&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;为了进一步提高程序的并发性 ，减少系统开销，在操作系统中引入了线程的概念&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	引入线程作为独立调度和分派的单位，&lt;strong&gt;不独立拥有资源，而与其他线程共享同一进程的资源&lt;/strong&gt;，减少了系统的时空开销。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;线程的实质是把进程的任务划分成更小，具有独立功能的单位&lt;/strong&gt;，以线程的形式来并发执行，以提高程序并发执行的程度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线程的概念&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程是进程中的一个实体&lt;/strong&gt;，是被系统独立调度和分派的基本单位。&lt;strong&gt;一个线程可以创建和撤销另一个线程。同一进程中的多个线程可以并发执行。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的分类&lt;/p&gt;
&lt;p&gt;用户级线程和内核级线程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程的三种基本状态&lt;/p&gt;
&lt;p&gt;就绪、运行和阻塞。&lt;/p&gt;
&lt;p&gt;就绪态是线程一 - 旦获得 CPU 就可以投入运行的状态。&lt;/p&gt;
&lt;p&gt;运行态是线程获得 CPU 正在运行的状态。&lt;/p&gt;
&lt;p&gt;阻塞态是线程由于等待某个事件的发生而暂停执行的状态。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081108.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081108.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程控制块（TCB）&lt;/p&gt;
&lt;p&gt;每个线程都由一个数据结构表示，包括它的&lt;strong&gt;基本状态、标识及记账信息&lt;/strong&gt;，这个数据结构就是&lt;strong&gt;线程控制块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;线程控制块记录了操作系统所需的，用于描述线程情况及控制线程运行所需的全部信息。&lt;/p&gt;
&lt;p&gt;线程控制块采用&lt;strong&gt;链接&lt;/strong&gt;方式来组织，把&lt;strong&gt;同一进程中具有相同状态的 TCB 用指针链接成列&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线程与进程的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;资源和调度&lt;/strong&gt;。&lt;strong&gt;线程是程序执行的基本单位，进程是拥有资源的基本单位。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;地址空间资源&lt;/strong&gt;。&lt;strong&gt;不同进程的地址空间是相互独立的，而同一进程中的各线程共享同一地址空间。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信关系&lt;/strong&gt;。进程之间的通信必须使用操作系统提供的进程间通信机制，而同一进程中的各线程间可以&lt;strong&gt;通过直接读或写全局变量&lt;/strong&gt;来进行通信，甚至无需操作系统的参与。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并发性&lt;/strong&gt;。多进程之间可以并发执行，多线程之间也可以并发执行，同 - 进程中的多个线程之间也可以并发执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统开销&lt;/strong&gt;。创建或撤销进程时，系统都要为之分配或回收资源，系统开销大。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;本人说明：可以理解为线程是 java 的线程，进程是 windows 的一个软件&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;262-线程的控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#262-线程的控制&#34;&gt;#&lt;/a&gt; 2.6.2 线程的控制&lt;/h4&gt;
&lt;p&gt;​	线程控制包括创建新线程、终止线程、线程调度和线程切换，以及线程由于等待某个事件的发生而被阻塞与该事件发生后线程被唤醒。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;用户线程的创建通过调用线程库中的实用程序完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;内核线程的创建由内核完成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如果进程中一个用户线程被阻塞，则整个进程必须等待。&lt;/p&gt;
&lt;p&gt;​	当被阻塞的线程所等待的事件发生时，则由有关进程唤醒原语&lt;strong&gt;将该线程所属的进程唤醒，然后由有关线程唤醒原语将该线程唤醒&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	如果进程中的一个内核线程被阻塞，内核可以调度同一个进程中的另一个内核线程运行。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;一个进程中的所有线程共享同一个地址空间&lt;/strong&gt;和诸如打开的文件之类的其他资源。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;一个线程对资源的任何修改都会影响同一个进程中其他线程的环境。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;同一进程中线程间共享内存和文件资源&lt;/strong&gt;，各线程间可通过&lt;strong&gt;直接读写全局变量&lt;/strong&gt;进行通信。&lt;/p&gt;
&lt;p&gt;​	对于&lt;strong&gt;不同进程的线程间&lt;/strong&gt;通信，则必须&lt;strong&gt;使用操作系统提供的线程间&lt;/strong&gt;通信机制。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三章进程调度与死锁重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三章进程调度与死锁重点&#34;&gt;#&lt;/a&gt; 第三章：进程调度与死锁（重点）&lt;/h2&gt;
&lt;h3 id=&#34;本章考试重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本章考试重点&#34;&gt;#&lt;/a&gt; 本章考试重点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;进程调度
&lt;ul&gt;
&lt;li&gt;进程调度算法（选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;实时系统中的调度概念及算法 (选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;进程切换 (选择、填空、简答)&lt;/li&gt;
&lt;li&gt;多处理器调度 (选择、填空、简答)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;死锁
&lt;ul&gt;
&lt;li&gt;死锁产生的原因、必要条件 (选择、填空、简答&lt;/li&gt;
&lt;li&gt;死锁的预防和避免 (选择、填空、简答)&lt;/li&gt;
&lt;li&gt;银行家算法 (选择、填空、简答、综合)&lt;/li&gt;
&lt;li&gt;死锁的检测和解除 (选择、填空、简答)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近三年分值分布: 21~ 26 分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-进程调度的功能与时机&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#31-进程调度的功能与时机&#34;&gt;#&lt;/a&gt; 3.1 进程调度的功能与时机&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进程调度功能&lt;/strong&gt;由操作系统内核的&lt;strong&gt;进程调度程序完成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;进程调度的功能是&lt;strong&gt;按照某种策略和算法&lt;/strong&gt;从&lt;strong&gt;就绪态&lt;/strong&gt;进程中为&lt;strong&gt;当前空闲的 CPU&lt;/strong&gt; 选择在其上运行的新进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时机&lt;/p&gt;
&lt;p&gt;当一个进程运行结束、进程阻塞、中断返回、在支持抢占式调度的系统中&lt;strong&gt;有比当前运行进程优先级更高的进程到来&lt;/strong&gt;、当前运行进程的&lt;strong&gt;时间片用完&lt;/strong&gt;，系统都会通过&lt;strong&gt;执行进程调度程序&lt;/strong&gt;重新进行进程调度。（优先级高、当前时间片用完）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-进程调度算法综合题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#32-进程调度算法综合题&#34;&gt;#&lt;/a&gt; 3.2 进程调度算法（综合题）&lt;/h3&gt;
&lt;p&gt;进程调度算法是指从&lt;strong&gt;就绪态&lt;/strong&gt;进程中选择一个进程为其分配 CPU ，&lt;strong&gt;使其进入执行态&lt;/strong&gt;的算法。也就是说进程调度算法要 **“决定” 把 CPU 分配给就绪队列中的哪个进程 **。&lt;/p&gt;
&lt;p&gt;进程调度由操作系统内核中的进程调度程序完成。&lt;/p&gt;
&lt;h4 id=&#34;321-选择调度方式和算法的若干准则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#321-选择调度方式和算法的若干准则&#34;&gt;#&lt;/a&gt; 3.2.1 选择调度方式和算法的&lt;strong&gt;若干准则&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;周转时间短&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;周转时间&lt;/strong&gt;是指从&lt;strong&gt;作业被提交给系统开始，到作业完成为止&lt;/strong&gt;的这段时间间隔。&lt;/p&gt;
&lt;p&gt;包括&lt;strong&gt; 4 部分&lt;/strong&gt;时间：&lt;/p&gt;
&lt;p&gt;➢作业在&lt;strong&gt;外存后备队列上等待调度的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程在&lt;strong&gt;就绪队列上等待进程调度的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程在&lt;strong&gt; CPU 上执行的时间&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;➢进程等待&lt;strong&gt; I/O 操作完成的时间&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果系统中&lt;strong&gt;有 n 个作业&lt;/strong&gt;，系统的&lt;strong&gt;平均周转时间&lt;/strong&gt;等于 n 个作业的周转时间&lt;strong&gt;之和除以 n&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作业的周转时间 T 与系统为它提供的服务时间 Ts 之比为 W， W 称为&lt;strong&gt;带权周转时间&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务时间&lt;strong&gt; Ts 是一个作业在 CPU 上执行的总时间&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;响应时间快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;响应时间是指&lt;strong&gt;用户提交一个请求开始&lt;/strong&gt;至&lt;strong&gt;系统首次产生响应&lt;/strong&gt;的时间为止的一段时间。&lt;/p&gt;
&lt;p&gt;它包括&lt;strong&gt; 3 部分&lt;/strong&gt;时间：从&lt;strong&gt;输入设备信息传送到处理机&lt;/strong&gt;的时间、&lt;strong&gt;处理机对请求信息进行处理&lt;/strong&gt;的时间，以及&lt;strong&gt;将所形成的响应信息回送到终端显示器&lt;/strong&gt;的时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于交互式系统，响应时间是衡量系统时间性能的重要指标。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;截止时间的保证&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;截止时间是指某个任务&lt;strong&gt;必须开始的最迟时间或必须完成的最迟时间&lt;/strong&gt;。是评价实时系统性能的重要指标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统吞吐量高&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吞吐量&lt;/strong&gt;是指&lt;strong&gt;单位时间内完成的作业数&lt;/strong&gt;。是评价系统性能的重要指标之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理机利用率好&lt;/p&gt;
&lt;p&gt;CPU 是计算机系统中影响时间性能的最重要的硬件资源，在多任务系统中，进程调度算法对 CPU 的利用率有很大影响。因此，在&lt;strong&gt;选择和设计进程调度算法时应该考虑使 CPU 的利用率尽可能高&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;322-先来先服务调度算法fcfs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#322-先来先服务调度算法fcfs&#34;&gt;#&lt;/a&gt; 3.2.2 先来先服务调度算法 (&lt;strong&gt;FCFS&lt;/strong&gt; )&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调度算法&lt;/p&gt;
&lt;p&gt;在进程调度中，FCFS 就是从就绪队列的队首选择最先到达就绪队列的进程，为该进程分配 CPU。（First-Come ， First- Served）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能分析&lt;/p&gt;
&lt;p&gt;FCFS&lt;strong&gt; 适合长进程&lt;/strong&gt;，有利于 CPU 繁忙的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;综合题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;有3个进程p1、p2和p3 ，分别在0、1、 2时刻进入系统，需要的运行(服务)时间长度分别为24、3、3 .，按照FCFS调度算法， 3个进程的等待时间和周转时间分别是?

[答案]
等待时间=开始时间-进入时间，周转时间=运行时间+等待时间。
注意：开始运行时间从0开始计算
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进程名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;进入系统时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;开始运行&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运行时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;等待时间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;周转时间&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;p3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;27&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;此种情况下平均周转时间T和平均带权周转时间W为多少?

[答案] T=(24+26+ 28)/3=26
	  W=(24/24+ 26/3+ 28/3)/3-6.33

[解析]
	等待时间=开始时间-进入时间
	周转时间=运行时间+等待时间
	系统的平均周转时间:各个进程的周转时间总和/进程数
	带权周转时间:周转时间/运行时间
	平均带权周转时间:各个进程的带权周转时间总和/进程数
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;323-短进程优先调度算法-shortest-process-firstspf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#323-短进程优先调度算法-shortest-process-firstspf&#34;&gt;#&lt;/a&gt; 3.2.3 短进程优先调度算法 (Shortest-Process-First，SPF)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;算法的缺陷
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对长进程不利&lt;/strong&gt;。如果系统中不断有短进程到来长进程&lt;strong&gt;可能长时间得不到调度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不能保证紧迫进程的及时处理&lt;/strong&gt;，因&lt;strong&gt;本算法不考虑进程的紧迫程度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程的长度由用户估计而定，可能有偏差&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;324-优先权调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#324-优先权调度算法&#34;&gt;#&lt;/a&gt; 3.2.4 优先权调度算法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调度算法&lt;/p&gt;
&lt;p&gt;​	在使用优先权调度的系统中， 每个进程都有一个与之关联的优先权。&lt;/p&gt;
&lt;p&gt;​	当使用优先权调度算法进行进程调度时，系统将 CPU 分配给就绪队列中&lt;strong&gt;优先权值最高&lt;/strong&gt;的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权调度算法的分类&lt;/p&gt;
&lt;p&gt;① 非抢占式优先权调度算法高优先权进程一旦得到处理机， 便一直运行下去直到完成或由于某事件使该进程主动放弃处理机。&lt;/p&gt;
&lt;p&gt;​	即使更高优先权进程到来，也不能剥夺当前进程的 CPU 使用权，只能在就绪队列中等待。&lt;/p&gt;
&lt;p&gt;② 抢占式优先权调度算法&lt;/p&gt;
&lt;p&gt;​	新到达的就绪进程与正在运行进程的优先权相比较，若&lt;strong&gt;新到达进程的优先权高于当前正在运行进程的优先权&lt;/strong&gt;，则&lt;strong&gt;系统会抢占 CPU&lt;/strong&gt; ，分配给新到达的进程，正在执行的进程暂停执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权的类型&lt;/p&gt;
&lt;p&gt;根据优先权的变化特点将优先权的类型分为&lt;strong&gt;静态和动态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;静态优先权&lt;/strong&gt;。在创建时确定，在进程的整个运行期间不变。&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;动态优先权&lt;/strong&gt;。进程创建时被赋予的优先权，随进程的推进或随其等待时间的增加而改变。&lt;strong&gt;动态优先权调度算法可以使系统获得更好的调度性能&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优先权调度算法存在的问题和解决方案&lt;/p&gt;
&lt;p&gt;① 问题。无穷阻塞或称饥饿问题。指就绪态进程因得不到 CPU 而等待的状态。优先权调度算法可能使某个低优先权进程无穷等待。&lt;/p&gt;
&lt;p&gt;② 解决方案。&lt;strong&gt;老化 (Aging) 技术。逐渐增加在系统中等待时间很长进程的优先权。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;325时间片轮转调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#325时间片轮转调度算法&#34;&gt;#&lt;/a&gt; 3.2.5 时间片轮转调度算法&lt;/h4&gt;
&lt;p&gt;​	时间片轮转调度算法在现代分时系统中广泛使用， UNIX、Linux、 Windows 操作 系统都采用基于时间片轮转、支持优先权和抢占式调度的混合式进程调度算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;时间片轮转调度算法&lt;/p&gt;
&lt;p&gt;时间片是一个较小的时间单位，通常为 10~ 100ms。每当进程在 CPU_上连续运行的时间等于一一个时间片长度时，操作系统在时钟中断处理过程中会抢占 CPU，进行进程切换，用新的就绪进程替代当前进程，&lt;strong&gt;被替换的当前进程重新回到就绪队列中&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间片大小的确定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间片太长&lt;/strong&gt;，可降低进程的周转时间，但可能造成交互用户的响应时间过长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间片太短&lt;/strong&gt;，会增加进程切换和调度的开销，系统的平均周转时间也较长。&lt;/p&gt;
&lt;p&gt;① &lt;strong&gt;系统对响应时间的要求&lt;/strong&gt;。响应时间越短，时间片取值应该越小。&lt;/p&gt;
&lt;p&gt;设系统响应时间为 T ，进程数目为 N，时间片为 q ，则有 T=Nq ，即在 N - 定的情况下， T 的大小取决于 q。&lt;/p&gt;
&lt;p&gt;② &lt;strong&gt;就绪队列中进程的数目&lt;/strong&gt;。进程越多，响应时间越长。当设定了系统的最长响应时间值后，时间片的大小就与系统允许的最大进程数成反比。&lt;/p&gt;
&lt;p&gt;③ &lt;strong&gt;系统的处理能力&lt;/strong&gt;。必须保证系统支持的基本命令能在一个时间片内执行完。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间片轮转调度算法的性能评价&lt;/p&gt;
&lt;p&gt;时间片轮转调度算法的性能&lt;strong&gt;依赖于时间片的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;时间片很大，与先来先服务算法一样。&lt;/p&gt;
&lt;p&gt;时间片很小，会增加 CPU 用于进程切换和进程调度的开销。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;326-多级队列调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#326-多级队列调度&#34;&gt;#&lt;/a&gt; 3.2.6 多级队列调度&lt;/h4&gt;
&lt;p&gt;​	通常根据&lt;strong&gt;不同进程对响应时间要求的不同&lt;/strong&gt;，采用&lt;strong&gt;多级队列调度算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	多级队列调度算法，根据&lt;strong&gt;进程占用内存的大小、优先权或进程类型&lt;/strong&gt;，将就绪队列分成多个独立队列，&lt;strong&gt;进程被永久地分配到一个队列，每个队列有自己的调度算法&lt;/strong&gt;。&lt;strong&gt;降低了进程调度的开销&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;327多级反馈队列调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#327多级反馈队列调度&#34;&gt;#&lt;/a&gt; 3.2.7 多级反馈队列调度&lt;/h4&gt;
&lt;p&gt;​	采用多级队列调度，对低优先权进程会存在无穷阻塞 (饥饿) 的问题。&lt;/p&gt;
&lt;p&gt;​	多级反馈队列调度算法可以弥补这些不足。在采用多级反馈队列调度的系统中建立多个优先权不同的就绪队列，为每个队列赋予大小不同的时间片。&lt;/p&gt;
&lt;p&gt;​	有一种&lt;strong&gt;反馈策略规定&lt;/strong&gt;：队列优先权越高，时间片越短。新进程被创建后，先插入预先权最高的队列。仅当高优先权队列空时，才调度优先权次之的队列。同一队列中， 采用时间片轮转调度算法。使用 CPU 时间过多的进程会被移到优先权较低的队列中，在较低优先权队列中等待时间过长的进程会被移到较高优先权队列中。&lt;/p&gt;
&lt;p&gt;​	多级反馈队列调度算法的设计要考虑以下几个方面的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;就绪队列的数量。&lt;/li&gt;
&lt;li&gt;根据进程优先权确定进程应该进入哪个就绪队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程何时转移到较高优先权队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程何时转移到较低优先权队列的算法。&lt;/li&gt;
&lt;li&gt;用以确定进程在需要服务时应该进入哪个队列的算法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;33-实时系统中的调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#33-实时系统中的调度&#34;&gt;#&lt;/a&gt; 3.3 实时系统中的调度&lt;/h3&gt;
&lt;h4 id=&#34;331-实现实时调度的基本条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#331-实现实时调度的基本条件&#34;&gt;#&lt;/a&gt; 3.3.1 实现实时调度的基本条件&lt;/h4&gt;
&lt;p&gt;​	为了满足实时系统对截止时间的要求，实现实时调度应具备下列几个条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提供必要的调度信息&lt;/strong&gt;&lt;br&gt;
① 就绪时间&lt;br&gt;
② 开始截止时间和完成截止时间&lt;br&gt;
③ 处理时间&lt;br&gt;
④ 资源要求&lt;br&gt;
⑤优先级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;系统处理能力强&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（具体没啥用，随便看看）&lt;/p&gt;
&lt;p&gt;​	在实时系统中，通常有多个实时进程，若处理机的处理能力不够强，处理速度不够快，若使某些实时进程不能得到及时处理，可能发生难以预料的后果。&lt;/p&gt;
&lt;p&gt;​	可通过提高处理机的处理能力或增加处理机的数量以提高系统的处理能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;采用抢占式调度机制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;基于时钟中断的抢占式优先权调度算法&lt;/strong&gt;&lt;br&gt;
若高优先权大于正在执行的进程，就等当前进程到时钟中断的时候抢占&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;立即抢占的优先权调度算法&lt;/strong&gt;&lt;br&gt;
一旦接收到就给当前执行的进程一个中断信号，然后抢占&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具有快速切换机制&lt;br&gt;
就是需要进程&lt;strong&gt;对外部中断做出快速响应&lt;/strong&gt;和&lt;strong&gt;快速的进程切换&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;332-常用的实时调度算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#332-常用的实时调度算法&#34;&gt;#&lt;/a&gt; 3.3.2 常用的实时调度算法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最早截止时间优先 EDF 算法&lt;/p&gt;
&lt;p&gt;根据进程的开始截止时间确定进程的优先级，&lt;strong&gt;截止时间越早，进程的优先级越高&lt;/strong&gt;，越优先获得处理机。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最低松弛度优先 LLF 算法&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;松弛度用来表示个实时进程的紧迫程度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	如果一个进程的完成截止时间为 T ，当前时间为 Tc 处理完该任务还需要的时间为 Ts，则松弛度 L 的计算式表示为: L=T-Tc-Ts&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;调度时，每次选择松弛度最小的进程&lt;/strong&gt;。该算法按松弛度排序，&lt;strong&gt;让松弛度最小的进程排在就绪队列队首&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-进程切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#34-进程切换&#34;&gt;#&lt;/a&gt; 3.4 进程切换&lt;/h3&gt;
&lt;p&gt;​	含义：&lt;strong&gt;用新选择的进程替换原来的进行进程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程切换包括的步骤如下:
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;保存 CPU 上下文环境。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新进程控制块。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修改进程状态，把执行态改为就绪态或者阻塞态。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将被替换进程的进程控制块移到就绪队列或阻塞队列。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行新进程，并更新改进程的进程控制块。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新内存管理的数据结构。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;恢复上下文。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-多处理器调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#35-多处理器调度&#34;&gt;#&lt;/a&gt; 3.5 多处理器调度&lt;/h3&gt;
&lt;h4 id=&#34;351-多处理器系统的类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#351-多处理器系统的类型&#34;&gt;#&lt;/a&gt; 3.5.1 多处理器系统的类型&lt;/h4&gt;
&lt;p&gt;根据处理器的耦合程度，分为紧密耦合和松弛耦合；根据处理器的结构，分为对称和非对称。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;紧密耦合和松弛耦合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;紧密耦合&lt;/li&gt;
&lt;li&gt;松弛耦合&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对称和非对称&lt;/p&gt;
&lt;p&gt;对称属于同构，非对称在功能和结构上各不相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;352-多处理器系统中的进程分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#352-多处理器系统中的进程分配方式&#34;&gt;#&lt;/a&gt; 3.5.2 多处理器系统中的进程分配方式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对称多处理器系统中的进程分配方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态分配&lt;/p&gt;
&lt;p&gt;操作系统为每个处理器建立 - 个专门的就绪队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态分配&lt;/p&gt;
&lt;p&gt;每个进程经过多次调度，每次获得的不一定是同一个处理器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称多处理器系统 (MPS) 中的进程分配方式&lt;/p&gt;
&lt;p&gt;采&lt;strong&gt;用主一从式&lt;/strong&gt;操作系统，操作系统的核心部分驻留在一台主机上，而从机上只运行用户程序，只有主机 执行调度程序，所有从机的进程都是由主机分配的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;353-进程线程调度方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#353-进程线程调度方式&#34;&gt;#&lt;/a&gt; 3.5.3 进程（线程）调度方式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自调度&lt;/p&gt;
&lt;p&gt;采用自调度的系统中设置&lt;strong&gt;有个公共的就绪队列，任何一个空闲的处理器都可以自行从该就绪队列中选取一个进程或者一个线程运行&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;➢ 易移植&lt;/p&gt;
&lt;p&gt;➢ 有利于提高 CPU 的利用率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;p&gt;➢ 瓶颈问题，容易产生并发问题&lt;/p&gt;
&lt;p&gt;➢ 低效性，高速缓冲的命中率较低&lt;/p&gt;
&lt;p&gt;➢ 线程切换频繁&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成组调度&lt;/p&gt;
&lt;p&gt;系统&lt;strong&gt;将一组相互合作的进程或线程同时分配到一组处理器上运行，进程或线程与处理器对应&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点:&lt;br&gt;
➢ 减少线程切换，改善系统性能。&lt;br&gt;
➢ 减少调度开销。一次调度一组，减少调度频率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;36-死锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#36-死锁&#34;&gt;#&lt;/a&gt; 3.6 死锁&lt;/h3&gt;
&lt;h4 id=&#34;361-产生死锁的原因和必要条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#361-产生死锁的原因和必要条件&#34;&gt;#&lt;/a&gt; 3.6.1 产生死锁的原因和必要条件&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;当多个进程可能竞争数量有限的资源。若一个进程所申请的资源被其他处于阻塞状态的进程占有，该进程就会因为不能获得所申请的资源而被阻塞。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这种由于多个进程竞争共享资源而引起的&lt;strong&gt;进程不能向前推进的僵持状态&lt;/strong&gt;称为&lt;strong&gt;死锁&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;产生死锁的原因&lt;/strong&gt;：竞争共享资源且分配资源的顺序不当。&lt;/p&gt;
&lt;p&gt;产生死锁的必要条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;互斥条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;指一个进程在访问资源的过程中，其他进程不能访问该资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求和保持条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程已经保持了至少一个资源，又提出了新的资源要求且已经被其他进程占有，此时进程阻塞，但又对已经获得的资源保持不放，使得其他进程无法使用被保持的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不剥夺条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程已经获得的资源不能被剥夺，只能由进程自己释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;环路等待条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在发生死锁时，必然存在一个进程申请资源的环形链。&lt;/p&gt;
&lt;p&gt;注意：只有上述 4 个条件同时满足时才会发生死锁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;362-处理死锁的基本方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#362-处理死锁的基本方法&#34;&gt;#&lt;/a&gt; 3.6.2 处理死锁的基本方法&lt;/h4&gt;
&lt;p&gt;处理死锁的基本方法有&lt;strong&gt;预防死锁、避免死锁、检测并解除死锁和忽略死锁&lt;/strong&gt;问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;死锁的预防&lt;/p&gt;
&lt;p&gt;通过保证至少其中一个条件不成立来达到预防发生死锁的目的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃请求和保持条件&lt;/strong&gt;&lt;br&gt;
所有进程执行前要一次性地申请在整个运行过程中所需要的全部资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃不剥夺条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个已保持了某些资源的进程，当它再提出新的资源要求而不能立即得到满足时，必须释放它已经保持的所有资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;摒弃环路等待条件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进程必须按规定的顺序申请资源&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁的避免&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;避免死锁的方法是把系统的资源分配状态分为安全状态和不安全状态&lt;/strong&gt;，只要资源分配使系统资源分配状态处于安全状态，死锁就不会发生。&lt;/p&gt;
&lt;p&gt;​	在避免死锁的方法中，允许进程动态地电请资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;363-银行家算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#363-银行家算法&#34;&gt;#&lt;/a&gt; 3.6.3 银行家算法&lt;/h4&gt;
&lt;p&gt;​	1965 年 Dijkstra (迪杰斯特拉) 提出了种能够避免死锁的资源分配算法。&lt;/p&gt;
&lt;p&gt;​	其基本思想是&lt;strong&gt;一个进程提出资源请求后，系统先进行资源的试分配。然后检测本次的试分配是否使系统处于安全状态，若安全则按试分配方案分配资源，否则不分配资源&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	银行家算法的由来是银行家贷款给客户这一问题。银行家(操作系统)把一定数量的资金(资源)供多个用户(进程)周转使用。当顾客对资金的最大申请量不超过银行家现金时就可接纳一个新顾客。银行可以对顾客的借款推迟支付，但一定使顾客总能在有限的时间内得到借款;当顾客得到全部资金后，他一定能在有限的时间里归还(回收)所有资金(资源)。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;银行家算法分为两个过程:&lt;br&gt;
 一是进行资源试分配的过程；&lt;br&gt;
 二是对试分配后系统的状态做安全性检测的过程。&lt;/p&gt;
&lt;h4 id=&#34;364-死锁的检测和解除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#364-死锁的检测和解除&#34;&gt;#&lt;/a&gt; 3.6.4 死锁的检测和解除&lt;/h4&gt;
&lt;p&gt;何时调用检测算法？&lt;/p&gt;
&lt;p&gt;​	➢ 死锁可能发生的频率&lt;/p&gt;
&lt;p&gt;​	➢ 当死锁发生时受影响的进程数量&lt;/p&gt;
&lt;p&gt;死锁定理&lt;/p&gt;
&lt;p&gt;​	➢ 死锁状态的充分条件是当且仅当资源分配状态是不可完全简化的。&lt;/p&gt;
&lt;p&gt;死锁的解除&lt;/p&gt;
&lt;p&gt;​	➢ 终止处于死锁状态的进程&lt;/p&gt;
&lt;p&gt;​	➢ 抢占死锁进程占有的资源&lt;/p&gt;
&lt;p&gt;单选题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;某系统中有n (n为大于1的整数)个并发进程，每个进程需要同类资源m个(m为大于0的整数), 请问该系统不会发生死锁的最少资源数是( C )。

A. n+m
B.n*m
C.n*(m-1)+1
D.以上都对

[解析]
例如,若某系统中有4个并发进程,每个进程需要同类资源3个,则只要分配4*(3-1)+ 1共9个资源,该系统就不会发生死锁。每个进程都申请到两个资源后,还有1个资源,无论哪个进程获得这个资源都可以继续向前推进,当获得这个资源的进程执行完后,可以释放3个资源再分配给其他3个进程,因此不会发生死锁。
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第四章内存管理重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四章内存管理重点&#34;&gt;#&lt;/a&gt; 第四章：内存管理（重点）&lt;/h2&gt;
&lt;h3 id=&#34;考试重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试重点&#34;&gt;#&lt;/a&gt; 考试重点&lt;/h3&gt;
&lt;p&gt;​	➢ 存储器的层次结构 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 程序的链接和装入 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 连续分配存储管理、动态分区分配算法 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 分页、快表、两级页表 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 虚拟存储、缺页、页分配策略 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;​	➢ 页置换算法 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;​	➢ 分段系统、段表、段页式存储管理 (选择、填空、简答)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本章近 3 年分值: 19~22 分&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;41-存储器的层次结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#41-存储器的层次结构&#34;&gt;#&lt;/a&gt; 4.1 存储器的层次结构&lt;/h3&gt;
&lt;p&gt;​	内存是计算机存储系统的一部分，为了更好地理解后续章节内容，先了解存储器系统的层次结构。存储器系统是一个具有不同容量、成本和访问时间的存储设备的层次结构。&lt;/p&gt;
&lt;p&gt;在这个层次系统中，从高层到底层 (L0~L5)，较低层的存储设备速度更慢、容量更大、价格更便宜。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081201.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081201.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果存储在高速缓存中，需要 1~ 10 个周期。&lt;/p&gt;
&lt;p&gt;如果存放在主存中，访问它们需要 50~ 100 个周期。&lt;/p&gt;
&lt;p&gt;如果存放在磁盘中，访问它们需要大约 2000 万个周期。&lt;/p&gt;
&lt;p&gt;​	➢ 程序的执行遵循&lt;strong&gt;局部性&lt;/strong&gt;原理。&lt;/p&gt;
&lt;p&gt;​	程序在执行时呈现出局部性规律，即在一段较短的时间内，程序的执行仅局限于某个部分，相应地，它所访问的存储空间也局限于某个区域。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序执行时，除了少部分的转移和过程调用指令，&lt;strong&gt; 大多数情况下是顺序执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;过程调用&lt;/strong&gt;将会使程序的执行轨迹由一部分内存区域转移到另一部分内存区域&lt;/li&gt;
&lt;li&gt;程序中存在很多&lt;strong&gt;循环&lt;/strong&gt;结构，它们虽然由少数指令构成但&lt;strong&gt;多次执行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;程序中往往包括许多对数据结构的处理，如对数组操作，它们往往&lt;strong&gt;局限在很小的范围内&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;➢ 总的来说，&lt;strong&gt; 局部性&lt;/strong&gt;原理&lt;strong&gt;表现为时间和空间的局部性&lt;/strong&gt;&lt;br&gt;
➢ 时间局部性。如果程序中的某条指令一旦执行则不久后该指令可能再次执行。&lt;br&gt;
➢ 空间局部性。一旦程序访问了某个单元，不久后其附近的存储单元也将被访问&lt;/p&gt;
&lt;h3 id=&#34;42-程序的链接和装入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#42-程序的链接和装入&#34;&gt;#&lt;/a&gt; 4.2 程序的链接和装入&lt;/h3&gt;
&lt;p&gt;高级语言程序必须经过编译、链接才能成为可执行程序。操作系统需要为程序的执行分配内存空间。下面介绍链接程序的功能和程序被装入内存的几种方式。&lt;/p&gt;
&lt;h4 id=&#34;421-程序的链接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#421-程序的链接&#34;&gt;#&lt;/a&gt; 4.2.1 程序的链接&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;链接程序&lt;/strong&gt;要解决的问题是&lt;strong&gt;将编译后的目标模块装配成一个可执行的程序&lt;/strong&gt;。根据链接进行的时间和实现方式的不同，可以把链接分为静态链接和动态链接。&lt;br&gt;
➢ &lt;strong&gt;静态链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在程序运行前，用链接程序将目标模块链接成一个完整的装入模块。运行速度快，占用大&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;动态链接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	将部分目标模块链接推迟到其中函数被调用执行。采用动态链接节省空间，方便开发，速度慢&lt;/p&gt;
&lt;h4 id=&#34;422-程序的装入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#422-程序的装入&#34;&gt;#&lt;/a&gt; 4.2.2 程序的装入&lt;/h4&gt;
&lt;p&gt;​	将源程序变为可执行程序须经过&lt;strong&gt;编译、链接和装入&lt;/strong&gt; 3 个阶段。&lt;/p&gt;
&lt;p&gt;​	可执行程序以&lt;strong&gt;二进制可执行文件&lt;/strong&gt;的形式存储在磁盘上，为执行程序，操作系统需要把程序调入内存。程序装入内存的方式分为&lt;strong&gt;绝对装入、可重定位装入 (静态重定位) 和动态运行时装入&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;绝对装入方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编译程序事先已知程序在内存中的驻留位置，编译时产生物理地址的目标代码。因此装入模块被装入内存后，无需对程序和数据的地址进行修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可重定位装入方式&lt;/strong&gt; (静态重定位)&lt;/p&gt;
&lt;p&gt;​	如果&lt;strong&gt;编译时不知道&lt;/strong&gt;目标程序将驻留在内存的什么位置，则编译时就必须生成可重定位的代码，其中的地址都是&lt;strong&gt;逻辑地址&lt;/strong&gt;（相对地址）, 在程序被装入内存时，再把这些逻辑地址映射为物理地址&lt;/p&gt;
&lt;p&gt;​	在程序装入时对目标程序中的指令和数据地址的修改过程称为&lt;strong&gt;重定位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081202.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081202.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态运行时装入&lt;/strong&gt; (动态重定位)&lt;/p&gt;
&lt;p&gt;​	一个进程在被换出之前所在的内存位置与后来被从外存重新调入时内存位置不同，这种装入方式称为&lt;strong&gt;动态运行时装入&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081203.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081203.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;43-连续分配存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#43-连续分配存储管理方式&#34;&gt;#&lt;/a&gt; 4.3 连续分配存储管理方式&lt;/h3&gt;
&lt;p&gt;连续分配是指操作系统分配内存时，为每个进程分配块物理地址连续的内存空间，连续分配方式有 3 种类型。&lt;/p&gt;
&lt;p&gt;➢ 单一连续区分配方式&lt;br&gt;
➢ 固定分区分配方式&lt;br&gt;
➢ 动态分区分配方式&lt;/p&gt;
&lt;h4 id=&#34;431-单一连续区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#431-单一连续区分配方式&#34;&gt;#&lt;/a&gt; 4.3.1 单一连续区分配方式&lt;/h4&gt;
&lt;p&gt;​	适用于单用户、单任务的操作系统，把内存分为&lt;strong&gt;系统区和用户区&lt;/strong&gt;。系统区用于驻留操作系统，用户区用于分配给用户进程使用。&lt;/p&gt;
&lt;p&gt;​	在单用户、单任务操作系统中较常用的方法是设置&lt;strong&gt;一个基址寄存器和一个界限寄存器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;基址寄存器&lt;/strong&gt;中&lt;strong&gt;存放程序在物理内存中的最小地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;界限寄存器&lt;/strong&gt;中&lt;strong&gt;存放装入用户区程序的地址范围&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	在 CPU 访问内存时，检查 CPU 要访问的内存单元的地址是否大于界限寄存器的值，如果大于，则是非法地址，表示用户进程访存越界，程序执行会被中断。&lt;/p&gt;
&lt;h4 id=&#34;432-固定分区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#432-固定分区分配方式&#34;&gt;#&lt;/a&gt; 4.3.2 固定分区分配方式&lt;/h4&gt;
&lt;p&gt;​	将内存用户区划分成若干个固定大小的区域，每个用户区中驻留一道程序。当有一个空闲分区时，可从外存的后备队列中选择一个大小适当的作业装 入该分区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;划分分区的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分区大小相等&lt;/p&gt;
&lt;p&gt;把用户区划分成大小相等的若干个分区。&lt;/p&gt;
&lt;p&gt;缺点是内存利用率比较低。程序太小浪费空间，程序太大装不下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分区大小不相等&lt;/p&gt;
&lt;p&gt;先划分多个大小不同、数量固定的若干个分区。分配的时候看哪个更接近就分配哪个。减少了浪费。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081204.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081204.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;433-动态分区分配方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#433-动态分区分配方式&#34;&gt;#&lt;/a&gt; 4.3.3 动态分区分配方式&lt;/h4&gt;
&lt;p&gt;​	系统初始只有一个大空闲区，根据进程需要的空间大小分配内存。内存中&lt;strong&gt;分区的大小和数量是变化的&lt;/strong&gt;。动态分区方式比固定分区方式&lt;strong&gt;显著地提高了内存利用率&lt;/strong&gt;。系统维护一个记录当前空闲分区情况的数据结构，&lt;strong&gt;当进程请求内存时，系统从所有空闲区中找到大小合适的空闲分区进行分配&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	常用的数据结构有&lt;strong&gt;空闲分区表&lt;/strong&gt;和&lt;strong&gt;空闲分区链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;空闲分区表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081205.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081205.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	缺点：设置太多表项会浪费内存空间；设置太少无法记录所有空闲分区情况&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;空闲分区链&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	可以&lt;strong&gt;动态地为每一个空闲分区建立一 个结点&lt;/strong&gt;，每个结点包括分区大小、分区起始地址、指向前一个空闲分区结点的指针，以及指向后一个空闲分区结点的指针。空闲分区链中的&lt;strong&gt;每个结点占用的内存可以动态分配动态回收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;➢ &lt;strong&gt;动态分区分配算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	当进程需要内存空间时，操作系统通过执行动态分区分配算法从多个空闲分区中选定一个合适的分区分配给进程。&lt;/p&gt;
&lt;p&gt;​	内存分配功能由内存分配程序完成。内存不再需要时，由系统调用内存回收程序回收原来被占的内存。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首次适应算法 FF (First Fit)&lt;/p&gt;
&lt;p&gt;​	要求空闲分区链以&lt;strong&gt;地址递增&lt;/strong&gt;的顺序链接。在内存分配时，从链首开始顺序查找，直至找到一个能满足进程大小要求的空闲分区为止。余下的空闲分区仍留在空闲链中。&lt;/p&gt;
&lt;p&gt;​	该算法先分配低地址部分的内存空间，容易使低地址部分留下小分区，而高地址部分大空闲区较多。当进程请求大空间时，要找到合适的空闲分区，&lt;strong&gt; 时间开销大&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环首次适应算法 NF (Next Fit)&lt;/p&gt;
&lt;p&gt;​	为进程分配内存空间时，&lt;strong&gt; 从上次找到的空闲分区的下一个空闲分区开始查找直到找到第个能满足要求的空闲分区&lt;/strong&gt;，并从中划出一块与请求的大小相等的内存空间分配给进程。&lt;/p&gt;
&lt;p&gt;​	为实现该算法，应设置一个起始查找指针，以指示下一次起始查找的空闲分区，并采用&lt;strong&gt;循环查找方式&lt;/strong&gt;。循环首次适应算法的优点是:&lt;strong&gt; 空闲区分布均匀，查找开销较小。缺点是容易使系统缺乏大空闲区&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最佳适应算法 BF (Best Fit)&lt;/p&gt;
&lt;p&gt;​	该算法每次分配内存，把大小与进程所请求的&lt;strong&gt;内存大小最接近分配给进程&lt;/strong&gt;。该算法要求将所有的空闲区按分区大小递增顺序形成一个空闲区链。&lt;/p&gt;
&lt;p&gt;​	优点：避免大材小用，提高内存利用率，但容易留下难以利用的小空闲区&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;外部碎片 / 外碎片：低地址部分的空闲分区反复被划分，可能留下许多很小的空闲分区&lt;br&gt;
内部碎片 / 内碎片：分配给进程的分区若大于进程请求的分区，分区内会有部分未利用的空间&lt;/p&gt;
&lt;h3 id=&#34;44-基本本页存储管理方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#44-基本本页存储管理方式&#34;&gt;#&lt;/a&gt; 4.4 基本本页存储管理方式&lt;/h3&gt;
&lt;p&gt;➢ &lt;strong&gt;离散内存管理方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		把进程&lt;strong&gt;离散地&lt;/strong&gt;存储在内存中物理地址不连续的区域中&lt;/p&gt;
&lt;p&gt;​	根据离散内存管理分配内存空间的基本单位不同，分为 3 种管理方式:&lt;strong&gt; 分页存储管理、分段存储管理和段页式存储管理&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;441-分页存储管理的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#441-分页存储管理的基本概念&#34;&gt;#&lt;/a&gt; 4.4.1 分页存储管理的基本概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基础概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;页（Page）：将一个进程的&lt;strong&gt;逻辑地址空间&lt;/strong&gt;分成多个大小相同的片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页框 / 页帧：将&lt;strong&gt;物理内存空间&lt;/strong&gt;分成与页大小相同的多个存储块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页存储：为进程分配内存时，&lt;strong&gt;以页框为单位&lt;/strong&gt;将进程的若干个页&lt;strong&gt;装入多个不相邻的页框中&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页内碎片：进程的最后一页装不满一个页框时，剩下的碎片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页表：&lt;strong&gt;系统为进程建立的数据结构，实现从页号到页框号的映射&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081206.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081206.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;45-基于分页的虚拟存储系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#45-基于分页的虚拟存储系统&#34;&gt;#&lt;/a&gt; 4.5 基于分页的虚拟存储系统&lt;/h3&gt;
&lt;p&gt;​	&lt;strong&gt;虚拟存储器&lt;/strong&gt;是指具有&lt;strong&gt;请求调入功能和置换功能&lt;/strong&gt;，能从逻辑上对内存容量进行扩充的一种存储器系统。在虚拟存储器系统中，&lt;strong&gt; 进程无需全部装入&lt;/strong&gt;，只要装入一部分即可运行。&lt;/p&gt;
&lt;p&gt;​	虚拟存储技术实现的思想：先将进程一部分装入内存，其余部分需要时再请求系统装入，这就是请求调入。&lt;/p&gt;
&lt;p&gt;​	置换：如果请求调入时，没有足够的内存，则由操作系统选择一部分内存中的内容换到外存。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高内存利用率；&lt;/li&gt;
&lt;li&gt;提高多道程序度；&lt;/li&gt;
&lt;li&gt;把逻辑地址空间和物理地址空间分开，程序员不再关心物理内存的容量对编程的限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虚拟存储系统具有以下几个主要特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;离散性&lt;/p&gt;
&lt;p&gt;指进程可以分散地存储在物理内存中。分页、分段和段页式存储都属于离散的内存管理方式。离散性是实现虚拟存储管理的基础。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多次性&lt;/p&gt;
&lt;p&gt;指不必把进程一 - 次性全部装入内存，可分多次装入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对换性&lt;/p&gt;
&lt;p&gt;指在内存中的进程可以换出，以腾出内存空间换入外存中的进程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟性&lt;/p&gt;
&lt;p&gt;把逻辑地址空间和物理地址空间分开，程序员不再关心物理内存的容量对编程的限制。虚拟性是实现虚拟存储系统的最重要目标。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	&lt;strong&gt;请求分页系统&lt;/strong&gt;是&lt;strong&gt;最基本、最常用的虚拟存储系统&lt;/strong&gt;的实现方式。其基本原理是，把进程的逻辑地址空间分成大小相同的页，操作系统创建进程时只把进程的一部分页调入内存。进程运行过程中访问内存、若访问页不在内存中，则&lt;strong&gt;产生一个缺页异常信号&lt;/strong&gt;，系统响应缺页异常，&lt;strong&gt; 请求调入缺页&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	若调入缺页时内存已满，则需要先从内存中选择一个或若千个页换出到外存空间，以腾出内存空间容纳请求调入的缺页。&lt;/p&gt;
&lt;h4 id=&#34;451-请求分页中的硬件支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#451-请求分页中的硬件支持&#34;&gt;#&lt;/a&gt; 4.5.1 请求分页中的硬件支持&lt;/h4&gt;
&lt;p&gt;​	为了实现请求分页，需要特殊的页表 (相对基本分页而言)、缺页异常机构和支持请求分页的地址变换机构。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;页表&lt;/p&gt;
&lt;p&gt;是支持请求分页系统最重要的数据结构，其作用是记录描述页的各种数据，包括在实现逻辑地址到物理地址映射时需要的页号与页框号的对应关系。&lt;/p&gt;
&lt;p&gt;​	除了页号和页框号之外，页表中增加了请求换入和页置换时需要的数据。&lt;/p&gt;
&lt;p&gt;​	在支持请求分页的系统中一般包含以下基本字段:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081601.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081601.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	页框号：存放页所在的页框号。&lt;/p&gt;
&lt;p&gt;​	状态位 P : 标识页是否在内存中。可规定 0 不在，1 在。&lt;/p&gt;
&lt;p&gt;​	访问字段 A : 用于记录页最近被访问的情况。系统总是希望根据 A 的值把最近、最久未访问的页换出到外存。&lt;/p&gt;
&lt;p&gt;​	修改位 M : 标识页最近是否被修改过。&lt;/p&gt;
&lt;p&gt;​	保护位：标识页的访问权限，如 1 表示可读可写 0 表示只读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺页异常机构&lt;/p&gt;
&lt;p&gt;​	主要作用是在访问内存过程中发现缺页时产生缺页异常信息，使 CPU 中断当前控制流的执行，转去执行操作系统的缺页异常处理程序，完成请求调页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址变换&lt;/p&gt;
&lt;p&gt;请求分页系统中的地址变化过程如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;由分页地址变换机构从逻辑地址中分离出页号和页内偏移地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以页号为索引查找快表，若快表中有该页的页表项，则读出页框号，计算物理地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若快表中无该页信息，转到内存页表中查找。若页表中的状态位 P 显示该页调入内存，则从相应的页表项读出页所在的页框号，并计算物理地址，然后把该页表项写入快表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若该页尚末调入内存，则产生缺页异常请求操作系统从外存中把该页调入内存，然后修改页表，重新执行被中断的指令。&lt;/p&gt;
&lt;p&gt;​								请求分页中的地址变换过程，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081602.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081602.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;452-页分配策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#452-页分配策略&#34;&gt;#&lt;/a&gt; 4.5.2 页分配策略&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最少页框数&lt;/p&gt;
&lt;p&gt;指能保证进程正常运行所需要的最少的页框数。为了保证进程顺利执行，操作系统为进程分配的初始页数应该大于或等于最少页框数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;453-页调入策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#453-页调入策略&#34;&gt;#&lt;/a&gt; 4.5.3 页调入策略&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;何时调入页&lt;br&gt;
大多数系统都采用&lt;strong&gt;预先凋入页&lt;/strong&gt;的策略，将预计不久之后会被访问的页预先调入内存，而不是缺哪一页时再调入该页。&lt;/p&gt;
&lt;p&gt;​	在实际系统中，通常是在&lt;strong&gt;调入缺页时，把与所缺页相邻的若千页也调入内存&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从何处调入页&lt;/p&gt;
&lt;p&gt;当系统拥有足够的对换空间时，若发生缺页请求则从对换区调入页。从对换区调入页比从文件区调入页的速度快。对换区中的页是进程运行前从文件区复制到对换区的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;454-页置换算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#454-页置换算法&#34;&gt;#&lt;/a&gt; 4.5.4 页置换算法&lt;/h4&gt;
&lt;p&gt;​	页置换算法是从内存中选择换出页的算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最佳置换算法和先进先出置换算法&lt;/p&gt;
&lt;p&gt;( 1 )&lt;strong&gt; 最佳置换算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	选择以后永远不会被访问的页或者在未来最长时间内不再被访问的页作为换出页。该算法主要用于&lt;strong&gt;理论研究&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;( 2 )&lt;strong&gt; 先进先出页置换算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	为每个页记录该项调入内存的时间，当选择换出页时，选择进入内存时间最早的页。&lt;/p&gt;
&lt;p&gt;​	实现简单，但&lt;strong&gt;效率低&lt;/strong&gt;，会导致较高的缺页率，有的页刚被换出，可能又要立即被访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最近最久未使用 LRU 置换算法&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;选择最近最久末使用的页换出&lt;/strong&gt;。同样的页引用序列，LRU 算法&lt;strong&gt;置换次数&lt;/strong&gt;较先进先出算法少，性能较好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他置换算法&lt;/p&gt;
&lt;p&gt;​	附加引用位算法、简单 Clock 置换算法、 改进型 Clock 算法、最少使用置换算法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;综合题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#综合题&#34;&gt;#&lt;/a&gt; 综合题&lt;/h4&gt;
&lt;p&gt;[答案] 先进先出页置换算法&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081603.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081603.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;455-请求分页系统的性能分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#455-请求分页系统的性能分析&#34;&gt;#&lt;/a&gt; 4.5.5 请求分页系统的性能分析&lt;/h4&gt;
&lt;p&gt;请求调入和置换技术都是以时间换空间的技术。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;缺页率对有效访问时间的影响&lt;/p&gt;
&lt;p&gt;​	进程执行中访存发生缺页时，需要请求从外存调入缺页。如果内存中没有空闲页框，还需要进行页置换，调入缺页后，指令需要重新执行。因此，一旦发生缺页，进程会存在因为访存而带来的时间延迟。&lt;/p&gt;
&lt;p&gt;​	有效访问时间正比于缺页率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作集&lt;/p&gt;
&lt;p&gt;​	引入&lt;strong&gt;工作集机制&lt;/strong&gt;是为了&lt;strong&gt;能有效降低缺页率&lt;/strong&gt;，从而提高访存的时间效率。程序运行时&lt;strong&gt;对页的访问是不均匀的&lt;/strong&gt;，往往在&lt;strong&gt;某段时间内集中于访问某些页&lt;/strong&gt;。若能将&lt;strong&gt;某段时间间隔内要访问的页提前调入内存&lt;/strong&gt;，将会大大降低缺页率，从而减少置换次数，提高 CPU 的利用率。&lt;strong&gt;工作集&lt;/strong&gt;就是&lt;strong&gt;在某段时间间隔内，进程实际要访问的页的集合&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抖动产生的原因和预防方法&lt;/p&gt;
&lt;p&gt;​	多道程序度太高，使运行进程的大部分时间都用于进行页的换入、换出，而几乎不能完成任何有效工作的状态称为抖动。&lt;br&gt;
​	引起&lt;strong&gt;抖动的原因&lt;/strong&gt;是&lt;strong&gt;系统中的进程数量太多，每个进程能分配到的页框态少&lt;/strong&gt;，以至于进程运行过程中频繁请求调页。&lt;/p&gt;
&lt;p&gt;抖动的预防:&lt;br&gt;
( 1 )&lt;strong&gt; 采取局部置换策略&lt;/strong&gt;。仅在进程自己的内存空间范围内置换页。&lt;br&gt;
(2) 在 CPU 调度程序中&lt;strong&gt;引入工作集&lt;/strong&gt;算法。&lt;br&gt;
( 3 )&lt;strong&gt; 挂起若干进程&lt;/strong&gt;。腾出进程占用的空间。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;46-分段存储管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#46-分段存储管理&#34;&gt;#&lt;/a&gt; 4.6 分段存储管理&lt;/h3&gt;
&lt;h4 id=&#34;461-分段机制的引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#461-分段机制的引入&#34;&gt;#&lt;/a&gt; 4.6.1 分段机制的引入&lt;/h4&gt;
&lt;p&gt;​	在分页存储管理方式中，逻辑地址是维的，一个进程的逻辑地址形成个地址空间。 这种逻辑空间的使用方式对于程序员来说很不方便，分段能为进程提供多个地址空间，把逻辑上关联的部分放在一个地址空间中逻辑上没有关联也没有共同特征的部分放在不同的地址空间中。这样不仅方便用户编程，而且能很好地解决部分存储空间动态增长、信息共享和信息保护问题。&lt;/p&gt;
&lt;p&gt;​	把分别存放逻辑上相关的信息、相互独立的逻辑地址空间称为一个段，每个段由一个从 0 到最大线性地址的逻辑地址空间构成。&lt;/p&gt;
&lt;p&gt;​	各个段的长度可以是 0 到最大值之间的任何一个值不同段的长度可以不相同，段的长度在进程运行期间可以改变。&lt;/p&gt;
&lt;p&gt;​	在使用分段存储管理的系统中，程序员使用二维的逻辑地址，一个数用来表示段，另一个数用来表示段内偏移。段是一个逻辑实体，程序员可以通过使用二维地址来访问不同的逻辑段。&lt;/p&gt;
&lt;p&gt;​	一个段可能包括一个过程，或者一个数组、一个堆栈、一些数值变量，但是一般不会同时包含多种不同的内容。&lt;/p&gt;
&lt;h4 id=&#34;462-分段系统的基本原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#462-分段系统的基本原理&#34;&gt;#&lt;/a&gt; 4.6.2 分段系统的基本原理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分段&lt;/p&gt;
&lt;p&gt;​	在分段的存储管理方式中，进程的地址空间被划分成若千个段。每个段定义了一组逻辑信息，每个段的大小由相应的逻辑信息组的长度确定，段的大小不一样 **, 每个段的逻辑地址从 0 开始，采用一段连续的地址空间 **。系统为每个段分配一个连续的物理内存区域，各个不同的段&lt;strong&gt;可以离散地放入物理内存不同的区域&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段的逻辑地址结构&lt;br&gt;
分段机制的逻辑地址是二维的，由段号和段内地址组成。&lt;/p&gt;
&lt;p&gt;32 位系统中分段的地址形式为:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081604.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081604.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;段表&lt;/p&gt;
&lt;p&gt;​	段表是&lt;strong&gt;由操作系统维护&lt;/strong&gt;的用于支持分段存储管理地址映射的&lt;strong&gt;数据结构&lt;/strong&gt;。通常，&lt;strong&gt; 每个进程有一个段表&lt;/strong&gt;，段表由段表项构成。每个段表项包含&lt;strong&gt;段号、段基址&lt;/strong&gt; (段的起始地址) 和&lt;strong&gt;段长&lt;/strong&gt; (段大小) 3 个部分。一个进程可能包含若干个段，每一个段在段表中有一个段表项与之对应。根据段表可以知道一个段在物理内存中的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分段系统的地址变换&lt;/p&gt;
&lt;p&gt;​	逻辑地址由段号 s 和段内偏移 d 构成。&lt;br&gt;
​	已知逻辑单元的地址为 s:d， 求物理地址的步骤为:&lt;br&gt;
​	(1) 以 s 为索引，从段表中找到段号为 s 的段表项。&lt;br&gt;
​	(2) 从找到的段表项中读出 s 段的基地址和段大小。&lt;br&gt;
​	(3) 如果&lt;strong&gt; d &amp;lt; = 段大小&lt;/strong&gt;，则将&lt;strong&gt;段基址与段内偏移 d 相加，得到与逻辑单元 s:d 对应的物理单元地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分页和分段的主要区别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页是按物理单位划分的，分页的引入是为了提高内存的利用率和支持虚拟存储。而段是按逻辑单位划分的，一个段含有一 - 组意义相对完整的信息。引入分段的目的是为了方便程序员编程。&lt;/li&gt;
&lt;li&gt;页的大小是固定的，而段的大小不固定，取决于用户编写的程序和编译器。&lt;/li&gt;
&lt;li&gt;分页的地址空间是一维的，程序员给出的地址只是一个助记符，已知的逻辑地址是一个整数。分段的地址空间是二维的，程序员在标识一个逻辑地址时需要给出两个数：一个是段号，一个是段内偏移。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;463-段页式存储管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#463-段页式存储管理&#34;&gt;#&lt;/a&gt; 4.6.3 段页式存储管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;段页式存储管理的基本原理&lt;/p&gt;
&lt;p&gt;​	在段页式存储管理系统中，将用户进程的逻辑空间先划分成若干个段，每个段再划分成若千个页。进程以页为单位在物理内存中离散存放，每个段中被离散存放的页具有逻辑相关性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;地址变换过程&lt;/p&gt;
&lt;p&gt;​	在段页式存储管理系统中，逻辑地址与分段系统的逻辑地址相同，由段号 s 和段内地址 d 构成，地址变换过程如下&lt;br&gt;
 (1) 以段号 s 作索引，找到段 s 的段表项，得到该段页表的起始地址。&lt;br&gt;
(2) 通过分页机制从&lt;strong&gt;段内偏移 d 中分离出页号 P 和页内偏移 W&lt;/strong&gt;。&lt;br&gt;
(3) 以段内页号&lt;strong&gt; P 作索引&lt;/strong&gt;，从段 s 的页表中&lt;strong&gt;搜索&lt;/strong&gt;页号&lt;strong&gt; P&lt;/strong&gt; 对应的&lt;strong&gt;页表项&lt;/strong&gt;。&lt;br&gt;
(4) 从页表项中&lt;strong&gt;得到&lt;/strong&gt;页所在的&lt;strong&gt;页框号&lt;/strong&gt;。&lt;br&gt;
(5) 由&lt;strong&gt;页框号&lt;/strong&gt;与&lt;strong&gt;页内偏移 W&lt;/strong&gt; 得到某逻辑地址对应的物理地址。&lt;/p&gt;
&lt;p&gt;物理地址 = 页框号 * 页框大小 + 页内偏移 W&lt;br&gt;
 采用段页式存储管理的好处是，程序员可以使用分段的逻辑地址，而实际上进程却以页为单位存放于物理内存中。段页式系统的地址变换如下图。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081607.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081607.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;464-综合题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#464-综合题&#34;&gt;#&lt;/a&gt; 4.6.4 综合题&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081605.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081605.png&#34; class=&#34;&#34;&gt;&lt;br&gt;
&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081606.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081606.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;47-linux的伙伴系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#47-linux的伙伴系统&#34;&gt;#&lt;/a&gt; 4.7 Linux 的伙伴系统&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第五章文件管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五章文件管理&#34;&gt;#&lt;/a&gt; 第五章：文件管理&lt;/h2&gt;
&lt;h3 id=&#34;考试重点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试重点-2&#34;&gt;#&lt;/a&gt; 考试重点&lt;/h3&gt;
&lt;p&gt;文件结构、类型、存取、属性 (选择、填空、简答）&lt;br&gt;
目录结构、路径名 (选择、填空、简答)&lt;br&gt;
 实现文件、实现目录 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;本章近 3 年分值: 14~19 分&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统中处理文件的部分称为文件系统&lt;/strong&gt;，文件系统包括了文件及管理文件的软件集合。&lt;/p&gt;
&lt;h3 id=&#34;51-文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#51-文件&#34;&gt;#&lt;/a&gt; 5.1 文件&lt;/h3&gt;
&lt;h4 id=&#34;511-文件命名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#511-文件命名&#34;&gt;#&lt;/a&gt; 5.1.1 文件命名&lt;/h4&gt;
&lt;p&gt;​	&lt;strong&gt;文件名&lt;/strong&gt;向用户提供了简单、直观的文件&lt;strong&gt;访问方式&lt;/strong&gt;。&lt;strong&gt;按名存取&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	所有操作系统都支持&lt;strong&gt; 1 ~8 个字母组成的字符串&lt;/strong&gt;作为文件名。许多操作系统支持&lt;strong&gt;长达 255 个字符&lt;/strong&gt;的文件名。&lt;/p&gt;
&lt;p&gt;​	UNIX 文件系统区分大小写，MS-DOS 系统不区分。&lt;/p&gt;
&lt;h4 id=&#34;512-文件结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#512-文件结构&#34;&gt;#&lt;/a&gt; 5.1.2 文件结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无结构字节序列&lt;/p&gt;
&lt;p&gt;也称为流式文件，如程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定长度记录序列&lt;/p&gt;
&lt;p&gt;构成文件的基本单位是具有固定长度的记录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树形结构&lt;/p&gt;
&lt;p&gt;文件由一棵记录树构成，记录长度不固定，在记录的固定位置包含一个关键字域，记录树按该域排序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;513-文件类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#513-文件类型&#34;&gt;#&lt;/a&gt; 5.1.3 文件类型&lt;/h4&gt;
&lt;p&gt;​	一般分为 ASCII 文件和 2 进制文件。ASCI 文件。由多行正文组成，各行的长度不必相同。可以显示和打印，也可以用通常的文本编辑器进行编辑。&lt;/p&gt;
&lt;p&gt;​	二进制文件。具有一定的内部结构，如可执行的.exe 文件。用通常的文本编辑器不能直接显示或打印。&lt;/p&gt;
&lt;h4 id=&#34;514-文件存取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#514-文件存取&#34;&gt;#&lt;/a&gt; 5.1.4 文件存取&lt;/h4&gt;
&lt;p&gt;​	文件存取方式有两种：顺序存取和随机存取。&lt;/p&gt;
&lt;p&gt;​	顺序存取：进程从文件开始处读取文件中的所有字节或记录，不能掉过某些内容（磁带）&lt;/p&gt;
&lt;p&gt;​	随机存取：又称直接存取，可以任意顺序读取文件中的字节或记录（磁盘）&lt;/p&gt;
&lt;h4 id=&#34;515-文件属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#515-文件属性&#34;&gt;#&lt;/a&gt; 5.1.5 文件属性&lt;/h4&gt;
&lt;p&gt;​	文件的创建日期、文件大小和修改时间等，这些附加信息称为文件属性。一些常用的文件属性有：口令、创建者、所有者，只读标志、隐藏标志、大小、类型等。&lt;/p&gt;
&lt;h4 id=&#34;516-文件操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#516-文件操作&#34;&gt;#&lt;/a&gt; 5.1.6 文件操作&lt;/h4&gt;
&lt;p&gt;CREATE：创建文件，并设置文件的一些属性。&lt;/p&gt;
&lt;p&gt;DELETE：删除文件并释放磁盘空间。&lt;/p&gt;
&lt;p&gt;OPEN：使用文件之前，必须先打开文件。&lt;/p&gt;
&lt;p&gt;CLOSE：存取结束后，关闭文件以释放内存空间。&lt;/p&gt;
&lt;p&gt;READ：从文件中读取数据。&lt;/p&gt;
&lt;p&gt;WRITE：往文件中写数据。&lt;/p&gt;
&lt;p&gt;APPEND：在文件末尾添加数据。&lt;/p&gt;
&lt;p&gt;SEEK：对于随机存取文件，要指定从何处开始取数据。&lt;/p&gt;
&lt;p&gt;GETAT TRIBUTES：用于获取文件的属性。&lt;/p&gt;
&lt;p&gt;SETAT TRIBUTES：用于修改文件的属性。&lt;/p&gt;
&lt;p&gt;RENAME：修改已有文件的文件名。&lt;/p&gt;
&lt;h3 id=&#34;52-目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#52-目录&#34;&gt;#&lt;/a&gt; 5.2 目录&lt;/h3&gt;
&lt;p&gt;​	文件系统通常提供目录或文件夹用于记录文件很多系统中目录本身也是文件，目录是文件系统中实现按名访问文件的重要数据结构。&lt;/p&gt;
&lt;h4 id=&#34;521-层次目录系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#521-层次目录系统&#34;&gt;#&lt;/a&gt; 5.2.1 层次目录系统&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;目录文件的结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目录结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单层目录&lt;/p&gt;
&lt;p&gt;​	也被称为根目录，在整个系统中设置一张线性目录表，表中包括了所有文件的描述信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两级目录&lt;/p&gt;
&lt;p&gt;​	第一级为&lt;strong&gt;主目录&lt;/strong&gt;。第二级为&lt;strong&gt;用户目录&lt;/strong&gt;。两级目录解决了文件重名和共享问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;树形目录&lt;/p&gt;
&lt;p&gt;​	也称多级目录，最高层为根目录，最底层为文件。用户可以创建任意数量的&lt;strong&gt;子目录&lt;/strong&gt;。优点：便于文件的分类，层次结构清晰，便于管理和保护，解决了重名问题，查找速度快。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;522-路径名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#522-路径名&#34;&gt;#&lt;/a&gt; 5.2.2 路径名&lt;/h4&gt;
&lt;p&gt;​	常用的方法有两种：绝对路径名和相对路径名。&lt;/p&gt;
&lt;p&gt;​	绝对路径名由从根目录到文件的路径组成。绝对路径名总是从根目录开始，并且是唯一的。在 Windows 系统中，路径各部分之间用 &amp;quot;&amp;quot; 分隔，如：C:\program\practice\test&lt;/p&gt;
&lt;p&gt;​	相对路径名。当一个文件系统的目录包含很多级时，可以允许用户指定一个目录作为当前的工作目录。所有的不从根目录开始的路径名都是相对于工作目录的。&lt;/p&gt;
&lt;h3 id=&#34;53-文件系统的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#53-文件系统的实现&#34;&gt;#&lt;/a&gt; 5.3 文件系统的实现&lt;/h3&gt;
&lt;h4 id=&#34;531-实现文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#531-实现文件&#34;&gt;#&lt;/a&gt; 5.3.1 实现文件&lt;/h4&gt;
&lt;p&gt;​	将分配给文件的&lt;strong&gt;连续扇区构成的磁盘块称为簇&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;连续分配&lt;/p&gt;
&lt;p&gt;​	把每个文件作为一连串连续数据块存储在磁盘上。每个文件都从新的簇开始存放。&lt;/p&gt;
&lt;p&gt;​	优点：实现简单，读操作性能好。&lt;/p&gt;
&lt;p&gt;​	缺点：随着时间的推移，碎片太多，难以利用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用磁盘链接表的分配&lt;/p&gt;
&lt;p&gt;​	该方法为每个文件构造簇的链接表，每个簇前几个字节用于存放下一个簇的簇号。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081701.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081701.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​	优点：充分利用每个簇，不会浪费存储空间，管理简单&lt;/p&gt;
&lt;p&gt;​	缺点：随机存取相当缓慢，要获取文件的第 n 块都要从头开始读取前面的 n- 1 块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用内存的链接表分配&lt;/p&gt;
&lt;p&gt;​	该方法是&lt;strong&gt;将&lt;/strong&gt;文件所在的磁盘的&lt;strong&gt;簇号存放在内存的表中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	缺点：必须把整个表都存放在内存中，不适合大容量磁盘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;i - 结点&lt;/p&gt;
&lt;p&gt;​	该方法为每个文件赋予一个被称为 i 结点的数据结构，其中列出了文件属性和文件块的磁盘地址。给定一个文件的结点，就有可能找到文件的所有块。&lt;/p&gt;
&lt;p&gt;​	当访问文件时，系统先根据文件名搜索文件所在的目录文件，从该文件对应的目录项中找到文件的结点号，根据 i 结点号从磁盘中将结点信息读入内存，文件在磁盘中的地址信息都存放在 i 结点中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;532-实现目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#532-实现目录&#34;&gt;#&lt;/a&gt; 5.3.2 实现目录&lt;/h4&gt;
&lt;p&gt;​	打开文件时，操作系统利用用户给出的路径名找到相应的目录项，目录项中提供了查找文件簇所需要的信息。（略）&lt;/p&gt;
&lt;h4 id=&#34;533-磁盘空间管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#533-磁盘空间管理&#34;&gt;#&lt;/a&gt; 5.3.3 磁盘空间管理&lt;/h4&gt;
&lt;p&gt;​	磁盘空间管理是文件系统的重要功能，包括记录空闲磁盘信息、设计文件的存储方式，以及规定文件系统的簇大小等内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;簇大小&lt;/p&gt;
&lt;p&gt;​	文件系统为文件分配磁盘空间是以簇为单位。簇的大小是&lt;strong&gt; 2 的整数次幂&lt;/strong&gt;个连续的扇区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;记录空闲块&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;空闲簇链接表&lt;/p&gt;
&lt;p&gt;​	用一些空闲簇存放空闲簇的簇号。一个簇存放尽可能多的空闲簇的簇号，并专留出最后几个字节存放指向下一个存放空闲簇的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位图&lt;/p&gt;
&lt;p&gt;​	用 n 位位图对应磁盘的 n 个簇，在位图中，空闲簇用 1 表示，已分配簇用 0 表示。每个簇只用一个二级制位标识，所需空间少。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第六章设备管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六章设备管理&#34;&gt;#&lt;/a&gt; 第六章：设备管理&lt;/h2&gt;
&lt;h3 id=&#34;考试重点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#考试重点-3&#34;&gt;#&lt;/a&gt; 考试重点&lt;/h3&gt;
&lt;p&gt;I/O 系统的结构、I/O 设备分类、设备控制器 (选择、填空、简答)&lt;br&gt;
 轮询、中断、DMA 控制方式 (选择、填空、简答)&lt;br&gt;
 缓冲管理 (选择、填空、简答)&lt;br&gt;
 设备分配、独立性、SPOOLing 技术 (选择、 填空、简答)&lt;br&gt;
 I/O 软件管理 (选择、填空、简答)&lt;br&gt;
 磁盘结构 (选择、填空、简答)&lt;br&gt;
 磁盘调度 (选择、填空、简答、综合)&lt;/p&gt;
&lt;p&gt;本章近 3 年分值: 12~20 分&lt;/p&gt;
&lt;h3 id=&#34;61-io系统的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#61-io系统的组成&#34;&gt;#&lt;/a&gt; 6.1 I/O 系统的组成&lt;/h3&gt;
&lt;h4 id=&#34;611-io系统的组成的概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#611-io系统的组成的概述&#34;&gt;#&lt;/a&gt; 6.1.1 I/O 系统的组成的概述&lt;/h4&gt;
&lt;p&gt;I/O 设备包括：I/O 设备、设备控制器、通道。&lt;/p&gt;
&lt;h4 id=&#34;612-io系统的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#612-io系统的结构&#34;&gt;#&lt;/a&gt; 6.1.2 I/O 系统的结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;微机 I/O 系统&lt;/p&gt;
&lt;p&gt;CPU 不能直接跟 I/O 设备交换，需要设备控制器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主机 I/O 系统&lt;/p&gt;
&lt;p&gt;I/O 系统采用四级结构：主机、通道、控制器、设备。一个通道可控制多个控制器，一个控制器可控制多个设备&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081801.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081801.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;613-io设备的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#613-io设备的分类&#34;&gt;#&lt;/a&gt; 6.1.3 I/O 设备的分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按传输速率&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;低速设备：键盘、鼠标&lt;/li&gt;
&lt;li&gt;中速设备：打印机&lt;/li&gt;
&lt;li&gt;高速设备：磁带机、磁盘机、光盘机&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按信息交换的单位&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;块设备&lt;/p&gt;
&lt;p&gt;数据存储以数据块为单位，块大小固定，一次只传输一块，通过块号访问数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符设备&lt;/p&gt;
&lt;p&gt;传输字节流；打印机、鼠标都是&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按设备的共享属性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独占设备&lt;/p&gt;
&lt;p&gt;必须作为临界资源以互斥方式访问，在当前进程未使用完，其他进程不可使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享设备&lt;/p&gt;
&lt;p&gt;允许多个进程同时访问，但同一时刻只能单个进程对磁盘读写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟设备&lt;/p&gt;
&lt;p&gt;将物理设备虚拟成若干个逻辑设备&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;614-设备控制器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#614-设备控制器&#34;&gt;#&lt;/a&gt; 6.1.4 设备控制器&lt;/h4&gt;
&lt;p&gt;CPU 与 I/O 设备的&lt;strong&gt;接口&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;接收和识别&lt;/li&gt;
&lt;li&gt;数据交换
&lt;ol&gt;
&lt;li&gt;将驱动器的比特流汇聚在控制器的缓冲区，形成字节块&lt;/li&gt;
&lt;li&gt;在 CPU 和控制器双向传输&lt;/li&gt;
&lt;li&gt;将控制器的命令传给设备控制器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;设备状态的了解和报告&lt;/li&gt;
&lt;li&gt;地址识别&lt;/li&gt;
&lt;li&gt;数据缓存&lt;/li&gt;
&lt;li&gt;差错控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组成
&lt;ol&gt;
&lt;li&gt;与处理机的接口：数据线、控制线、地址线&lt;/li&gt;
&lt;li&gt;与设备的接口：存在三类信号，分别是数据、状态、控制信号&lt;/li&gt;
&lt;li&gt;I/O 逻辑：指令译码器、地址译码器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081802.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081802.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;614-io通道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#614-io通道&#34;&gt;#&lt;/a&gt; 6.1.4 I/O 通道&lt;/h4&gt;
&lt;p&gt;​	用于大型主机系统控制 I/O 设别，替代主机的设备控制器，提高 CPU 利用率和系统吞吐量&lt;/p&gt;
&lt;h3 id=&#34;62-io控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#62-io控制方式&#34;&gt;#&lt;/a&gt; 6.2 I/O 控制方式&lt;/h3&gt;
&lt;h4 id=&#34;621-轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#621-轮询&#34;&gt;#&lt;/a&gt; 6.2.1 轮询&lt;/h4&gt;
&lt;p&gt;​	在对设别发出 I/O 指令前，反复确认设备控制器状态寄存器的忙 / 闲标志。若空闲则发指令&lt;/p&gt;
&lt;p&gt;​	缺点：极大浪费 CPU，影响系统的吞吐量&lt;/p&gt;
&lt;h4 id=&#34;622-中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#622-中断&#34;&gt;#&lt;/a&gt; 6.2.2 中断&lt;/h4&gt;
&lt;p&gt;​	当 I/O 设备忙，进程阻塞；工作完毕之后发出中断请求信号，CPU 响应&lt;/p&gt;
&lt;p&gt;​	优点：使 CPU 与 I/O 设备在某些时间段上并行时间，提高 CPU 利用率和系统吞吐量&lt;/p&gt;
&lt;h4 id=&#34;623-dma控制方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#623-dma控制方式&#34;&gt;#&lt;/a&gt; 6.2.3 DMA 控制方式&lt;/h4&gt;
&lt;p&gt;​	为提高 I/O 的速度和 CPU 与 I/O 的并行速度。&lt;/p&gt;
&lt;p&gt;​	逻辑组成包括三部分：主机与 DMA 接口、DMA 与设备的接口、I/O 控制逻辑。&lt;/p&gt;
&lt;p&gt;​	为了主机与设备管理器成块数据传送，设计了四类寄存器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;命令 / 状态寄存器 CR：接受 CPU 的 I/O 命令和有关控制信息、设别状态&lt;/li&gt;
&lt;li&gt;内存地址寄存器 MAR：存放内存地址&lt;/li&gt;
&lt;li&gt;数据计数器 DC：指示 DMA，本次向 CPU 发中断信号要读或写数据的次数&lt;/li&gt;
&lt;li&gt;数据寄存器 DR：暂存 DMA 传输中输入输出的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081803.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21081803.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;63-缓冲管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#63-缓冲管理&#34;&gt;#&lt;/a&gt; 6.3 缓冲管理&lt;/h3&gt;
&lt;h4 id=&#34;缓冲管理的概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓冲管理的概述&#34;&gt;#&lt;/a&gt; 缓冲管理的概述&lt;/h4&gt;
&lt;p&gt;​	用于保存程序与程序、程序与设备之间传输数据的内存区域&lt;/p&gt;
&lt;p&gt;​	为了尽可能使 CPU 与设备并行工作，提高系统的性能，需要操作系统在设备管理软件中提供缓冲区管理功能。&lt;/p&gt;
&lt;h4 id=&#34;631-缓冲的引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#631-缓冲的引入&#34;&gt;#&lt;/a&gt; 6.3.1 缓冲的引入&lt;/h4&gt;
&lt;p&gt;引入缓冲区的原因主要有一下两点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理数据流的生产者与消费者之间的速度差异。&lt;/li&gt;
&lt;li&gt;协调传输数据大小不一致的设备&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;632-单缓冲&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#632-单缓冲&#34;&gt;#&lt;/a&gt; 6.3.2 单缓冲&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082501.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082501.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;633-双缓冲&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#633-双缓冲&#34;&gt;#&lt;/a&gt; 6.3.3 双缓冲&lt;/h4&gt;
&lt;p&gt;​	对单缓冲进行了改进，性能提高，增加了复杂性&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082502.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082502.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;634-循环缓冲&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#634-循环缓冲&#34;&gt;#&lt;/a&gt; 6.3.4 循环缓冲&lt;/h4&gt;
&lt;p&gt;​	当数据的输入和输出差别很大时，需要增大缓冲区数量，也就采用了循环缓冲&lt;/p&gt;
&lt;p&gt;➢ 循环缓冲的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多个缓冲区
&lt;ul&gt;
&lt;li&gt;空缓冲区 R&lt;/li&gt;
&lt;li&gt;已满数据的缓冲区 G&lt;/li&gt;
&lt;li&gt;现行工作缓冲区 C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多个指针
&lt;ul&gt;
&lt;li&gt;Nextg（消费者，装满数据的缓冲区）&lt;/li&gt;
&lt;li&gt;Nexti（生产者，空缓冲区）&lt;/li&gt;
&lt;li&gt;Current（进程正在使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;➢ 循环缓冲的概念&lt;/p&gt;
&lt;p&gt;​	生产者和消费者并行执行。循环缓冲的缓冲区构成一个环。Nextg 和 Nexti 指针不断沿顺时针方向移动。当一方追上另一方时，便会阻塞该进程。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082503.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082503.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;635-缓冲池&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#635-缓冲池&#34;&gt;#&lt;/a&gt; 6.3.5 缓冲池&lt;/h4&gt;
&lt;p&gt;一种广泛应用的缓冲管理技术，存在多个可供多个进程共享的缓冲区，提高了效率&lt;/p&gt;
&lt;p&gt;➢ 循环缓冲的组成：&lt;/p&gt;
&lt;p&gt;​	可输入也可输出，至少包含 3 种类型的缓冲区、3 种缓冲队列、四种工作缓冲区&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓冲区
&lt;ul&gt;
&lt;li&gt;空缓冲区&lt;/li&gt;
&lt;li&gt;装满输入数据的缓冲区&lt;/li&gt;
&lt;li&gt;装满输出数据的缓冲区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缓冲队列
&lt;ul&gt;
&lt;li&gt;空缓冲队列&lt;/li&gt;
&lt;li&gt;输入队列&lt;/li&gt;
&lt;li&gt;输出队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;工作缓冲区
&lt;ul&gt;
&lt;li&gt;收容输入&lt;/li&gt;
&lt;li&gt;提取输入&lt;/li&gt;
&lt;li&gt;收容输出&lt;/li&gt;
&lt;li&gt;提取输出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;64-设备分配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#64-设备分配&#34;&gt;#&lt;/a&gt; 6.4 设备分配&lt;/h3&gt;
&lt;p&gt;​	不允许用户自行使用，需要系统分配，且需要记录设备情况的数据结构和设备分配算法&lt;/p&gt;
&lt;h4 id=&#34;641-设备分配中的数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#641-设备分配中的数据结构&#34;&gt;#&lt;/a&gt; 6.4.1 设备分配中的数据结构&lt;/h4&gt;
&lt;p&gt;​	支持设备分配的数据结构：&lt;strong&gt;记录设备的状态 (忙或空闲)&lt;/strong&gt;、&lt;strong&gt;设备类型&lt;/strong&gt;&lt;br&gt;
​	设备分配方案：&lt;strong&gt;设备控制表&lt;/strong&gt;、&lt;strong&gt;控制器控制表&lt;/strong&gt;、&lt;strong&gt;通道控制表和系统设备表&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设备控制表 DCT (Device Control Table)&lt;/p&gt;
&lt;p&gt;系统为每个设备建立一张设备控制表，多台设备的设备控制表构成设备控制表集合。&lt;/p&gt;
&lt;p&gt;设备控制表包含下列信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设备类型&lt;/li&gt;
&lt;li&gt;设备标志符&lt;/li&gt;
&lt;li&gt;设备状态：忙 / 闲&lt;/li&gt;
&lt;li&gt;指向控制器表的指针&lt;/li&gt;
&lt;li&gt;重复执行的次数或时间&lt;/li&gt;
&lt;li&gt;设备 (请求) 队列的队首指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制器控制表 COCT (Controller Control Table)&lt;/p&gt;
&lt;p&gt;系统为每个控制器设置一 - 张用于记录该控制器信息的控制器控制表，控制器控制表中包含以下几个字段:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制器标识符&lt;/li&gt;
&lt;li&gt;控制器状态&lt;/li&gt;
&lt;li&gt;与控制器相连接的通道表指针&lt;/li&gt;
&lt;li&gt;控制器队列的队首指针&lt;/li&gt;
&lt;li&gt;控制器队列的队尾指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通道控制表 CHCT (Channel Control Table)&lt;/p&gt;
&lt;p&gt;在一些主机系统中还有通道设备，系统会为每个通道设备设置一 - 张通道控制表，通道控制表包括以下几个字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制器标识符&lt;/li&gt;
&lt;li&gt;控制器状态&lt;/li&gt;
&lt;li&gt;与通道连接的控制器表首址&lt;/li&gt;
&lt;li&gt;通道队列的队首指针&lt;/li&gt;
&lt;li&gt;通道队列的队尾指针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统设备表 SDT (System Device Table)&lt;/p&gt;
&lt;p&gt;​	记录了系统中全部设备的情况。每个设备占一个表目，其中包括设备类型、设备标识符、设备控制表及设备驱动程序的入地址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;642-设备分配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#642-设备分配&#34;&gt;#&lt;/a&gt; 6.4.2 设备分配&lt;/h4&gt;
&lt;p&gt;系统分配时需要考虑 3 个因素：&lt;strong&gt;设备的固有属性&lt;/strong&gt;、&lt;strong&gt;设备分配算法&lt;/strong&gt;、&lt;strong&gt;设备分配时的安全性&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设备的固有属性&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;独占性（利用不充分、容易死锁）&lt;/li&gt;
&lt;li&gt;共享性（需要对先后顺序进行合理调度）&lt;/li&gt;
&lt;li&gt;可虚拟性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备分配算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设备分配时的安全性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;643-设备独立性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#643-设备独立性&#34;&gt;#&lt;/a&gt; 6.4.3 设备独立性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;p&gt;应用程序独立于具体使用的物理设备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;好处&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用程序与物理设备无关&lt;/li&gt;
&lt;li&gt;易于处理 I/O 设备的故障&lt;/li&gt;
&lt;li&gt;提高系统可靠性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备独立软件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行所有设备的公有操作&lt;/li&gt;
&lt;li&gt;向用户层软件提供统一的接口&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;644-独占设备的分配程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#644-独占设备的分配程序&#34;&gt;#&lt;/a&gt; 6.4.4 独占设备的分配程序&lt;/h4&gt;
&lt;p&gt;​	对于具有 / O 通道的系统，在进程提出 I/O 请求后，系统的设备分配程序可按下列步骤进行设备分配&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分配设备&lt;/p&gt;
&lt;p&gt;根据用户请求的设备的物理名，查找系统设备表，从中找出该设备的设备控制表，检查设备控制表中的设备状态字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分配控制器&lt;/p&gt;
&lt;p&gt;若系统为进程分配了其请求的设备，就到该设备的控制表中找出与该设备连接的控制器的 COCT , 即设备控制器控制表，检查其中的状态字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分配通道&lt;/p&gt;
&lt;p&gt;在有通道的系统中，还需要从相应的设备控制器控制表中找到与该控制器连接的通道控制表，检查表中的通道状态字段。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;645-spooling技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#645-spooling技术&#34;&gt;#&lt;/a&gt; 6.4.5 SPOOLing 技术&lt;/h4&gt;
&lt;p&gt;​	在联机情况下实现的同时外围操作成为 SPOOLing&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SPOOLing 的组成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入井和输出井（大量输入输出的缓存）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入缓冲区和输出换红曲（把井的数据存放缓冲区，再传给输出设备）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入进程和输出进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;请求 I/O 队列&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082504.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082504.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 SPOOLing 技术实现共享打印机&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当用户进程提出打印请求时，SPOOLing 系统先为用户做下列两件事。
&lt;ol&gt;
&lt;li&gt;由输出&lt;strong&gt;进程&lt;/strong&gt;在输出&lt;strong&gt;井&lt;/strong&gt;中&lt;strong&gt;申请空闲盘块区&lt;/strong&gt;，并将要打印的数据送入其中&lt;/li&gt;
&lt;li&gt;输出&lt;strong&gt;进程&lt;/strong&gt;再&lt;strong&gt;为用户申请&lt;/strong&gt;并填写一张&lt;strong&gt;用户请求打印表&lt;/strong&gt;，将该表&lt;strong&gt;挂到请求打印队列&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;打印机开始打印时
&lt;ol&gt;
&lt;li&gt;从队首取一张请求打印表&lt;/li&gt;
&lt;li&gt;将打印数据从井送到缓冲区&lt;/li&gt;
&lt;li&gt;打印&lt;/li&gt;
&lt;li&gt;完成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高速度&lt;/li&gt;
&lt;li&gt;将独占设备改造成逻辑的共享设备&lt;/li&gt;
&lt;li&gt;实现了虚拟设备功能&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;65-io软件原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#65-io软件原理&#34;&gt;#&lt;/a&gt; 6.5 I/O 软件原理&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082505.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082505.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;651-设备管理软件的功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#651-设备管理软件的功能&#34;&gt;#&lt;/a&gt; 6.5.1 设备管理软件的功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;实现 I/O 设备的独立性&lt;/li&gt;
&lt;li&gt;错误处理（先低层，解决不了就往上抛）&lt;/li&gt;
&lt;li&gt;异步传输&lt;/li&gt;
&lt;li&gt;缓冲管理&lt;/li&gt;
&lt;li&gt;设备的分配和释放&lt;/li&gt;
&lt;li&gt;实现 I/O 控制方式&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;652-中断处理程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#652-中断处理程序&#34;&gt;#&lt;/a&gt; 6.5.2 中断处理程序&lt;/h4&gt;
&lt;p&gt;​	作用：将发出 I/O 请求而被阻塞的进程唤醒&lt;/p&gt;
&lt;h4 id=&#34;653-设备驱动程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#653-设备驱动程序&#34;&gt;#&lt;/a&gt; 6.5.3 设备驱动程序&lt;/h4&gt;
&lt;p&gt;​	是 VO 进程与设备控制器之间的通信程序。主要任务是&lt;strong&gt;接受上层软件发来的抽象的 I/O 请求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当有读第 n 块磁盘的请求时，磁盘驱动程序工作如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算出所请求块的物理地址。&lt;/li&gt;
&lt;li&gt;检查驱动器电机是否正在运转。&lt;/li&gt;
&lt;li&gt;检查磁头臂是否定位在正确的柱面。&lt;/li&gt;
&lt;li&gt;确定需要哪些控制器命令及命令的执行顺序。&lt;/li&gt;
&lt;li&gt;向设备控制器的设备寄存器中写入命令。&lt;/li&gt;
&lt;li&gt;I/O 完成后，向上层软件传送数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;654-与硬件无关的io软件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#654-与硬件无关的io软件&#34;&gt;#&lt;/a&gt; 6.5.4 与硬件无关的 I/O 软件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;设备无关 I/O 软件的功能如下:
&lt;ul&gt;
&lt;li&gt;设备命名：将设备名映射到相应的驱动程序&lt;/li&gt;
&lt;li&gt;设备保护：为设备设置合理的访问权限&lt;/li&gt;
&lt;li&gt;提供独立于设备的块大小&lt;/li&gt;
&lt;li&gt;为块设备和字符设备提供必要的缓冲技术&lt;/li&gt;
&lt;li&gt;块设备的存储分配&lt;/li&gt;
&lt;li&gt;分配和释放独立设备&lt;/li&gt;
&lt;li&gt;错误处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;66-磁盘管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#66-磁盘管理&#34;&gt;#&lt;/a&gt; 6.6 磁盘管理&lt;/h3&gt;
&lt;p&gt;重要目标：提高磁盘吕勇率和磁盘访问速度&lt;/p&gt;
&lt;h4 id=&#34;661-磁盘结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#661-磁盘结构&#34;&gt;#&lt;/a&gt; 6.6.1 磁盘结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据的组织和格式
&lt;ol&gt;
&lt;li&gt;磁盘设备包括一个或多个&lt;strong&gt;盘片&lt;/strong&gt;，盘片又分一个或两个&lt;strong&gt;存储面&lt;/strong&gt;，每个盘面被组织成若干个&lt;strong&gt;同心环&lt;/strong&gt;，又称&lt;strong&gt;磁道&lt;/strong&gt;每条磁盘存储相同数目的二进制位，磁盘密度是内层磁道大于外层。每条磁道又被划分成若干个&lt;strong&gt;扇区&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;一个扇区上存储一个物理记录。磁盘上存储的物理记录数目是由扇区数、磁道数及磁盘面数决定的&lt;/li&gt;
&lt;li&gt;每个扇区包括两个字段：标识符字段、数据字段&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磁盘的类型
&lt;ol&gt;
&lt;li&gt;固定头磁盘
&lt;ul&gt;
&lt;li&gt;每条磁道上都有磁头，提高磁盘读写速度。用于大容量磁盘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动头磁盘
&lt;ul&gt;
&lt;li&gt;每个盘面一个磁头，磁头可移动并寻道，速度较慢，结构简单，用于中小磁盘设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;磁盘的访问时间
&lt;ol&gt;
&lt;li&gt;寻道时间&lt;/li&gt;
&lt;li&gt;旋转延迟时间&lt;/li&gt;
&lt;li&gt;访问时间&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;662-磁盘调度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#662-磁盘调度&#34;&gt;#&lt;/a&gt; 6.6.2 磁盘调度&lt;/h4&gt;
&lt;p&gt;磁盘为多个进程共享，需采用一种最佳调度算法，&lt;strong&gt;使各进程对磁盘的平均访问时间最短&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先来先服务（FCFS）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最简单的磁盘调度算法，平均寻道时间较长，适用于进程数较少的场合&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082601.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082601.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最短寻道时间优先（SSTF）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;要求访问的磁道与当前磁头所在的磁道距离最近。能使每次的寻道时间最短，单不能保证平均寻道时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：可能导致某个进程发生 “饥饿” 现象（进来的进程总是离磁头较近）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082602.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082602.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;扫描算法（SCAN）算法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优先考虑磁头当前的移动方向（先往一边走，这边走完了再返回去走反方向）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：当磁头刚越过磁道 A，又来一个进程需要访问磁道 A，则需要等待很长时间&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082603.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082603.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环扫描算法（CSCAN）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;规定磁头只能单向移动，不能变更方向&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082604.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/21082604.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NStepSCAN 和 FSCAN 算法&lt;/p&gt;
&lt;p&gt;​	在前面几种算法中，可能会出现磁盘臂停留在某处、不动的情况。如有一个或多个进程对某一磁道有较高的访问频率，从而垄断了整个磁盘设备。把这一现象称为 “磁臂粘着”, 在高密度磁盘上容易出现此情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;NStepSCAN 算法：&lt;/p&gt;
&lt;p&gt;将磁盘请求队列分成若干个子队列，依次去调度，新来的放到后面的队列，防止一直请求同一个磁道，避免磁臂粘着&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FSCAN 算法：&lt;/p&gt;
&lt;p&gt;是 NStepSCAN 的简化，之分成两个队列。一个当前处理，一个是扫描期间新出现的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;663-提高磁盘io速度的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#663-提高磁盘io速度的方法&#34;&gt;#&lt;/a&gt; 6.6.3 提高磁盘 I/O 速度的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;提前读&lt;/li&gt;
&lt;li&gt;延迟写
&lt;ul&gt;
&lt;li&gt;内存的东西不立刻丢，除非要使用才丢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优化物理块的分布
&lt;ul&gt;
&lt;li&gt;适当地集中数据在磁盘存放的位置，可以减少磁臂移动距离，提高效率。需采用优化文件物理块分布的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;虚拟盘
&lt;ul&gt;
&lt;li&gt;用内存空间去仿真磁盘，又称 RAM 盘&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;磁盘高速缓冲
&lt;ul&gt;
&lt;li&gt;拿内存的一块存储空间暂存磁盘中的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xinyao_idiot.gitee.io/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</guid>
            <title>数据库系统原理</title>
            <link>https://xinyao_idiot.gitee.io/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</link>
            <category>数据库系统原理</category>
            <pubDate>Mon, 09 Aug 2021 14:14:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数据库系统原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库系统原理&#34;&gt;#&lt;/a&gt; 数据库系统原理&lt;/h1&gt;
&lt;h2 id=&#34;第一章-数据库系统概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一章-数据库系统概念&#34;&gt;#&lt;/a&gt; 第一章、数据库系统概念&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库基本概念&#34;&gt;#&lt;/a&gt; 第一节：数据库基本概念&lt;/h3&gt;
&lt;h4 id=&#34;一数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据&#34;&gt;#&lt;/a&gt; 一。数据：&lt;/h4&gt;
&lt;p&gt;​		数据（Data）是描述事物的符号记录，是只用无里符号记录下来的、可以鉴别的信息。&lt;/p&gt;
&lt;h4 id=&#34;二数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库&#34;&gt;#&lt;/a&gt; 二。数据库&lt;/h4&gt;
&lt;p&gt;​		数据库（Database，DB）通俗地被称为存储数据的仓库，知识这个仓库是存储在计算机存储设备上的，并且其所存储的数据是按一定的格式进行存储的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：具有较小的冗余度、较高的数据独立性，系统易于扩展，并可以被多个用户共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 三个基本特点：** 具有永久存储、有组织和可共享三个基本特点&lt;/p&gt;
&lt;h4 id=&#34;三数据库管理系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库管理系统&#34;&gt;#&lt;/a&gt; 三。数据库管理系统&lt;/h4&gt;
&lt;p&gt;数据库管理系统（Database Managenment System，DBMS）是专门用于建立和管理数据库的一套软件，介于应用程序和操作系统之间。负责&lt;strong&gt;科学有效的组织和存储数据&lt;/strong&gt;，并帮助数据库的使用者从大量的数据中快速地获取所需数据，以及提供必要的&lt;strong&gt;安全性&lt;/strong&gt;和&lt;strong&gt;完整性&lt;/strong&gt;等统一控制机制，实现对数据有效的管理与维护。&lt;/p&gt;
&lt;h4 id=&#34;四数据库的主要功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四数据库的主要功能&#34;&gt;#&lt;/a&gt; 四。数据库的主要功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据定义功能&lt;/li&gt;
&lt;li&gt;数据操纵功能&lt;/li&gt;
&lt;li&gt;数据库的运行管理功能&lt;/li&gt;
&lt;li&gt;数据库的建立和维护功能&lt;/li&gt;
&lt;li&gt;数据组织、存储和管理功能&lt;/li&gt;
&lt;li&gt;其他功能（主要包括与其他软件&lt;strong&gt;网络通信&lt;/strong&gt;、不同数据库系统之间的&lt;strong&gt;数据传输和相互访问&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;五数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库系统&#34;&gt;#&lt;/a&gt; 五。数据库系统&lt;/h4&gt;
&lt;p&gt;数据库系统（DBS）是指在计算机中引入数据库技术之后的系统&lt;/p&gt;
&lt;p&gt;数据库管理员（DBA）是专门负责对数据库进行维护的专业人员&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节数据管理技的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据管理技的发展&#34;&gt;#&lt;/a&gt; 第二节：数据管理技的发展&lt;/h3&gt;
&lt;h4 id=&#34;数据管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据管理&#34;&gt;#&lt;/a&gt; 数据管理：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;针对组织业务的管理&lt;/strong&gt;，负责指定并执行郑个组织中关于数据的定义、组织、保护与有效使用的策略、过程和计划&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依靠技术&lt;/strong&gt;，负责实现数据作为一个资源的集中控制管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 数据组织：** 用便于处理的某种方式收集数据，并将记录在纸介文件上的数据转换成计算机可处理的形式；然后将手机的数据进行适当的构造&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑组织：用户或应用程序所使用的数据结构形式&lt;/li&gt;
&lt;li&gt;物理组织：数据在无里存储设备上的结构形式&lt;/li&gt;
&lt;li&gt;检索：为了向用户提供信息，存储的数据要能够方便地选择提取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着计算机技术的发展及应用，数据挂你了技术共经历了&lt;strong&gt;人工管理&lt;/strong&gt;、&lt;strong&gt;文件系统&lt;/strong&gt;和&lt;strong&gt;数据库系统&lt;/strong&gt;三个阶段&lt;/p&gt;
&lt;h4 id=&#34;一人工管理阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一人工管理阶段&#34;&gt;#&lt;/a&gt; 一。人工管理阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 50 年代中期以前&lt;/strong&gt;，所设计的数据处理基本依靠&lt;strong&gt;手工方式&lt;/strong&gt;进行，具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据不保存（&lt;strong&gt;存储容量有限，价格昂贵&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;应用程序管理数据（&lt;strong&gt;即没有专门的数据管理软件&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据与面向应用（&lt;strong&gt;即一组数据面对一个应用程序&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二文件系统阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二文件系统阶段&#34;&gt;#&lt;/a&gt; 二。文件系统阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 20 年代后期到 60 年代中期&lt;/strong&gt;，计算机硬件和软件发展到了一定阶段，配备了专门的数据管理软件，即&lt;strong&gt;文件系统&lt;/strong&gt;。文件系统将数据的&lt;strong&gt;逻辑结构&lt;/strong&gt;和&lt;strong&gt;物理结构&lt;/strong&gt;分离，当物理结构发生改变的时候，不会导致应用程序的修改（&lt;strong&gt;数据的物理独立结构&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据的管理者：文件系统，数据可长期保存（&lt;strong&gt;有硬盘和专门的文件系统&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据面向的对象：某一应用程序&lt;/li&gt;
&lt;li&gt;数据的共享程度：&lt;strong&gt;共享性差、冗余度大&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据的结构化：记录有结构，整体无结构 (&lt;strong&gt;不能&lt;/strong&gt;实现数据的普通共享，&lt;strong&gt;只能&lt;/strong&gt;实现文件级的共享）&lt;/li&gt;
&lt;li&gt;数据的独立性：独立性差，提供了物理数据独立性（&lt;strong&gt;使数据共享成为可能&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据控制能力：应用程序自己控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三数据库系统阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库系统阶段&#34;&gt;#&lt;/a&gt; 三。数据库系统阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 60 年代后期以来&lt;/strong&gt;，&lt;strong&gt;解决了数据的冗余&lt;/strong&gt;；数据变更时，能节省对多个数据副本的变更操作，&lt;strong&gt;大大缩小计算机运算时间开销&lt;/strong&gt;，还要求数据具有更高的独立性，不但&lt;strong&gt;具有物理独立性&lt;/strong&gt;，而且&lt;strong&gt;具有逻辑独立性&lt;/strong&gt;，从而&lt;strong&gt;节省应用程序开发的维护和代价&lt;/strong&gt;数据库系统孕育而生。&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据集成
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据的集成是数据库管理系统的主要目的&lt;/strong&gt;，可&lt;strong&gt;使数据得到最大程度的共享，且冗余最小&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据共享性高
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个数据可以为多个不同的用户共同使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据冗余小&lt;/li&gt;
&lt;li&gt;数据一致性
&lt;ul&gt;
&lt;li&gt;通过消除或控制数据冗余，可以在一定范围内避免数据的不一致性。&lt;strong&gt;引起不一致的根源是数据冗余&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据独立性高
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据定义&lt;/strong&gt;与&lt;strong&gt;使用数据的应用程序分离&lt;/strong&gt;被称为&lt;strong&gt;数据独立&lt;/strong&gt;（数据或应用程序的修改不会彼此引起另一方的修改，两层数据独立）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实施统一管理与控制
&lt;ul&gt;
&lt;li&gt;主要包括数据&lt;strong&gt;安全性&lt;/strong&gt;、&lt;strong&gt;完整性&lt;/strong&gt;、&lt;strong&gt;并发控制&lt;/strong&gt;、&lt;strong&gt;故障恢复&lt;/strong&gt;等，即&lt;strong&gt;数据库保护&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据的安全性：&lt;strong&gt;保护数据&lt;/strong&gt;，放置不合法的使用造成数据泄密和破坏&lt;/li&gt;
&lt;li&gt;数据的完整性：对数据的&lt;strong&gt;正确性&lt;/strong&gt;、&lt;strong&gt;有效性&lt;/strong&gt;和&lt;strong&gt;相容性&lt;/strong&gt;要求&lt;/li&gt;
&lt;li&gt;并发控制：规避多线程并发造成的安全问题&lt;/li&gt;
&lt;li&gt;故障恢复：在出现问题时，数据库系统（DBMS）必须具有将数据库从错误状态恢复到某一已知的正确状态的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少应用程序开发与维护的工作量
&lt;ul&gt;
&lt;li&gt;由于数据库&lt;strong&gt;数据具有共享性、独立性&lt;/strong&gt;，在开发与维护新的应用&lt;strong&gt;所花费的代价和时间大大减少&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节数据库系统的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节数据库系统的结构&#34;&gt;#&lt;/a&gt; 第三节：数据库系统的结构&lt;/h3&gt;
&lt;h4 id=&#34;一三级模式结构的两层映像与数据独立性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一三级模式结构的两层映像与数据独立性&#34;&gt;#&lt;/a&gt; 一。三级模式结构的两层映像与数据独立性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;外模式 / 模式映像&lt;/strong&gt;（逻辑独立性）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模式 / 内模式映像&lt;/strong&gt;（物理独立性）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据库系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部系统结构（采用三级模式结构）
&lt;ul&gt;
&lt;li&gt;模式
&lt;ul&gt;
&lt;li&gt;模式也被称为&lt;strong&gt;概念模式&lt;/strong&gt;或&lt;strong&gt;逻辑模式&lt;/strong&gt;（实际上时数据库数据在逻辑级上的视图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外模式
&lt;ul&gt;
&lt;li&gt;外模式也被称为&lt;strong&gt;子模式&lt;/strong&gt;或&lt;strong&gt;用户模式&lt;/strong&gt;（数据库用户能够看到和使用的局部数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内模式
&lt;ul&gt;
&lt;li&gt;内模式也被称为存储模式（对数据库中数据物理结构和存储方式 id 描述）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部系统结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【单选题】数据库系统的数据独立性是指（不会因为系统数据库存储结构与数据逻辑结构的变化而影响应用程序）&lt;/p&gt;
&lt;h4 id=&#34;二数据库系统的运行与应用结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库系统的运行与应用结构&#34;&gt;#&lt;/a&gt; 二。数据库系统的运行与应用结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;客户 / 服务器（&lt;strong&gt;Client/Server，C/S&lt;/strong&gt;）模式
&lt;ul&gt;
&lt;li&gt;QQ、桌面客户端游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器 / 服务器（&lt;strong&gt;Browser/Server，B/S&lt;/strong&gt;）模式
&lt;ul&gt;
&lt;li&gt;网站、在线 web 游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第四节数据模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节数据模型&#34;&gt;#&lt;/a&gt; 第四节：数据模型&lt;/h3&gt;
&lt;h4 id=&#34;一数据特征与数据模型组成要素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据特征与数据模型组成要素&#34;&gt;#&lt;/a&gt; 一。数据特征与数据模型组成要素&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;p&gt;数据结构描述的是系统的&lt;strong&gt;静态特性&lt;/strong&gt;，即数据对象的数据类型、内容、属性以及书对象之间的联系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据操作&lt;/p&gt;
&lt;p&gt;数据操作描述的是系统的&lt;strong&gt;动态特性&lt;/strong&gt;，是对各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据的约束条件&lt;/p&gt;
&lt;p&gt;数据约束描述数据结构中数据见的语法和语义关联，包括相互制约与依存关系以及数据动态变化规则，以保证数据的&lt;strong&gt;正确性、有效性与相容性&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据模型的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据模型的分类&#34;&gt;#&lt;/a&gt; 二。数据模型的分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念层数据模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;信息世界中的基本概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实体（Entity）&lt;/p&gt;
&lt;p&gt;客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性（Attribute）&lt;/p&gt;
&lt;p&gt;实体所具有的某一特征称为属性。一个实体可以由若干个属性来刻画。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;码（Key）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;唯一&lt;/strong&gt;表示实体的&lt;strong&gt;属性集&lt;/strong&gt;称为码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域（Domain）&lt;/p&gt;
&lt;p&gt;属性的&lt;strong&gt;取值范围&lt;/strong&gt;称为该属性的域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实体型（Entity Type）&lt;/p&gt;
&lt;p&gt;用实体名及&lt;strong&gt;其属性&lt;/strong&gt;名集合来抽象和刻画。同类实体称为&lt;strong&gt;实体型&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实体集（Entity Set）&lt;/p&gt;
&lt;p&gt;同型实体的集合称为实体集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联系（Relationship）&lt;/p&gt;
&lt;p&gt;显示世界中事物内部以及事物之间的联系在信息世界中反应为实体内部的联系和实体之间的联系。&lt;/p&gt;
&lt;p&gt;实体型间联系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对多	1：N&lt;/li&gt;
&lt;li&gt;一对一    1：1&lt;/li&gt;
&lt;li&gt;多对多    N：M&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念模型（对应外模式）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;概念模型：用来描述现实世界的事物，与具体的计算机系统无关&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/E-R%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/E-R%E5%9B%BE.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑层数据模型（对应模式）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;层次模型；&lt;/li&gt;
&lt;li&gt;网状模型；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系模型；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;面向对象模型；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物理层数据模型（对应内模式）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物理层数据模型，也称为数据的&lt;strong&gt;物理模型&lt;/strong&gt;（Physical Model），其描述数据在&lt;strong&gt;存储介质&lt;/strong&gt;上的组织结构，是逻辑模型的物理实现，即每一种逻辑模型在实现时都有与其对应的物理模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二章-关系数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二章-关系数据库&#34;&gt;#&lt;/a&gt; 第二章、关系数据库&lt;/h2&gt;
&lt;h3 id=&#34;第一节关系数据库概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节关系数据库概述&#34;&gt;#&lt;/a&gt; 第一节：关系数据库概述&lt;/h3&gt;
&lt;h4 id=&#34;一基本简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一基本简介&#34;&gt;#&lt;/a&gt; 一。基本简介&lt;/h4&gt;
&lt;p&gt;系统而严格提出关系模型的是&lt;strong&gt;美国 IBM 公司的 E.F.Codd&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1970 年&lt;/strong&gt;提出&lt;strong&gt;关系数据模型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;1970 年&lt;strong&gt; E.F.Codd&lt;/strong&gt; 发表了《Communication of the ACM》&lt;/li&gt;
&lt;li&gt;之后提出了，&lt;strong&gt;关系代数和关系演算的概念&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1972 年&lt;/strong&gt;提出了关系的&lt;strong&gt;第一、第二、第三范式&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1974 年&lt;/strong&gt;提出了关系的&lt;strong&gt; BC 范式&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系数据库应用&lt;strong&gt;数学方法&lt;/strong&gt;来&lt;strong&gt;处理数据库的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;80 年代后，关系数据库系统成为最重要、最流行的数据库系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;典型的实验系统：
&lt;ul&gt;
&lt;li&gt;System R&lt;/li&gt;
&lt;li&gt;University INGRES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;典型商用系统
&lt;ul&gt;
&lt;li&gt;ORACLE&lt;/li&gt;
&lt;li&gt;SYBASE&lt;/li&gt;
&lt;li&gt;INFORMIX&lt;/li&gt;
&lt;li&gt;IBM DB2&lt;/li&gt;
&lt;li&gt;SQL service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系模型的数据结构（类似于 Excel）&lt;/p&gt;
&lt;h4 id=&#34;二基本术语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二基本术语&#34;&gt;#&lt;/a&gt; 二。基本术语&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表（Table）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系（Relation）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列（Column）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也被称为&lt;strong&gt;字段&lt;/strong&gt;或者&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性（Attribute）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据表中，&lt;strong&gt;一列即为一个属性&lt;/strong&gt;，给每一个属性起一个名称即为属性名。与之同义的术语是”&lt;strong&gt; 列&lt;/strong&gt; “。表中的&lt;strong&gt;属性的个数称为关系的元或度&lt;/strong&gt;。&lt;strong&gt;列的值称为属性值&lt;/strong&gt;；&lt;strong&gt;属性值的取值范围称为值域&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行（Row）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中行（Row），也称作元组（Tuple）或记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;元组（Tuple）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中的一行即为一个元组（一条数据即为一个元组）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分量（Component）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元组中的一个属性值，称为分量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;码或键（Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在一个关系中，存在这样的属性（或属性组），使得在该关系的任何一个关系状态中的两个元组，在该属性（或属性组）上值的组合都不相同，即这些属性（或属性组）的值都能用来唯一标识该关系的元组，称此属性（或属性组）为该关系的码或键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超码或超键（Super Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在关系的一个码中移去某个属性，它仍然是这个关系的码，则称这样的码或键为该关系的超码或超键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;候选码或候选键（Candidate Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在关系的一个码或键中，不能从中移去任何一个属性，否则它就不是这个关系的码或键，则称这样的码或键为该关系的候选码或候选键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主码或主键（Primary Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个关系的若干个候选码或候选键中指定一个用来唯一标识关系的元组，则称这个被指定的候选码或候选键为该关系的主码或主键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全码或全键（All-Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个关系模式的所有属性集合是这个关系的主码或主键，则称这样的主码或主键为全码或全键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列&lt;/th&gt;
&lt;th&gt;列的值被称为属性值&lt;/th&gt;
&lt;th&gt;属性的个数称为元或度&lt;/th&gt;
&lt;th&gt;属性值的取值范围叫做值域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;行&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;行被称为元组或记录&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;元组的一个属性值称为分量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A0%81.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主属性（Primary Attribute）和非主属性（Nonprimary Attribute）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在候选码中的属性称为主属性或码属性；&lt;/p&gt;
&lt;p&gt;不在候选码中的属性称为非主属性或非码属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外码或外键（Foreign Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该表的某个属性是其他表的主键，则是这个关系的外码或外键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参照关系（Referencing Relation）和被参照关系（Referenced Relation）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以外键为主键的表称为被参照关系；外键所在的表为参照关系。被参照关系和参照关系是通过外键相联系的，这种联系通常是一对多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;域（Domain）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表示属性的取值范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据类型（Data Type）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个字段名都有相对应的数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系模式（Relation Schema）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库存在 “型” 和 “值” 之分，关系数据库中，关系模式是型，关系是值；关系模式是静态的，关系是动态的。关系模式是对关系的描述.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系数据库（Relation Datebase）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关系数据库是以关系模式为数据的逻辑模型，并采用关系作为数据组织方式的一类数据库，其数据库建立在关系代数上&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节关系数据库模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节关系数据库模型&#34;&gt;#&lt;/a&gt; 第二节：关系数据库模型&lt;/h3&gt;
&lt;h4 id=&#34;一基本的关系集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一基本的关系集合&#34;&gt;#&lt;/a&gt; 一。基本的关系集合&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关系数据语言的分类
&lt;ul&gt;
&lt;li&gt;关系操作的能力用两种方式表示：&lt;strong&gt;代数方式&lt;/strong&gt;和&lt;strong&gt;逻辑方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;代数方式主要有关系代数，通过对关系的操作来达到查询&lt;/li&gt;
&lt;li&gt;逻辑方式主要有关系演算，通过使用位于来表达查询要求的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二关系的完整性约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二关系的完整性约束&#34;&gt;#&lt;/a&gt; 二。关系的完整性约束&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关系的完整约束
&lt;ul&gt;
&lt;li&gt;主键不能为空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参照完整性约束
&lt;ul&gt;
&lt;li&gt;外键需要一一对应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户定义完整性约束
&lt;ul&gt;
&lt;li&gt;对数据进行的约束；例：数据类型，数据长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系模型完整性约束的检验
&lt;ol&gt;
&lt;li&gt;执行插入操作&lt;/li&gt;
&lt;li&gt;执行删除操作&lt;/li&gt;
&lt;li&gt;执行更新操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节关系数据库的规范化理论重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节关系数据库的规范化理论重点&#34;&gt;#&lt;/a&gt; 第三节：关系数据库的规范化理论（重点）&lt;/h3&gt;
&lt;h4 id=&#34;一关系模型中可能存在的冗余和异常问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一关系模型中可能存在的冗余和异常问题&#34;&gt;#&lt;/a&gt; 一。关系模型中可能存在的冗余和异常问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据冗余&lt;/li&gt;
&lt;li&gt;更新异常&lt;/li&gt;
&lt;li&gt;插入异常&lt;/li&gt;
&lt;li&gt;删除异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二函数依赖的关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二函数依赖的关键字&#34;&gt;#&lt;/a&gt; 二。函数依赖的关键字&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;完全函数依赖&lt;/p&gt;
&lt;p&gt;$ X \to Y$ 但是 x 真子集不能依赖 Y, 则 Y 完全依赖于 X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部分函数依赖&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, 但是 X 真子集可以依赖 Y，则 Y 部分依赖于 X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递函数依赖&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，且&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;¬&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y \neg\to X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;¬&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y → Z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;p&gt;当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 时，则 X 为 Y 的候选关键字&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三范式与关系规范化过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三范式与关系规范化过程&#34;&gt;#&lt;/a&gt; 三。范式与关系规范化过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一范式：行和列不可再分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式：不可冗余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式、BC 范式：保证主键唯一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系规范化理论的应用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三章数据库设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三章数据库设计&#34;&gt;#&lt;/a&gt; 第三章：数据库设计&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库设计概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库设计概述&#34;&gt;#&lt;/a&gt; 第一节：数据库设计概述&lt;/h3&gt;
&lt;h4 id=&#34;一生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一生命周期&#34;&gt;#&lt;/a&gt; 一。生命周期&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据库分析与设计阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概念设计&lt;/li&gt;
&lt;li&gt;逻辑设计&lt;/li&gt;
&lt;li&gt;物理设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库实现与操作阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库的实现&lt;/li&gt;
&lt;li&gt;操作与监督&lt;/li&gt;
&lt;li&gt;修改与调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据库设计的目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库设计的目标&#34;&gt;#&lt;/a&gt; 二。数据库设计的目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;满足应用功能需求&lt;/li&gt;
&lt;li&gt;良好的数据库性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三数据库设计的内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库设计的内容&#34;&gt;#&lt;/a&gt; 三。数据库设计的内容&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据库结构设计&lt;/li&gt;
&lt;li&gt;数据库行为设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;四数据库设计的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四数据库设计的方法&#34;&gt;#&lt;/a&gt; 四。数据库设计的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;直观设计法（不可取）&lt;/li&gt;
&lt;li&gt;规范设计法
&lt;ol&gt;
&lt;li&gt;新奥尔良设计方法&lt;/li&gt;
&lt;li&gt;基于 E-R 模型的数据库设计方法&lt;/li&gt;
&lt;li&gt;基于第三范式的设计方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机辅助设计法&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;五数据库设计的过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库设计的过程&#34;&gt;#&lt;/a&gt; 五。数据库设计的过程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节数据库设计的基本步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据库设计的基本步骤&#34;&gt;#&lt;/a&gt; 第二节：数据库设计的基本步骤&lt;/h3&gt;
&lt;h4 id=&#34;一需求分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一需求分析&#34;&gt;#&lt;/a&gt; 一。需求分析&lt;/h4&gt;
&lt;p&gt;​		数据库设计中最重要的一个阶段，即确定数据库应支持哪些功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用过程分析&lt;/p&gt;
&lt;p&gt;指了解并分析数据与数据处理间的关系。在数据库范围确定后，设计人员应逐次廖尔吉每个功能需要用到哪些数据、数据使用的顺序、对数据做何处理的策略以及处理的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收集与分析数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态结构&lt;/p&gt;
&lt;p&gt;指不是加应用操作于其上时数据的原始状况，可通过数据分类表和数据元素表进行说明&lt;/p&gt;
&lt;p&gt;例：公司表中部门名称这一字段名基本不变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态结构&lt;/p&gt;
&lt;p&gt;指应用操作施加于数据之上后数据的状况，可通过任务分类表和数据操作特征表进行说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据约束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写需求分析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库的应用功能目标
&lt;ul&gt;
&lt;li&gt;功能要求&lt;/li&gt;
&lt;li&gt;性能要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标明不同用户视图范围&lt;/li&gt;
&lt;li&gt;应用处理过程需求说明&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;li&gt;数据量&lt;/li&gt;
&lt;li&gt;数据约束&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二概念结构设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二概念结构设计&#34;&gt;#&lt;/a&gt; 二。概念结构设计&lt;/h4&gt;
&lt;p&gt;​		在需求分析的基础按照特定的方法设计满足应用需求的用户信息结构，该信息结构通常称为概念模型。其中 E-R 图为概念模型的描述工具。&lt;/p&gt;
&lt;h4 id=&#34;三逻辑结构设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三逻辑结构设计&#34;&gt;#&lt;/a&gt; 三。逻辑结构设计&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四物理设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四物理设计&#34;&gt;#&lt;/a&gt; 四。物理设计&lt;/h4&gt;
&lt;p&gt;​		指对于一个给定的数据逻辑结构，研究并构造物理结构的过程。主要任务时确定数据库在存储设别上的存储结构及存取方法。&lt;/p&gt;
&lt;h4 id=&#34;五数据库实施&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库实施&#34;&gt;#&lt;/a&gt; 五。数据库实施&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;加载数据&lt;/li&gt;
&lt;li&gt;应用程序设计&lt;/li&gt;
&lt;li&gt;数据库试运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;六数据库运行和维护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六数据库运行和维护&#34;&gt;#&lt;/a&gt; 六。数据库运行和维护&lt;/h4&gt;
&lt;p&gt;当数据库投入到实际生产中标志这设计和应用开发基本完成，但不代表设计和应用开发工作的终止。系统维护最困难的工作时数据库重组和重构。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节关系数据库设计方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节关系数据库设计方法&#34;&gt;#&lt;/a&gt; 第三节：关系数据库设计方法&lt;/h3&gt;
&lt;h4 id=&#34;一关系数据库设计过程于各级模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一关系数据库设计过程于各级模式&#34;&gt;#&lt;/a&gt; 一。关系数据库设计过程于各级模式&lt;/h4&gt;
&lt;h4 id=&#34;二概念结构设计方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二概念结构设计方法&#34;&gt;#&lt;/a&gt; 二。概念结构设计方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;E-R 图的表示方法&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;实体类型，用矩形表示，框内写明实体的名称&lt;/li&gt;
&lt;li&gt;属性，用椭圆表示，将与之相应的实体连接起来&lt;/li&gt;
&lt;li&gt;联系，用菱形表示，框内写明联系的名称，同时在旁边表上联系的类型（1：1、1：N 或者 M：N）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部信息结构设计&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确定局部范围&lt;/strong&gt;：主要依据需求分析报告中标明的用户视图范围来确定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择实体&lt;/strong&gt;：在确认局部范围内选择一些合适的信息单位作为局部信息结构的基本实体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择实体关键字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定实体间联系&lt;/strong&gt;：数据间的联系必须在概念设计时确定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定实体的属性&lt;/strong&gt;：分为标识属性和说明属性两类。
&lt;ul&gt;
&lt;li&gt;标识属性用作实体的关键字&lt;/li&gt;
&lt;li&gt;说明属性用作描述实体的一般特征&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局信息结构设计&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;属性冲突&lt;/li&gt;
&lt;li&gt;命名冲突&lt;/li&gt;
&lt;li&gt;结构冲突&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第四章sql与关系数据库基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四章sql与关系数据库基本操作&#34;&gt;#&lt;/a&gt; 第四章：SQL 与关系数据库基本操作&lt;/h2&gt;
&lt;h3 id=&#34;第一节sql概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节sql概述&#34;&gt;#&lt;/a&gt; 第一节：SQL 概述&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的发展&#34;&gt;#&lt;/a&gt; SQL 的发展&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1974 年&lt;/strong&gt;由&lt;strong&gt; Boyce&lt;/strong&gt; 和&lt;strong&gt; Chamberlin&lt;/strong&gt; 提出的&lt;/p&gt;
&lt;p&gt;20 世纪 80 年代以来，SQL 一直是数据库管理系统的标准语言。&lt;/p&gt;
&lt;p&gt;至今 SQL 成为了一个通用的、功能极强的关系数据库语言&lt;/p&gt;
&lt;p&gt;SQL 是一个&lt;strong&gt;综合的&lt;/strong&gt;、&lt;strong&gt;功能强大的&lt;/strong&gt;且&lt;strong&gt;简洁易懂&lt;/strong&gt;的语言；&lt;/p&gt;
&lt;p&gt;SQL 的目的就是要能够很好的提供一种从数据库中读取数据的简单而有效的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的特点&#34;&gt;#&lt;/a&gt; SQL 的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;SQL 不是某个特定数据库供应商专有的语言&lt;/li&gt;
&lt;li&gt;SQL 简单易学&lt;/li&gt;
&lt;li&gt;SQL 看上去简单，但实际上是一种强有力的语言，灵活使用可以进行非常复杂和高级的数据库操作，并且不区分大小写&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的组成&#34;&gt;#&lt;/a&gt; SQL 的组成&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据定义语言（DDL）&lt;/li&gt;
&lt;li&gt;数据操纵语言（DML）&lt;/li&gt;
&lt;li&gt;数据控制语言（DCL）&lt;/li&gt;
&lt;li&gt;嵌入式和动态 SQL 规则&lt;/li&gt;
&lt;li&gt;SQL 条用和会话规则&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二节mysql预备知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节mysql预备知识&#34;&gt;#&lt;/a&gt; 第二节：Mysql 预备知识&lt;/h3&gt;
&lt;h4 id=&#34;一mysql使用基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一mysql使用基础&#34;&gt;#&lt;/a&gt; 一.MySQL 使用基础&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;LAMP（Linux+Apache+Mysql+PHP/Perl+Python）&lt;/li&gt;
&lt;li&gt;WAMP（Windows+Apache+Mysql+PHP/Perl/Python）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二mysql中的sql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二mysql中的sql&#34;&gt;#&lt;/a&gt; 二.MySQL 中的 SQL&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;常量
&lt;ol&gt;
&lt;li&gt;字符串常量&lt;/li&gt;
&lt;li&gt;数值常量
&lt;ul&gt;
&lt;li&gt;整数常量&lt;/li&gt;
&lt;li&gt;浮点数常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六进制常量（转换时使用，cast (…as unsigned)）&lt;/li&gt;
&lt;li&gt;日期时间常量
&lt;ul&gt;
&lt;li&gt;包括年、月、日，数据类型为 DATE&lt;/li&gt;
&lt;li&gt;包括小时数、分钟数、秒数及微秒数，数据类型为 TIME&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位字段值（了解）&lt;/li&gt;
&lt;li&gt;布尔值&lt;/li&gt;
&lt;li&gt;NUll 值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;变量
&lt;ol&gt;
&lt;li&gt;用户变量：用户在表达式中使用自己定义的变量，用户变量前加 @用来区分列名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;运算符
&lt;ol&gt;
&lt;li&gt;算术运算符：+、-、*、/&lt;/li&gt;
&lt;li&gt;位运算符：&amp;amp;（与）、|（位）、^（位异或）、~（位取反）、&amp;gt;&amp;gt;（位右移，除以 2）、&amp;lt;&amp;lt;（位左移，乘以 2）&lt;br&gt;
3. 比较运算符： 逻辑非、逻辑与、逻辑或、逻辑异或&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;表达式&lt;/li&gt;
&lt;li&gt;内置函数
&lt;ul&gt;
&lt;li&gt;数学函数：ABS（）—— 绝对值、SORT（）—— 去开&lt;/li&gt;
&lt;li&gt;聚合函数：COUNT（）—— 计数&lt;/li&gt;
&lt;li&gt;字符串函数：ASCII（）—— 转换成 ASCII 码、CHAR（）—— 转换城字符串&lt;/li&gt;
&lt;li&gt;日期和时间函数：NOW（）—— 截取当前是时间值、Year（）—— 截取当前年份&lt;/li&gt;
&lt;li&gt;加密函数：encode（）、encrypt（）&lt;/li&gt;
&lt;li&gt;类型转换：cast（）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三节数据定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节数据定义&#34;&gt;#&lt;/a&gt; 第三节：数据定义&lt;/h3&gt;
&lt;h4 id=&#34;一数据库模式定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据库模式定义&#34;&gt;#&lt;/a&gt; 一。数据库模式定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新建数据库：create database 数据库名&lt;/li&gt;
&lt;li&gt;选择数据库：use 数据库名&lt;/li&gt;
&lt;li&gt;修改数据库：alter database 数据库名&lt;/li&gt;
&lt;li&gt;删除数据库：drop database [if exists] 数据库名 （括号的可加可不加）&lt;/li&gt;
&lt;li&gt;查看数据库：show database&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二表定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二表定义&#34;&gt;#&lt;/a&gt; 二。表定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;创建表：create [temporary] table 表名（增加了括号的关键字，只是临时表）&lt;/li&gt;
&lt;li&gt;更新表：alter table 数据库名。表名
&lt;ol&gt;
&lt;li&gt;添加字段：add column 字段名 数据类型 是否为空 default  after 字段名（after 在哪个字段后面增加）&lt;/li&gt;
&lt;li&gt;修改字段：change column | alter | modify 现在的字段名 更改的字段名 数据类型 是否为空 default’ ’
&lt;ul&gt;
&lt;li&gt;alter 只能修改和删除默认值&lt;/li&gt;
&lt;li&gt;change 可以修改表中字段名，类型，默认值&lt;/li&gt;
&lt;li&gt;modify 只可以修改现有字段的类型和默认值等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除字段名：alter table 表名 drop column 字段名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;重命名数据表：
&lt;ul&gt;
&lt;li&gt;alter table 原表名 rename 新表名；&lt;/li&gt;
&lt;li&gt;alter table 原表名 to 新表名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除表：drop table [if exists] 表名&lt;/li&gt;
&lt;li&gt;查看表：show columns from 表名；(desc)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三索引定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三索引定义&#34;&gt;#&lt;/a&gt; 三。索引定义&lt;/h4&gt;
&lt;p&gt;索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用途索引
&lt;ul&gt;
&lt;li&gt;普通索引（index）&lt;/li&gt;
&lt;li&gt;唯一性索引（unique）&lt;/li&gt;
&lt;li&gt;主键（primary key）&lt;/li&gt;
&lt;li&gt;全文索引（fulltext）[引擎 Myisam]&lt;/li&gt;
&lt;li&gt;聚簇索引 [引擎 InnoDB]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列级索引
&lt;ul&gt;
&lt;li&gt;单列索引&lt;/li&gt;
&lt;li&gt;组合索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加方法：create [unique] index 索引名 on 表名 （创建索引的列名 [(length)] [ASC|DESC]）&lt;/li&gt;
&lt;li&gt;查看索引：show index from 数据库名。表名&lt;/li&gt;
&lt;li&gt;删除索引：drop index 索引名 on 表名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四节数据更新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节数据更新&#34;&gt;#&lt;/a&gt; 第四节：数据更新&lt;/h3&gt;
&lt;h4 id=&#34;一插入数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一插入数据&#34;&gt;#&lt;/a&gt; 一。插入数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;insert into 表名（字段名）values (数据),(数据)&lt;/li&gt;
&lt;li&gt;insert 表名 set 字段名 = {}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二删除数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二删除数据&#34;&gt;#&lt;/a&gt; 二。删除数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;delete from 表名 where&lt;/li&gt;
&lt;li&gt;truncate 表名 ——（全部清空）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三修改数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三修改数据&#34;&gt;#&lt;/a&gt; 三。修改数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;update 表名 set 字段名 = 数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第五节数据查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五节数据查询&#34;&gt;#&lt;/a&gt; 第五节：数据查询&lt;/h3&gt;
&lt;h4 id=&#34;一selecet语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一selecet语句&#34;&gt;#&lt;/a&gt; 一.selecet 语句&lt;/h4&gt;
&lt;h4 id=&#34;二列的选择与指定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二列的选择与指定&#34;&gt;#&lt;/a&gt; 二。列的选择与指定&lt;/h4&gt;
&lt;h4 id=&#34;三from子句与多表连接查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三from子句与多表连接查询&#34;&gt;#&lt;/a&gt; 三.from 子句与多表连接查询&lt;/h4&gt;
&lt;h3 id=&#34;第六节视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六节视图&#34;&gt;#&lt;/a&gt; 第六节：视图&lt;/h3&gt;
&lt;h4 id=&#34;一创建视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一创建视图&#34;&gt;#&lt;/a&gt; 一。创建视图&lt;/h4&gt;
&lt;h4 id=&#34;二删除视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二删除视图&#34;&gt;#&lt;/a&gt; 二。删除视图&lt;/h4&gt;
&lt;h4 id=&#34;三修改视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三修改视图&#34;&gt;#&lt;/a&gt; 三。修改视图&lt;/h4&gt;
&lt;h4 id=&#34;四查看视图定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四查看视图定义&#34;&gt;#&lt;/a&gt; 四。查看视图定义&lt;/h4&gt;
&lt;h4 id=&#34;五更新视图数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五更新视图数据&#34;&gt;#&lt;/a&gt; 五。更新视图数据&lt;/h4&gt;
&lt;h4 id=&#34;六查询视图数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六查询视图数据&#34;&gt;#&lt;/a&gt; 六。查询视图数据&lt;/h4&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第五章数据库编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五章数据库编程&#34;&gt;#&lt;/a&gt; 第五章：数据库编程&lt;/h2&gt;
&lt;h3 id=&#34;第一节存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节存储过程&#34;&gt;#&lt;/a&gt; 第一节：存储过程&lt;/h3&gt;
&lt;h4 id=&#34;一存储过程的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一存储过程的基本概念&#34;&gt;#&lt;/a&gt; 一。存储过程的基本概念&lt;/h4&gt;
&lt;p&gt;就是一组为了完成某项特定功能的 SQL 语句集，实质上就是一段存储在数据库中的代码&lt;/p&gt;
&lt;p&gt;优点如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高运行速度；&lt;/li&gt;
&lt;li&gt;增强了 SQL 的功能的灵活性；&lt;/li&gt;
&lt;li&gt;可以降低网络的通信量；&lt;/li&gt;
&lt;li&gt;减轻了程序编写的工作量；&lt;/li&gt;
&lt;li&gt;间接实现了安全控制功能；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二创建存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二创建存储过程&#34;&gt;#&lt;/a&gt; 二。创建存储过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;delimiter $$ —— 修改结束符为 $$，因为在使用的封装的时候会经常使用；号，程序会识别出错，为了避免，所以在使用 procedure 的时候，需要先把结束符更改一下&lt;/li&gt;
&lt;li&gt;create procedure [IN | OUT | INPUT] 参数名 数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三存储过程体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三存储过程体&#34;&gt;#&lt;/a&gt; 三。存储过程体&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;局部变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明局部变量：declare 变量名 数据类型；若不给的话，默认数据类型为 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部变量赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SET 变量名 = 数值&lt;/li&gt;
&lt;li&gt;select 字段名 into 要赋值的变量名 表名（返回的结果集只能有一行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程控制语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If    else  end if&lt;/li&gt;
&lt;li&gt;case    when 条件 then 语句    end case&lt;/li&gt;
&lt;li&gt;while  do  end while |  repeat  until   end repeat  | loop     end loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游标（可以存多个变量，因为 select into 只能保存一行数据，所以可以建立一个游标，再从游标中获取单行数据放入局部变量中）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;打开游标：open 游标名&lt;/li&gt;
&lt;li&gt;读取游标：fetch 游标名 into 变量&lt;/li&gt;
&lt;li&gt;关闭游标：close 游标名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;四调用存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四调用存储过程&#34;&gt;#&lt;/a&gt; 四。调用存储过程&lt;/h4&gt;
&lt;p&gt;其实就是调用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用方法
&lt;ul&gt;
&lt;li&gt;CALL 存储过程名（）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;五删除存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五删除存储过程&#34;&gt;#&lt;/a&gt; 五。删除存储过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;drop procedure [if exists] 存储过程名；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;六样式案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六样式案例&#34;&gt;#&lt;/a&gt; 六。样式案例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;use 数据库名			先调用
delimiter $$		  修改结束符,关闭终端后，会更改回;
create procedure 存储过程名 (IN p_no varchar(10),IN p_name varchar(255))

begin
declare a int default 0;
declare b int;
declare c int;
set b = 10;
select Id into c from pro where pno=&#39;001&#39;;

	insert into pro(pno,pname) values (p_no,p_name);
end $$

call 存储过程名 (实参)		不用觉得很难，其实就是封装
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;七教材案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七教材案例&#34;&gt;#&lt;/a&gt; 七。教材案例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;delimiter $$
create procedure pro_num (OUT ROWS INT)
begin
declare cid INT;
declare found boolean default true;
declare cur_cid cursor for
	select pno form pro;
declare continue handler for not found 
	set found = 0;
set ROWS =0;
open cur_cid;
fetch cur_cid into cid;
while found do
set ROWS=ROWS+1;
fetch cur_cid into cid;
end while;
colse cur_cid
end $$
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第二节存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节存储函数&#34;&gt;#&lt;/a&gt; 第二节：存储函数&lt;/h3&gt;
&lt;h4 id=&#34;一创建存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一创建存储函数&#34;&gt;#&lt;/a&gt; 一。创建存储函数&lt;/h4&gt;
&lt;p&gt;create function 函数名 (形参 形参的数据类型)&lt;/p&gt;
&lt;h4 id=&#34;二调用存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二调用存储函数&#34;&gt;#&lt;/a&gt; 二。调用存储函数&lt;/h4&gt;
&lt;p&gt;select 函数名 (实参)&lt;/p&gt;
&lt;h4 id=&#34;三删除存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三删除存储函数&#34;&gt;#&lt;/a&gt; 三。删除存储函数&lt;/h4&gt;
&lt;p&gt;drop function [if exists] 函数名；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;use 数据库名;
delimiter $$
create function 函数名(形参+形参的数据类型)
	returns 返回值类型
	deterministic				表示函数的 返回值完全由输入参数决定
begin

end $$
delimiter ;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第六章数据库安全与保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六章数据库安全与保护&#34;&gt;#&lt;/a&gt; 第六章：数据库安全与保护&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库完整性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库完整性&#34;&gt;#&lt;/a&gt; 第一节：数据库完整性&lt;/h3&gt;
&lt;h4 id=&#34;一完整性约束条件的作用对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一完整性约束条件的作用对象&#34;&gt;#&lt;/a&gt; 一。完整性约束条件的作用对象&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;列级约束&lt;/p&gt;
&lt;p&gt;列级约束主要指对列的类型、取值范围、精度等的约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据类型的约束&lt;/li&gt;
&lt;li&gt;对数据格式的约束&lt;/li&gt;
&lt;li&gt;对取值范围或取值集合的约束&lt;/li&gt;
&lt;li&gt;对空值的约束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组约束&lt;/p&gt;
&lt;p&gt;元组约束指元组中各个字段之间的相互约束，例如某个活动的开始日期小于结束日期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表级约束&lt;/p&gt;
&lt;p&gt;表级约束指若干元组之间、关系之际的联系的约束，常用在外键上&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二。定义与实现完整性约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实体完整性：保证记录不重复，至少有一列值不重复，用 primary key 添加约束&lt;/p&gt;
&lt;p&gt;候选键约束用关键字 unique 进行约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个表只能由一个主键，但是候选键可以有若干个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照完整性：主要指两个表之间的关系，比如课程表开设依赖于教师表，没有教师就不能由教师的课，保证数据的正确性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;foreign key(本表字段)
	references 外键表(外键的字段名)
		on delete (restrict|cascade|set null|no action)
		on update (restrict|cascade|set null|no action)
		
restrict		当被参照表进行删除或更新时，系统拒绝该操作
cascade			两边可以实时更新
set null|		被参照表（主表）更新时，另一边更改为null
no action		当被参照表进行删除或更新时，系统拒绝该操作,与restrict相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义完整性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非空约束：在创建表或更新表结构的时候在字段后面增加 &lt;code&gt;not null&lt;/code&gt;  表示该字段不能为空&lt;/li&gt;
&lt;li&gt;check 约束：在创建表或更新表结构的时候使用，可作用在整张表或者单个字段上，用法跟 &lt;code&gt;not null&lt;/code&gt;  一致，不过是增加了 sql 的限定条件。例：年龄不允许小于等于 0。
&lt;ul&gt;
&lt;li&gt;作用在字段上，则是基于列的 check 约束&lt;/li&gt;
&lt;li&gt;作用在表上，则是基于表的 check 约束&lt;/li&gt;
&lt;li&gt;语法：check (sql 表达式)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名完整性约束&lt;/p&gt;
&lt;p&gt;就是给约束起一个名字，方便后面对这个约束进行删除或修改等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给约束起一个名字&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;mysql&amp;gt; create table t_user(
    -&amp;gt; id int(10),
    -&amp;gt; name varchar(32) not null,
    -&amp;gt; constraint t_user_id_pk primary key(id)
    -&amp;gt; );
Query OK, 0 rows affected (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整性约束不能直接被修改。若要修改某个约束，其实是先把约束删除，在添加约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加约束
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]primary key(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]foreign key(外键字段名) refernces 被参照表(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]unique key(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除约束
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop foreign key 外键约束名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop primary key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop 约束名|候选键字段名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二节触发器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节触发器&#34;&gt;#&lt;/a&gt; 第二节：触发器&lt;/h3&gt;
&lt;p&gt;触发器是保护表数据的数据对象，当指定的表发生插入、更新、删除的时候触发，进行相应的动作。&lt;strong&gt;注：查询不会触发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建触发器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;create trigger 触发器名 触发器触发的时刻 触发事件 
	on 与触发器绑定的表名 for each row 触发器主体（可以是单条sql语句，也可以是多条执行语句，但需要使用begin...end）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除触发器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop trigger [if exists][触发器所在的数据库名.]触发器名&lt;/code&gt; ，若没有指定则为当前默认数据库，修改前需要先删除后创建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 NEW 或者 OLD 这两张虚拟表
&lt;ul&gt;
&lt;li&gt;NEW 表示为最新的虚拟表&lt;/li&gt;
&lt;li&gt;OLD 表示为 sql 语句执行前的表，且全部数据为只读，不能被更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在触发器涉及对触发表自身的更新操作时、，只能使用 before update 触发器，after update 不被允许&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第三节安全性与访问控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节安全性与访问控制&#34;&gt;#&lt;/a&gt; 第三节：安全性与访问控制&lt;/h3&gt;
&lt;p&gt;数据库的安全性是指&lt;strong&gt;保护数据库以防止不合法的使用而造成数据泄露、更改或破坏，所以安全性对于任何一个 DBMS 来说都是至关重要的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 mysql 中，&lt;strong&gt;数据库系统对数据定 安全管理是使用身份验证、数据库用户权限确认等访问控制措施，来保护数据库中的信息资源，以防止这些数据遭受破坏&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;一用户账号管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一用户账号管理&#34;&gt;#&lt;/a&gt; 一。用户账号管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建用户账号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt; create user &#39;user_name&#39;@&#39;host_name&#39; IDENTIFIED BY [PASSWORD]password
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建的时候，需要当前登录的用户拥有 mysql 数据库的 insert 权限或全局的 create insert 权限&lt;/li&gt;
&lt;li&gt;创建用户时，若用户名一直，主机名不同，则为两个账号；&lt;/li&gt;
&lt;li&gt;新创建的用户权限是能 show，不用 use 数据库，因而无法访问数据库表；&lt;/li&gt;
&lt;li&gt;create user 时可以不使用密码，但 mysql 允许该操作，但不推荐&lt;/li&gt;
&lt;li&gt;创建用户时，用户名和主机名都重复了会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;drop user &#39;用户名&#39;@&#39;主机名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;删除用户的时候可以删除一个或多个，并且消除它们的权限&lt;/li&gt;
&lt;li&gt;要删除用户的话，必须当前用户拥有 mysql 的删除权限或者全局的删除权限&lt;/li&gt;
&lt;li&gt;删除的时候没有给主机名，默认为 %&lt;/li&gt;
&lt;li&gt;用户的删除不会影响他们创建的表、索引或其他数据库对象，因为数据库没有记录是谁创建了这些对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;rename user &#39;当前用户名&#39;@&#39;主机号&#39; to &#39;新的用户名&#39;@&#39;主机号&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;需要拥有相对应的权限&lt;/li&gt;
&lt;li&gt;若系统中旧帐户不存在或者新账户已存在，则会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改用户密码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;set password for &#39;用户名&#39;@&#39;主机名&#39; = password(&#39;更改的新密码&#39;)|已经用password函数加密过的散列值
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;直接写明文是不可以的，因为存储在 mysql.user 表中，都是以 password 函数加密后的形式展示，但是真正输入密码的时候还是使用 password 加密前的密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二账号权限管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二账号权限管理&#34;&gt;#&lt;/a&gt; 二。账号权限管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;权限的授予：&lt;/p&gt;
&lt;p&gt;新的 SQL 用户不允许访问属于其他 SQL 用户的表，也不能创建自己的表，它必须被授权。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列权限&lt;/strong&gt;：和表中的一个具体列相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表权限&lt;/strong&gt;：和一个具体表中的所有数据相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库权限&lt;/strong&gt;：和一个具体的数据库中的所有表相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户权限&lt;/strong&gt;：和 mysql 所有的数据库相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看用户的权限： &lt;code&gt;show grants for &#39;用户名&#39;@&#39;主机名&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;案例演示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;授予用户 &lt;code&gt;zhangsan&lt;/code&gt;  在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  的表 &lt;code&gt;customers&lt;/code&gt;  上拥有对列的 &lt;code&gt;cust_id&lt;/code&gt;  和列 &lt;code&gt;cust_name&lt;/code&gt;  的 SELECT 权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant select(cust_id,cust_name)
	ON mysql_test.customers
	TO &#39;zhangsan&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前系统不存储在用户 &lt;code&gt;liming&lt;/code&gt;  和用户 &lt;code&gt;huang&lt;/code&gt; ，要求创建这两个用户，并设置对应的系统登录口令，同时授权他们在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  的表 &lt;code&gt;customers&lt;/code&gt;  上拥有的 SLECT 和 UPDATE 的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant SELECT,UPDATE
	ON mysql_test.customers
	TO &#39;liming&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;,
		&#39;huang&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;456&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;授予系统中已存在用户 &lt;code&gt;wangwu&lt;/code&gt;  可以在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  中执行所有数据库操作的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant all
	ON mysql_test.*
	TO &#39;wangwu&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;授予当前系统中已存在用户 &lt;code&gt;wangwu&lt;/code&gt;  拥有创建用户的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant CREATE USER
	ON *.*
	TO &#39;wangwu&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三权限的转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三权限的转移&#34;&gt;#&lt;/a&gt; 三。权限的转移&lt;/h4&gt;
&lt;p&gt;权限转移的语句其实就是在 grant 中增加 with 子句，其中 &lt;code&gt;with grant option&lt;/code&gt;  表示将授予当前用户的权限授予给其他用户，无论其他用户有没有这个权限，且自己的权限不会消失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;授予使用限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max_questions：用户每小时允许执行的查询操作次数。&lt;/li&gt;
&lt;li&gt;max_updates：用户每小时允许执行连接操作次数。&lt;/li&gt;
&lt;li&gt;max_connections：用户每小时允许执行的连接操作次数。&lt;/li&gt;
&lt;li&gt;max_user_connections：用户允许同时建立的连接次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;update user set 限制的权限名 = 0 where user = &#39;用户名&#39;;
flush privileges;		——记得需要刷新之后才能生效（不用grant语句去修改授权表的时候，都需要手动刷新）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演示案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授予当前系统中一个不存在的用户 zhou 在数据库 mysql_test 的表 customers 上拥有 SELECT 和 UPDATE 的权限，并允许可以将自身的这个权限授予给其他用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant SELECT,UPDATE
	ON mysql_test.customers
	TO &#39;zhou&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;
	with grant option;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;四权限的撤销&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四权限的撤销&#34;&gt;#&lt;/a&gt; 四。权限的撤销&lt;/h4&gt;
&lt;p&gt;就是回收用户的权限，操作语句跟授予（grant）很相似，但是&lt;strong&gt;需要操作者账户拥有对全局的创建和更新权限&lt;/strong&gt;。语句上就是把 &lt;code&gt;grant&lt;/code&gt;  更改为 &lt;code&gt;revoke&lt;/code&gt; ，把 &lt;code&gt;TO&lt;/code&gt;  改成 &lt;code&gt;FROM&lt;/code&gt; 。可以收回特定用户的部分权限，也可以收回特定用户的全部权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;回收系统中已存在的用户 zhou 在数据库 mysql_test 的表 customers 上的 SELECT 权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;revoke SELECT
	ON mysql_test.customers
	FROM &#39;zhou&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回收系统中已存在的用户 zhou 在数据库 mysql_test 的表 customers 上的所有权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;revoke all
	ON mysql_test.customers
	FROM &#39;zhou&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四节事务与并发控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节事务与并发控制&#34;&gt;#&lt;/a&gt; 第四节：事务与并发控制&lt;/h3&gt;
&lt;h3 id=&#34;一事务的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一事务的概念&#34;&gt;#&lt;/a&gt; 一。事务的概念&lt;/h3&gt;
&lt;p&gt;​	事务是用户定义的一个数据操作序列，这些操作可欧威一个完整的工作单元，&lt;strong&gt;要么全部执行，要么全部不执行，是一个不可分割的工作单位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;** 事务与程序的不同：** 程序是静止的，事务是动态的，是程序的执行而不是程序本身；同一程序的多个独立执行可以同时进行，而每一步执行则是一个不同的事务&lt;/p&gt;
&lt;h3 id=&#34;二事务的acid特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二事务的acid特征&#34;&gt;#&lt;/a&gt; 二。事务的 ACID 特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomieity）
&lt;ul&gt;
&lt;li&gt;事务的原子性保证事务包含的一组更新操作是原子不可分的，即事务是不可分割的最小工作单位，所包含的这些操作是一个整体。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性（Consistency）
&lt;ul&gt;
&lt;li&gt;一致性要求事务必须满足于数据库的完整性约束，且事务执行完毕后将数据库由一个一致性状态转变到另一个一致性状态。数据库的一致性撞他是一种以一致性规则为基础的逻辑属性，一致性和原子性密切相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）
&lt;ul&gt;
&lt;li&gt;隔离性要求事务是彼此独立的、隔离的，即一个事务的执行不能被其他事务所干扰，一个事务对数据库变更的结果必须在它 COMMIT 后，另一个事务才能存取。&lt;/li&gt;
&lt;li&gt;多个事务并发执行时，其结果等价于它们的一种顺序执行的结果，就如同串行调度执行事务一般。这一特性也称为&lt;strong&gt;可串行性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续性（Durability）
&lt;ul&gt;
&lt;li&gt;持久性也称为永久性，是指一个事务一单提交，它对数据库中数据的改变就应该是永久性的，且接下来的其他操作或故障不应该改对其执行结果有任何影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三并发操作问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三并发操作问题&#34;&gt;#&lt;/a&gt; 三。并发操作问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;事务的并发控制的基本单位&lt;/strong&gt;，保证事务的 ACID 特征是事务处理的重要任务。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;典型的并发操作问题（破坏了事务的隔离性）
&lt;ul&gt;
&lt;li&gt;丢失更新
&lt;ul&gt;
&lt;li&gt;两个事务同时修改数据，导致一方的修改被丢失，这就是由于对数据的并发操作而带来的数据不一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不可重复读
&lt;ul&gt;
&lt;li&gt;指事务一读取数据后，事务二更新数据后，事务一无法读取到前一次的读取结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读 “脏” 数据
&lt;ul&gt;
&lt;li&gt;银行取款问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决并发操作的数据不一致性问题的方法有
&lt;ul&gt;
&lt;li&gt;封锁&lt;/li&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;li&gt;乐观控制法&lt;/li&gt;
&lt;li&gt;多版本并发控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四封锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四封锁&#34;&gt;#&lt;/a&gt; 四。封锁&lt;/h3&gt;
&lt;p&gt;封锁是最常用的并发控制技术。基本思想是：需要时，事物通过向系统请求对它所希望的数据对象（如数据库中的记录）加锁，以确保它不被非预期改变&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个锁实质上是允许或阻止一个事物对一个数据对象的存取特权，基本的封锁类型有两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排他锁（Exclusive Lock，X 锁），一般写操作要求用 X 锁&lt;/li&gt;
&lt;li&gt;共享锁（SharedLock，S 锁），一般读操作要求用 S 锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用封锁进行并发控制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若事务 T 对数据 D 加锁，则所有的事务对数据 D 的锁请求都需要等到事务 T 放锁&lt;/li&gt;
&lt;li&gt;若事务 T 对数据 D 加了 S 锁，则别的事务还可以对数据 D 请求 S 锁&lt;/li&gt;
&lt;li&gt;事务执行数据库操作时都要先请求响应的锁，即对读请求 S 锁，对更新（插入、删除、修改）请求 X 锁。这个过程一般时有 DBMS 在执行操作时自动隐含地进行&lt;/li&gt;
&lt;li&gt;事务一直占有获得的锁直到事务 commit 或 rollback 时释放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此封锁机制可以解决上述并发操作所带来的三个不一致性问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;封锁的粒度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常以粒度来描述封锁的&lt;strong&gt;数据单元的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DBMS 可以决定不同粒度的锁。由最底层的数据元素到最高层的整个数据库，粒度越细，并发性越大，但软件复杂性和系统开销也就越大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;封锁的级别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;0 级封锁&lt;/p&gt;
&lt;p&gt;封锁的事务不重写其他非 0 级封锁事务的未提交的更新数据。这种状态实际上实用价值不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务不允许重写未提交的更新数据。这防止了丢失更新的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务既不重写也不读未提交的更新数据。这除了 1 级封锁的效果外还防止了读脏数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务不读未提交的更新数据，不写任何（包括读操作的）未提交的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁和活锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;活锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;级别低的事务无法执行&lt;/li&gt;
&lt;li&gt;避免方法：采用先来先服务的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁（两个以上事务循环等待被同组中的另一事务锁住的数据单元的清醒，称为 “死锁 “）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性锁请求&lt;/li&gt;
&lt;li&gt;锁请求排序&lt;/li&gt;
&lt;li&gt;序列化处理&lt;/li&gt;
&lt;li&gt;资源剥夺&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对待死锁的另一种办法时不去防止，而让其发生并随时进行检测，一旦检测到系统已发生了死锁再进行解除处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可串行性&lt;/p&gt;
&lt;p&gt;一组事务的一个调度就是它们的基本操作的一种排序。若在一个调度中，对于任意两个事务 T1 和 T2，要么 T1 的所有操作都在 T2 前面，要么反之，则该调度是串行的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;两段封锁法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;封锁是一种并发控制技术，而可串行性是并发控制（调度）的正确性标准。&lt;/p&gt;
&lt;p&gt;两段封锁法（Two-Phase Locking，2PL）是一种最简单而有效的保障封锁其调度是可串行性的方法&lt;/p&gt;
&lt;p&gt;两端封锁法是&lt;strong&gt;事务遵循两段锁协议&lt;/strong&gt;的调度方法。所谓协议，就是所有事物都必须遵循的关于基本操作执行顺序的一种限制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发展（Growing）或加锁阶段&lt;/p&gt;
&lt;p&gt;在此段期间，对任一数据对象进行任何操作之前，事物都要获得该对象的一个相应的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收缩（Shrinking）或释放锁阶段&lt;/p&gt;
&lt;p&gt;一旦事务释放了一个锁，则标明它已进入了此阶段，此后它就不能再请求任何另外的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定理：遵循两端锁协议的事务的任何并发调度都是可串行化的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第五节备份与恢复&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五节备份与恢复&#34;&gt;#&lt;/a&gt; 第五节：备份与恢复&lt;/h3&gt;
&lt;p&gt;为了保证数据库的&lt;strong&gt;可靠性&lt;/strong&gt;和&lt;strong&gt;完整性&lt;/strong&gt;，DBMS 通常会采用各种有效的措施来进行维护。&lt;/p&gt;
&lt;p&gt;造成数据库中的数据丢失或被破坏可能是由于以下原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件故障&lt;/li&gt;
&lt;li&gt;计算机软件故障&lt;/li&gt;
&lt;li&gt;病毒&lt;/li&gt;
&lt;li&gt;认为误操作&lt;/li&gt;
&lt;li&gt;自然灾害&lt;/li&gt;
&lt;li&gt;盗窃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库备份时通过导出数据或者赋值表文件的方式来制作数据库的复本；数据库恢复则是当数据库出现故障或遭到破坏时，将备份的数据库加载到系统，从而使数据库从错误状态恢复到备份时的正确状态&lt;/p&gt;
&lt;p&gt;数据库恢复时以备份未基础，它是与备份相对应的系统维护和管理操作。系统进行恢复操作时，先执行一些系统安全性的检查，包括检查要恢复的数据库是否存在、数据库是否变化及数据库文件是否兼容等，然后根据锁曹志勇的数据库备份类型采取相应的恢复措施&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 SQL 语句备份与恢复数据库表数据的方法有一点不足：只能导出或导入数据的内容，而不包括表的结构，如果表的结构文件损坏，则必须先设法恢复原来表的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一备份数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一备份数据&#34;&gt;#&lt;/a&gt; 一．备份数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;SELECT sql语句 INTO OUTFILE &#39;导出的路径+文件名&#39;
FIELDS  TERMINATED BY &#39;,&#39;	每个字段之间用,号隔开
OPTIONALLY ENCLOSED BY &amp;quot;&amp;quot;	每个字段用&amp;quot;&amp;quot;包裹起来
ESCAPED BY &#39;*&#39; 				将转义符\改成*
LINES TERMINATED BY &#39;？&#39;		每一行数据用?隔开
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二导入数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二导入数据&#34;&gt;#&lt;/a&gt; 二。导入数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;LOAD DATA INFILE &#39;路径+文件名&#39;
INTO TABLE &#39;导入到的数据库表名&#39;
[ FIELDS TERMINATED BY 
OPTIONALLY ENCLOSED BY
ESCAPED BY 
LINES TERMINATED BY ] 	这里的设置需要跟备份时的设置保持一致，否则会导入出错
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第七章数据库应用设计与开发实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第七章数据库应用设计与开发实例&#34;&gt;#&lt;/a&gt; 第七章：数据库应用设计与开发实例&lt;/h2&gt;
&lt;h3 id=&#34;第一节需求描述与分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节需求描述与分析&#34;&gt;#&lt;/a&gt; 第一节：需求描述与分析&lt;/h3&gt;
&lt;h4 id=&#34;一功能性需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一功能性需求&#34;&gt;#&lt;/a&gt; 一。功能性需求&lt;/h4&gt;
&lt;h4 id=&#34;二非功能性需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二非功能性需求&#34;&gt;#&lt;/a&gt; 二。非功能性需求&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;质量需求名称&lt;/th&gt;
&lt;th&gt;质量需求的详细要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可靠性&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在不运行期间&lt;/strong&gt;，每个月最多出现一次由外界因素造成的系统故障；&lt;br /&gt;&lt;strong&gt;在运行期间&lt;/strong&gt;，除非遇到特殊情况，否则要&lt;strong&gt;保证正常使用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;正确性&lt;/td&gt;
&lt;td&gt;需要&lt;strong&gt;保证&lt;/strong&gt;数据库中的&lt;strong&gt;数据正确&lt;/strong&gt;和系统的各个&lt;strong&gt;功能模块的业务逻辑正确&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容性&lt;/td&gt;
&lt;td&gt;可以在与 IE 内核兼容的任一主流浏览器上运行 (B/S 结构)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健壮性&lt;/td&gt;
&lt;td&gt;要经常进行健壮性测试，不断加强对非格式化操作的应变能力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第二节系统设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节系统设计&#34;&gt;#&lt;/a&gt; 第二节：系统设计&lt;/h3&gt;
&lt;h3 id=&#34;第三节系统实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节系统实现&#34;&gt;#&lt;/a&gt; 第三节：系统实现&lt;/h3&gt;
&lt;h3 id=&#34;第四节系统测试与维护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节系统测试与维护&#34;&gt;#&lt;/a&gt; 第四节：系统测试与维护&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第八章数据库管理技术的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第八章数据库管理技术的发展&#34;&gt;#&lt;/a&gt; 第八章：数据库管理技术的发展&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库技术发展概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库技术发展概述&#34;&gt;#&lt;/a&gt; 第一节：数据库技术发展概述&lt;/h3&gt;
&lt;h4 id=&#34;一第一代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一第一代数据库系统&#34;&gt;#&lt;/a&gt; 一。第一代数据库系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;代表
&lt;ul&gt;
&lt;li&gt;IMS，层次模型，IBM 公司做的，1969 年&lt;/li&gt;
&lt;li&gt;CODASYL，网状模式，DBTG 公司制作，1970 年 u&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;支持三级模式（层次模型、网状模型、关系模型都支持三级模式）&lt;/li&gt;
&lt;li&gt;用存取路径表示联系&lt;/li&gt;
&lt;li&gt;独立的 DDL&lt;/li&gt;
&lt;li&gt;导航的 DML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二第二代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二第二代数据库系统&#34;&gt;#&lt;/a&gt; 二。第二代数据库系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;关系数据库系统
&lt;ul&gt;
&lt;li&gt;E.F.Codd 提出&lt;strong&gt;关系代数、范式&lt;/strong&gt;，1970 年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统原型
&lt;ul&gt;
&lt;li&gt;IBM System R&lt;/li&gt;
&lt;li&gt;Berkeley INGRES&lt;/li&gt;
&lt;li&gt;1980 年后，新开发的系统都是关系型的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三新一代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三新一代数据库系统&#34;&gt;#&lt;/a&gt; 三。新一代数据库系统&lt;/h4&gt;
&lt;p&gt;OODB 第三代的代表？&lt;/p&gt;
&lt;p&gt;没有被市场普遍接受&lt;/p&gt;
&lt;p&gt;ORDB，新一代将是多种模型并存&lt;/p&gt;
&lt;p&gt;” 第三代 “的基本特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应支持&lt;strong&gt;数据管理&lt;/strong&gt;、&lt;strong&gt;对象管理&lt;/strong&gt;和&lt;strong&gt;知识管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;保持或继承 RDB 的技术&lt;/li&gt;
&lt;li&gt;开放性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用：数据仓库、工程数据库、统计数据库、空间数据库、科学数据库等多种数据库&lt;/p&gt;
&lt;h3 id=&#34;第二节数据仓库与数据挖掘&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据仓库与数据挖掘&#34;&gt;#&lt;/a&gt; 第二节：数据仓库与数据挖掘&lt;/h3&gt;
&lt;h4 id=&#34;一从数据库到数据仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一从数据库到数据仓库&#34;&gt;#&lt;/a&gt; 一。从数据库到数据仓库&lt;/h4&gt;
&lt;p&gt;数据仓库主要特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;面向主题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据的非易失性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据的时变性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据仓库具有三个常用的重要概念，即粒度、分割和维&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;粒度&lt;/p&gt;
&lt;p&gt;粒度问题是设计数据仓库的一个最重要的方面。粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分割&lt;/p&gt;
&lt;p&gt;分割时将数据分散到各自的物理单元中，以便能分别处理，以提高数据处理的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维&lt;/p&gt;
&lt;p&gt;维时人们观察数据的特定角度，是考虑问题时的一类属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据挖掘技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据挖掘技术&#34;&gt;#&lt;/a&gt; 二。数据挖掘技术&lt;/h4&gt;
&lt;p&gt;数据挖掘具备下列几种功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概念描述&lt;/li&gt;
&lt;li&gt;关联分析&lt;/li&gt;
&lt;li&gt;分类与预测&lt;/li&gt;
&lt;li&gt;聚类&lt;/li&gt;
&lt;li&gt;孤立点检测&lt;/li&gt;
&lt;li&gt;趋势和演变分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三节大数据管理技能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节大数据管理技能&#34;&gt;#&lt;/a&gt; 第三节：大数据管理技能&lt;/h3&gt;
&lt;h4 id=&#34;一大数据的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一大数据的定义&#34;&gt;#&lt;/a&gt; 一。大数据的定义&lt;/h4&gt;
&lt;p&gt;数据尚无统一的定义，通常被认为是数据量很大、数据形式多样化的数据&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据量巨大，即大量化（Volume）&lt;/li&gt;
&lt;li&gt;数据种类繁多，即多样化（Variety）&lt;/li&gt;
&lt;li&gt;处理速度快，即快速化（Velocity）&lt;/li&gt;
&lt;li&gt;价值 (Value) 密度低&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二大数据管理技术典型代表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二大数据管理技术典型代表&#34;&gt;#&lt;/a&gt; 二。大数据管理技术典型代表&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;大数据存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL 数据管理系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;键值（Key-value）存储：常见的键值存储数据库包括 Tokyo Cabinet/Tyrant、Redis 和 Oracle BDB 等&lt;/li&gt;
&lt;li&gt;文档存储：常见的文档性数据库由 CouchDB、MongoDB 等&lt;/li&gt;
&lt;li&gt;列存储：常见的列存储数据库由 Hbase&lt;/li&gt;
&lt;li&gt;图存储：图存储数据库是基于图理论构建的，使用节点、属性和边的概念&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MapReduce 技术&lt;/p&gt;
&lt;p&gt;MapReduce 是一种并行变成模型。它把计算过程分解为两个阶段，即 Map 阶段和 Reduce 阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xinyao_idiot.gitee.io/zxy/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%AC%94%E8%AE%B0/</guid>
            <title>科目一笔记</title>
            <link>https://xinyao_idiot.gitee.io/zxy/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%AC%94%E8%AE%B0/</link>
            <category>驾照</category>
            <pubDate>Wed, 14 Jul 2021 13:22:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;科目一笔记&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#科目一笔记&#34;&gt;#&lt;/a&gt; 科目一笔记&lt;/h2&gt;
&lt;h3 id=&#34;1法律-法规及道路交通信号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1法律-法规及道路交通信号&#34;&gt;#&lt;/a&gt; 1. 法律、法规及道路交通信号&lt;/h3&gt;
&lt;h4 id=&#34;11-许可-种类-有效期和申请条件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-许可-种类-有效期和申请条件&#34;&gt;#&lt;/a&gt; 1.1、许可、种类、有效期和申请条件&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;机动车驾驶许可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;驾驶证存在九种类型，分别是 A、B、C、D、E、F、M、N（有轨电车）、P（无轨电车）九种。&lt;/li&gt;
&lt;li&gt;除外 N、P 可分成&lt;strong&gt;方向盘式&lt;/strong&gt;（A、B、C、M）和&lt;strong&gt;方向把式&lt;/strong&gt;（D、E、F）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;机动车驾驶证种类、准假车型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初次申请不得报 A1，A2、B1&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;%E7%A7%91%E7%9B%AE%E4%B8%80%E7%AC%94%E8%AE%B0/image-20210714133622486.png&#34; alt=&#34;image-20210714133622486&#34;&gt;&lt;img data-src=&#34;/zxy/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%AC%94%E8%AE%B0/image-20210714133622486.png&#34; class=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;驾驶证有效期（重点）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有效期分为 6 年、10 年和长期&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;驾驶证的申请条件（重点）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存在影响驾驶的 &lt;code&gt;疾病&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;三年内 &lt;code&gt;吸食、注射毒品&lt;/code&gt; 行为或者接触强制隔离戒毒措施未满三年、或者长期服用依赖性精神药品成瘾尚未戒除的&lt;/li&gt;
&lt;li&gt;造成 &lt;code&gt;交通事务后逃逸&lt;/code&gt; 构成犯罪的&lt;/li&gt;
&lt;li&gt;饮酒后或者 &lt;code&gt;醉酒驾驶&lt;/code&gt; 机动车发生重大交通事故构成犯罪的&lt;/li&gt;
&lt;li&gt;醉酒驾驶营运机动车依法被吊销机动车驾驶证未满十年的&lt;/li&gt;
&lt;li&gt;因其他清醒依法被吊销机动车驾驶证未满二年的&lt;/li&gt;
&lt;li&gt;驾驶许可依法被撤销未满三年的&lt;/li&gt;
&lt;li&gt;法律行政法规定的其他情形&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;申请时需要体检&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;C1、C2 的视力要求为 4.9 以上&lt;/li&gt;
&lt;li&gt;无红绿色盲&lt;/li&gt;
&lt;li&gt;两耳分别距音叉 50 厘米能辨别声源的方向&lt;/li&gt;
&lt;li&gt;双手健全&lt;/li&gt;
&lt;li&gt;下肢健全&lt;/li&gt;
&lt;li&gt;年龄满 18 岁以上即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;12-驾驶证申领与考试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-驾驶证申领与考试&#34;&gt;#&lt;/a&gt; 1.2、驾驶证申领与考试&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;驾驶员考试内容和合格标准
&lt;ol&gt;
&lt;li&gt;内容
&lt;ul&gt;
&lt;li&gt;科目一（机考）90 分&lt;/li&gt;
&lt;li&gt;科目二（实操）80 分
&lt;ul&gt;
&lt;li&gt;倒车入库&lt;/li&gt;
&lt;li&gt;坡道定点停车和起步&lt;/li&gt;
&lt;li&gt;侧方停车&lt;/li&gt;
&lt;li&gt;曲线行驶&lt;/li&gt;
&lt;li&gt;直角转弯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;科目三（实操）90 分&lt;/li&gt;
&lt;li&gt;科目四（机考）90 分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;学习驾驶证明使用规定和考试预约要求
&lt;ul&gt;
&lt;li&gt;申请人已欺骗、贿赂等
&lt;ul&gt;
&lt;li&gt;撤销驾驶许可、三年内部的再次申领驾驶证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪造、变造或使用伪造的驾驶证
&lt;ul&gt;
&lt;li&gt;处 2000 以上 5000 以下罚款，构成犯罪的，依法追究刑事责任&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;13-驾驶证的使用与管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-驾驶证的使用与管理&#34;&gt;#&lt;/a&gt; 1.3、驾驶证的使用与管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;机动车驾驶证实习期
&lt;ul&gt;
&lt;li&gt;有 12 个月实习期，实习期间需要在车后贴或者悬挂统一式样的实习标志&lt;/li&gt;
&lt;li&gt;实习期不得上高速，或者有三年以上的老师傅带着&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有效期满、转入、变更换证
&lt;ul&gt;
&lt;li&gt;有效期：6 年、10 年、永久&lt;/li&gt;
&lt;li&gt;有效期过了还有 90 天的换证申请期，超过驾驶证有效期一年以上将会注销&lt;/li&gt;
&lt;li&gt;迁户口，应当向迁入地车辆管理所申请换证&lt;/li&gt;
&lt;li&gt;居住，向居住地车辆管理所申请换证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;驾驶证意识补证
&lt;ol&gt;
&lt;li&gt;驾驶证遗失的，向机动车驾驶证核发地的车辆管理所申请补发。之前的驾驶证作废&lt;/li&gt;
&lt;li&gt;驾驶证被依法扣留、扣押、暂扣期间不可补发&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;14-道路交通安全违法行为及积分分值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-道路交通安全违法行为及积分分值&#34;&gt;#&lt;/a&gt; 1.4、道路交通安全违法行为及积分分值&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;道路交通安全违法行为积分规则及分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个周期 12 个月，一共 12 分&lt;/li&gt;
&lt;li&gt;扣分分值：12 分、6 分、3 分、2 分、1 分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各种道路交通安全违法行为的积分分值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;十二分
&lt;ol&gt;
&lt;li&gt;驾驶与准假车型不符的机动车&lt;/li&gt;
&lt;li&gt;饮酒后驾车&lt;/li&gt;
&lt;li&gt;驾驶营运客车，超载 20%&lt;/li&gt;
&lt;li&gt;造成交通事故后逃逸，尚不构成犯罪&lt;/li&gt;
&lt;li&gt;上道路的机动车未悬挂车牌号、或者故意遮挡、无损、不安规定安装机动车号牌的&lt;/li&gt;
&lt;li&gt;使用伪造、变造的车牌号、行驶证、驾驶证、校车标牌或者使用其他机动车号牌的行驶证&lt;/li&gt;
&lt;li&gt;机动车在高速公路上倒车、逆行、穿越中央分隔带掉头的&lt;/li&gt;
&lt;li&gt;驾驶中型以上的载客载货汽车、小车、危险物品运输车辆超速 20%、在高速公路、城市快速路意外的道路上超速 50%、驾驶其他机动车实行超速 50% 的&lt;/li&gt;
&lt;li&gt;连续驾车 4 小时未休息 20 分钟的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;六分
&lt;ol&gt;
&lt;li&gt;机动车驾驶证被暂扣期间驾驶机动车&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;闯红灯&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;驾驶营运客车（不包括公交汽车）、载客汽车载人超过核定人数未达 20%&lt;/li&gt;
&lt;li&gt;驾驶中型以上的载客载货汽车、校车、危险武平运输车车辆在高速公路、城市快速路上行驶超速，但没有超过 20% 的&lt;/li&gt;
&lt;li&gt;超速 20% 以上未达到 50%&lt;/li&gt;
&lt;li&gt;载物货车超载 30%&lt;/li&gt;
&lt;li&gt;在高速公路上停车&lt;/li&gt;
&lt;li&gt;违法占用应急车道&lt;/li&gt;
&lt;li&gt;低能见度情况下，在高速公路上不按照规定驾驶的&lt;/li&gt;
&lt;li&gt;驾驶机动车运载超限的不可解体的武平，为按指定的时间、路线、速度、行驶或者为悬挂明显标志的&lt;/li&gt;
&lt;li&gt;载运易燃易爆物品等未按照指定时间、路线、速度行驶或者未悬挂警示标志并采取必要的安全措施的&lt;/li&gt;
&lt;li&gt;连续驾驶 4 小时未停车休息或休息小于 20 分钟&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不按照规定避让校车&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;三分
&lt;ul&gt;
&lt;li&gt;驾驶机动车经过人行道不按规定减速、停车、避让行人的&lt;/li&gt;
&lt;li&gt;在道路上车辆发生故障未按规定使用灯光和设置警告标志&lt;/li&gt;
&lt;li&gt;上道路的机动车未按照规定进行安全技术检验的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;违法记分清楚处理要求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;满 12 分需要重新考科目一&lt;/li&gt;
&lt;li&gt;未满 12 分的需要缴纳罚款&lt;/li&gt;
&lt;li&gt;未满 12 分且不缴纳罚款，扣的分值将继承到下一周期&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;15-交通信号灯的分类-含义-识别和作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-交通信号灯的分类-含义-识别和作用&#34;&gt;#&lt;/a&gt; 1.5、交通信号灯的分类、含义、识别和作用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;机动车信号灯和非机动车信号灯
&lt;ul&gt;
&lt;li&gt;机动车信号灯分为圆饼灯和方向灯
&lt;ul&gt;
&lt;li&gt;圆饼灯只管向前，不管左右&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;闪光警告信号灯
&lt;ul&gt;
&lt;li&gt;提示车辆、行人通行时注意瞭望，确认安全后通过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方向指向信号灯&lt;/li&gt;
&lt;li&gt;车道信号灯
&lt;ul&gt;
&lt;li&gt;一般设置在车道上方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;铁道平交道口信号灯
&lt;ul&gt;
&lt;li&gt;两个红灯交替闪烁或一个红灯亮，表示禁止车辆、行人通行&lt;/li&gt;
&lt;li&gt;红灯熄灭，方可允许通行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;人行横道信号灯&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;16-交警手势信号的分类-含义-识别和作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-交警手势信号的分类-含义-识别和作用&#34;&gt;#&lt;/a&gt; 1.6、交警手势信号的分类、含义、识别和作用&lt;/h4&gt;
&lt;p&gt;等级划分：交警 ——&amp;gt; 信号灯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单手信号
&lt;ul&gt;
&lt;li&gt;停止&lt;/li&gt;
&lt;li&gt;左转弯&lt;/li&gt;
&lt;li&gt;减速&lt;/li&gt;
&lt;li&gt;变道&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双手信号
&lt;ul&gt;
&lt;li&gt;左转弯&lt;/li&gt;
&lt;li&gt;右转弯&lt;/li&gt;
&lt;li&gt;靠边停车&lt;/li&gt;
&lt;li&gt;直行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;17-交通标识的分类-含义-识别和作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17-交通标识的分类-含义-识别和作用&#34;&gt;#&lt;/a&gt; 1.7、交通标识的分类、含义、识别和作用&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;警告标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;黄色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;禁令标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;红色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指示标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;蓝色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高速、城市指路标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绿色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旅游区标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;棕色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他类型标志&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般都很小的矩形、白色&lt;/li&gt;
&lt;li&gt;辅助、告示、作业区 标志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交通标线&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指示标线
&lt;ul&gt;
&lt;li&gt;白色线条、黄色虚线、白色虚线&lt;/li&gt;
&lt;li&gt;双黄线、单虚单实、双白虚线、三白虚线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;禁止标线
&lt;ul&gt;
&lt;li&gt;黄色实线、白色实线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;警告标线&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;18-道路通行规则内容概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18-道路通行规则内容概述&#34;&gt;#&lt;/a&gt; 1.8、道路通行规则内容概述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;机动车靠右侧通行&lt;/li&gt;
&lt;li&gt;有划分车道和无划分车道
&lt;ul&gt;
&lt;li&gt;无划分车道，应该在道路中间行驶&lt;/li&gt;
&lt;li&gt;有划分车道
&lt;ol&gt;
&lt;li&gt;当存在两条同方向车道时，左侧为快速车道，右侧为慢速车道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按交通信号通行
&lt;ul&gt;
&lt;li&gt;直行 ——&amp;gt; 左转 ——&amp;gt; 右转&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;灯光和喇叭的使用
&lt;ul&gt;
&lt;li&gt;转向灯&lt;/li&gt;
&lt;li&gt;前照灯，夜间照明&lt;/li&gt;
&lt;li&gt;制动灯&lt;/li&gt;
&lt;li&gt;倒车指示灯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;能见度低时（不得使用远光灯）
&lt;ul&gt;
&lt;li&gt;雨、雪、沙尘、冰雹：使用前照灯、示廓灯、后位灯&lt;/li&gt;
&lt;li&gt;雾天：使用雾灯、危险报警闪光灯、前照灯、示廓灯、后位灯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;夜间行车
&lt;ul&gt;
&lt;li&gt;在没有中心线时，150 内不能使用远光灯&lt;/li&gt;
&lt;li&gt;窄桥等地不得使用远光灯&lt;/li&gt;
&lt;li&gt;夜间没有路灯、照明不良或者遇到雾、雨、雪、沙尘等能见度低的情况下行驶时，与前车近距离不可使用远光灯&lt;/li&gt;
&lt;li&gt;通过急弯或没有信号灯控制的路口时，应交替使用远近光灯示意&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;19-道路通行基本规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#19-道路通行基本规则&#34;&gt;#&lt;/a&gt; 1.9、道路通行基本规则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;保持车距
&lt;ul&gt;
&lt;li&gt;100km/h 需要保持 40 米车距&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;110-特殊路况与路段通行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#110-特殊路况与路段通行&#34;&gt;#&lt;/a&gt; 1.10、特殊路况与路段通行&lt;/h4&gt;
&lt;h4 id=&#34;111-避让行人与特殊车辆&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#111-避让行人与特殊车辆&#34;&gt;#&lt;/a&gt; 1.11、避让行人与特殊车辆&lt;/h4&gt;
&lt;h4 id=&#34;112-机动车载人载物及停车规定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#112-机动车载人载物及停车规定&#34;&gt;#&lt;/a&gt; 1.12、机动车载人载物及停车规定&lt;/h4&gt;
&lt;h4 id=&#34;113-机动车牵引挂车规定及故障处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#113-机动车牵引挂车规定及故障处理&#34;&gt;#&lt;/a&gt; 1.13、机动车牵引挂车规定及故障处理&lt;/h4&gt;
&lt;h4 id=&#34;114-高速公路通信规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#114-高速公路通信规则&#34;&gt;#&lt;/a&gt; 1.14、高速公路通信规则&lt;/h4&gt;
&lt;h4 id=&#34;115-道路通行规则综合模拟及实际应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#115-道路通行规则综合模拟及实际应用&#34;&gt;#&lt;/a&gt; 1.15、道路通行规则综合模拟及实际应用&lt;/h4&gt;
&lt;h4 id=&#34;116-驾驶机动车禁止行为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#116-驾驶机动车禁止行为&#34;&gt;#&lt;/a&gt; 1.16、驾驶机动车禁止行为&lt;/h4&gt;
&lt;h4 id=&#34;117-行政强制措施&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#117-行政强制措施&#34;&gt;#&lt;/a&gt; 1.17、行政强制措施&lt;/h4&gt;
&lt;h4 id=&#34;118-违法处罚种类及违规处罚&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#118-违法处罚种类及违规处罚&#34;&gt;#&lt;/a&gt; 1.18、违法处罚种类及违规处罚&lt;/h4&gt;
&lt;h4 id=&#34;119-机动车登记&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#119-机动车登记&#34;&gt;#&lt;/a&gt; 1.19、机动车登记&lt;/h4&gt;
&lt;h4 id=&#34;120-机动车号牌的申领和使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#120-机动车号牌的申领和使用&#34;&gt;#&lt;/a&gt; 1.20、机动车号牌的申领和使用&lt;/h4&gt;
&lt;h4 id=&#34;121-机动车安全技术检验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#121-机动车安全技术检验&#34;&gt;#&lt;/a&gt; 1.21、机动车安全技术检验&lt;/h4&gt;
&lt;h4 id=&#34;122-机动车强制报废&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#122-机动车强制报废&#34;&gt;#&lt;/a&gt; 1.22、机动车强制报废&lt;/h4&gt;
&lt;h4 id=&#34;123-交通事故现场&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#123-交通事故现场&#34;&gt;#&lt;/a&gt; 1.23、交通事故现场&lt;/h4&gt;
&lt;h3 id=&#34;2机动车基本知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2机动车基本知识&#34;&gt;#&lt;/a&gt; 2. 机动车基本知识&lt;/h3&gt;
&lt;h3 id=&#34;3综合复习及考核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3综合复习及考核&#34;&gt;#&lt;/a&gt; 3. 综合复习及考核&lt;/h3&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://xinyao_idiot.gitee.io/zxy/%E9%A9%BE%E7%85%A7/</guid>
            <title>驾照</title>
            <link>https://xinyao_idiot.gitee.io/zxy/%E9%A9%BE%E7%85%A7/</link>
            <category>驾照</category>
            <pubDate>Wed, 14 Jul 2021 13:17:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;报考原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#报考原因&#34;&gt;#&lt;/a&gt; 报考原因&lt;/h2&gt;
&lt;p&gt;报考主要是宿舍的老伙计们都准备报了，家里也觉得有驾照之后再买个车就可以回老家去炫耀，所以就先弄弄看科一。&lt;/p&gt;
&lt;h2 id=&#34;文章内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文章内容&#34;&gt;#&lt;/a&gt; 文章内容&lt;/h2&gt;
&lt;p&gt;之后会按照科目考试顺序增加一些心得笔记，怕到时候忘记了。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
