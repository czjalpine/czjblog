{
    "version": "https://jsonfeed.org/version/1",
    "title": "失心耀的博客 • All posts by \"nginx\" category",
    "description": "",
    "home_page_url": "https://xinyao_idiot.gitee.io/zxy",
    "items": [
        {
            "id": "https://xinyao_idiot.gitee.io/zxy/nginx/",
            "url": "https://xinyao_idiot.gitee.io/zxy/nginx/",
            "title": "Nginx初步学习",
            "date_published": "2021-04-02T08:30:03.000Z",
            "content_html": "<span id=\"more\"></span>\n<h1 id=\"nginx\"><a class=\"markdownIt-Anchor\" href=\"#nginx\">#</a> nginx</h1>\n<p>推荐视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTE=\">尚硅谷 Nginx</span></p>\n<h1 id=\"内容概览\"><a class=\"markdownIt-Anchor\" href=\"#内容概览\">#</a> 内容概览</h1>\n<h2 id=\"1-nginx-简介\"><a class=\"markdownIt-Anchor\" href=\"#1-nginx-简介\">#</a> 1、nginx 简介</h2>\n<p>（1）介绍 nginx 的应用场景和具体可以做什么事情</p>\n<p>（2）介绍什么是反向代理</p>\n<p>（3）介绍什么是负载均衡</p>\n<p>（4）介绍什么是动静分离</p>\n<h2 id=\"2-nginx-安装\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx-安装\">#</a> 2、nginx 安装</h2>\n<p>（1）介绍 nginx 在 linux 系统中如何进行安装</p>\n<h2 id=\"3-nginx-常用的命令和配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3-nginx-常用的命令和配置文件\">#</a> 3、nginx 常用的命令和配置文件</h2>\n<p>（1）介绍 nginx 启动、关闭、重新加载命令</p>\n<p>（2）介绍 nginx 的配置文件</p>\n<h2 id=\"4-nginx-配置实例-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#4-nginx-配置实例-反向代理\">#</a> 4、nginx 配置实例 - 反向代理</h2>\n<h2 id=\"5-nginx-配置实例-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#5-nginx-配置实例-负载均衡\">#</a> 5、nginx 配置实例 - 负载均衡</h2>\n<h2 id=\"6-nginx-配置实例-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#6-nginx-配置实例-动静分离\">#</a> 6、nginx 配置实例 - 动静分离</h2>\n<h2 id=\"7-nginx-原理与优化参数配置\"><a class=\"markdownIt-Anchor\" href=\"#7-nginx-原理与优化参数配置\">#</a> 7、nginx 原理与优化参数配置</h2>\n<h2 id=\"8-搭建-nginx-高可用集群\"><a class=\"markdownIt-Anchor\" href=\"#8-搭建-nginx-高可用集群\">#</a> 8、搭建 nginx 高可用集群</h2>\n<p>（1）搭建 nginx 高可用集群（主从模式）</p>\n<p>（2）搭建 nginx 高可用集群（双主模式）</p>\n<hr>\n<h1 id=\"nginx简介\"><a class=\"markdownIt-Anchor\" href=\"#nginx简介\">#</a> nginx 简介</h1>\n<h2 id=\"1-什么是nginx\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是nginx\">#</a> 1、什么是 nginx</h2>\n<p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</p>\n<h2 id=\"2-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#2-反向代理\">#</a> 2、反向代理</h2>\n<h3 id=\"21-正向代理\"><a class=\"markdownIt-Anchor\" href=\"#21-正向代理\">#</a> 2.1、正向代理</h3>\n<p>需要在客户端配置代理服务器进行指定网站访问</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527212532451.png\" alt=\"image-20210527212532451\"></p>\n<h3 id=\"22-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#22-反向代理\">#</a> 2.2、反向代理</h3>\n<p>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址，不需要在客户端配置代理服务器，就相当于客户端只是单纯的认为我们的反向代理服务器才是真正的服务器。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527212846955.png\" alt=\"image-20210527212846955\"></p>\n<h2 id=\"3-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#3-负载均衡\">#</a> 3、负载均衡</h2>\n<p>单个服务器解决不了，增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527213914267.png\" alt=\"image-20210527213914267\"></p>\n<h2 id=\"4-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#4-动静分离\">#</a> 4、动静分离</h2>\n<p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527215607579.png\" alt=\"image-20210527215607579\"></p>\n<hr>\n<h1 id=\"nginx的安装\"><a class=\"markdownIt-Anchor\" href=\"#nginx的安装\">#</a> nginx 的安装</h1>\n<h2 id=\"1-这里我没有用服务器学习直接xshell远程连接虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#1-这里我没有用服务器学习直接xshell远程连接虚拟机\">#</a> 1、这里我没有用服务器学习，直接 xshell 远程连接虚拟机</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527220757094.png\" alt=\"image-20210527220757094\"></p>\n<h2 id=\"2-进行nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#2-进行nginx安装\">#</a> 2、进行 nginx 安装</h2>\n<h3 id=\"第一步安装pcre\"><a class=\"markdownIt-Anchor\" href=\"#第一步安装pcre\">#</a> 第一步，安装 pcre</h3>\n<ul>\n<li>直接 pcre 官网下载相应的 tar 包</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527222031652.png\" alt=\"image-20210527222031652\"></p>\n<ul>\n<li>\n<p>解压之后进行 pcre-8.44 文件夹，执行 <code>./configure</code>  命令</p>\n</li>\n<li>\n<p>== 这里需要注意的是 linux 系统要安装 gcc 和 gcc-c++ 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> gcc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y gcc-c++</pre></td></tr></table></figure><p>安装完之后在 pcre-8.44 文件夹下执行 <code>./configure</code></p>\n</li>\n<li>\n<p>继续执行 <code>make &amp;&amp; make install</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>至此 prce 安装完成，查看版本 <code>pcre-config --version</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527222734029.png\" alt=\"image-20210527222734029\"></p>\n<h3 id=\"第二步安装-openssl\"><a class=\"markdownIt-Anchor\" href=\"#第二步安装-openssl\">#</a> 第二步，安装 openssl</h3>\n<h3 id=\"第三步安装zlib\"><a class=\"markdownIt-Anchor\" href=\"#第三步安装zlib\">#</a> 第三步，安装 zlib</h3>\n<p>直接通过 yum 命令安装以上两个</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> <span class=\"token function\">make</span> zlib zlib-devel gcc-c++ libtool openssl openssl-devel</pre></td></tr></table></figure><h3 id=\"最后安装nginx\"><a class=\"markdownIt-Anchor\" href=\"#最后安装nginx\">#</a> 最后安装 nginx</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用命令解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -xvf nginx-1.21.0.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 进入 nginx 文件夹</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./configure</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"3-启动服务\"><a class=\"markdownIt-Anchor\" href=\"#3-启动服务\">#</a> 3、启动服务</h2>\n<p><mark>进入目录 /usr/local/nginx/sbin/nginx 启动服务</mark></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223628933.png\" alt=\"image-20210527223628933\"></p>\n<p><mark>进入 nginx 配置文件，发现默认端口是 80</mark></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223908493.png\" alt=\"image-20210527223908493\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223817099.png\" alt=\"image-20210527223817099\"></p>\n<p><mark>在 centOS 中访问到了 nginx 页面</mark></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224249185.png\" alt=\"image-20210527224249185\"></p>\n<h2 id=\"4-在windows-系统中访问\"><a class=\"markdownIt-Anchor\" href=\"#4-在windows-系统中访问\">#</a> 4、在 windows 系统中访问</h2>\n<p>在 windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题</p>\n<ol>\n<li>关闭防火墙</li>\n<li>开放访问的端口号，80 端口</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看开放的端口号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --list-all</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 设置开放的端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 重启防火墙</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>firewall-cmd --reload</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224723786.png\" alt=\"image-20210527224723786\"></p>\n<p>在 windows 系统中也访问到了 nginx 页面</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224751817.png\" alt=\"image-20210527224751817\"></p>\n<h1 id=\"nginx操作的常用命令\"><a class=\"markdownIt-Anchor\" href=\"#nginx操作的常用命令\">#</a> nginx 操作的常用命令</h1>\n<blockquote>\n<p>使用 nginx 操作命令前提条件：必须进入 nginx 的目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/nginx/sbin</pre></td></tr></table></figure><blockquote>\n<p>2、查看 nginx 的版本号</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx -v</span></pre></td></tr></table></figure><blockquote>\n<p>3、启动 nginx</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx</span></pre></td></tr></table></figure><blockquote>\n<p>4、关闭 nginx</p>\n</blockquote>\n<pre><code class=\"language-bashj\">[root@CentOS-7 sbin]# ./nginx -s stop\n</code></pre>\n<blockquote>\n<p>5、重新加载 nginx</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx -s reload</span></pre></td></tr></table></figure><h1 id=\"nginx配置文件\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置文件\">#</a> nginx 配置文件</h1>\n<h2 id=\"1-nginx配置文件位置\"><a class=\"markdownIt-Anchor\" href=\"#1-nginx配置文件位置\">#</a> 1、nginx 配置文件位置</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528202619737.png\" alt=\"image-20210528202619737\"></p>\n<h2 id=\"2-nginx配置文件组成\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx配置文件组成\">#</a> 2、nginx 配置文件组成</h2>\n<p>（1）nginx 配置文件有三部分组成</p>\n<ul>\n<li>第一部分 全局块\n<ul>\n<li>从配置文件开始到 <code>events块</code> 之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令</li>\n<li>比如 worker_processes 1；worker_processes 值越大，可以支持的并发处理量也越多</li>\n</ul>\n</li>\n<li>第二部分 events 块\n<ul>\n<li>events 块涉及的指令主要影响 nginx 服务器与用户的网络连接</li>\n<li>比如 worker_connections   1024; 支持的最大连接数为 1024</li>\n</ul>\n</li>\n<li>第三部分 http 块\n<ul>\n<li>nginx 服务器配置中最频繁的部分</li>\n<li>http 块也可以包括 http 全局块、server 块</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"nginx-配置实例反向代理\"><a class=\"markdownIt-Anchor\" href=\"#nginx-配置实例反向代理\">#</a> nginx 配置实例 =&gt; 反向代理</h1>\n<h2 id=\"1-实现效果\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果\">#</a> 1、实现效果</h2>\n<p>（1）打开浏览器，在浏览器地址栏输入地址 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMjMuY29t\">www.123.com</span>，跳转到 liunx 系统 tomcat 主页面中</p>\n<h2 id=\"2-准备工作\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作\">#</a> 2、准备工作</h2>\n<p>（1）在 liunx 系统安装 tomcat，使用默认端口 8080</p>\n<p>tomcat 安装文件放到 liunx 系统中，解压</p>\n<p>进入 tomcat 的 bin 目录中， <code>./startup.sh</code>  启动 tomcat 服务器</p>\n<p>（2）对外开放访问的端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">8080</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --reload</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看已经开放的端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>firewall-cmd --list-all</pre></td></tr></table></figure><p>（3）在 windows 系统中通过浏览器访问 tomcat 服务器</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210132297.png\" alt=\"image-20210528210132297\"></p>\n<h2 id=\"3-访问过程的分析\"><a class=\"markdownIt-Anchor\" href=\"#3-访问过程的分析\">#</a> 3、访问过程的分析</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210228570.png\" alt=\"image-20210528210228570\"></p>\n<h2 id=\"4-具体配置\"><a class=\"markdownIt-Anchor\" href=\"#4-具体配置\">#</a> 4、具体配置</h2>\n<blockquote>\n<p>第一步 在 windows 系统的 host 文件进行域名和 ip 对应关系的配置</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210439297.png\" alt=\"image-20210528210439297\"></p>\n<p>继续访问 tomcat</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210724394.png\" alt=\"image-20210528210724394\"></p>\n<blockquote>\n<p>第二步 在 nginx 进行请求转发的配置（反向代理配置）</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528211211559.png\" alt=\"image-20210528211211559\"></p>\n<h2 id=\"5-最终测试\"><a class=\"markdownIt-Anchor\" href=\"#5-最终测试\">#</a> 5、最终测试</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528211428444.png\" alt=\"image-20210528211428444\"></p>\n<h1 id=\"nginx反向代理实例2\"><a class=\"markdownIt-Anchor\" href=\"#nginx反向代理实例2\">#</a> nginx 反向代理实例 2</h1>\n<h2 id=\"1-实现效果-2\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果-2\">#</a> 1、实现效果</h2>\n<p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中</p>\n<p>nginx 监听端口为 9001</p>\n<p><mark>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvOjkwMDEvZWR1Lw==\">http://10.102.126.42/:9001/edu/</span> 直接跳转到 127.0.0.1:8080</mark></p>\n<p><mark>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvOjkwMDEvdm9kLw==\">http://10.102.126.42/:9001/vod/</span> 直接跳转到 127.0.0.1:8081</mark></p>\n<h2 id=\"2-准备工作-2\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-2\">#</a> 2、准备工作</h2>\n<p>（1）准备两个 tomcat 服务器，一个 8080 端口，一个 8081 端口</p>\n<p>（2）创建文件夹和测试页面</p>\n<h2 id=\"3-具体配置\"><a class=\"markdownIt-Anchor\" href=\"#3-具体配置\">#</a> 3、具体配置</h2>\n<p>（1）找到 nginx 配置文件，进行反向代理配置</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528214716255.png\" alt=\"image-20210528214716255\"></p>\n<p>（2）开放对外访问的端口号：9001，8080，8081</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-port=9001/tcp --permanent</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>success</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --reload</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>success</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --list-all</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>public <span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  target: default</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  icmp-block-inversion: no</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  interfaces: ens32</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  sources: </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  services: dhcpv6-client <span class=\"token function\">ssh</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ports: <span class=\"token number\">80</span>/tcp <span class=\"token number\">8080</span>/tcp <span class=\"token number\">8081</span>/tcp <span class=\"token number\">9001</span>/tcp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  protocols: </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  masquerade: no</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  forward-ports: </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  source-ports: </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  icmp-blocks: </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  rich rules:</pre></td></tr></table></figure><h2 id=\"4-最终测试\"><a class=\"markdownIt-Anchor\" href=\"#4-最终测试\">#</a> 4、最终测试</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215314155.png\" alt=\"image-20210528215314155\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215339564.png\" alt=\"image-20210528215339564\"></p>\n<h1 id=\"location指令说明\"><a class=\"markdownIt-Anchor\" href=\"#location指令说明\">#</a> location 指令说明</h1>\n<p>该指令用于匹配 URL</p>\n<p>语法如下：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215626081.png\" alt=\"image-20210528215626081\"></p>\n<p>1、 <code>= </code> ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p>\n<p>2、 <code>~</code> ：用于表示 uri 包含正则表达式，并且区分大小写。</p>\n<p>3、 <code>~*</code> ：用于表示 uri 包含正则表达式，并且不区分大小写。</p>\n<p>4、 <code>^~</code> ：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p>\n<p><mark>注意：如果 uri 包含正则表达式，则必须要有～或者～* 标识。</mark></p>\n<h1 id=\"nginx配置实例-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置实例-负载均衡\">#</a> nginx 配置实例 - 负载均衡</h1>\n<h2 id=\"1-实现效果-3\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果-3\">#</a> 1、实现效果</h2>\n<p>（1）浏览器地址栏输入地址 http://192.168.17.129/edu/a.html，负载均衡效果，平均 8080 和 8081 端口中</p>\n<h2 id=\"2-准备工作-3\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-3\">#</a> 2、准备工作</h2>\n<p>（1）准备两台 tomcat 服务器，一台 8080，一台 8081</p>\n<p>（2）在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建页面 a.html，用于测试</p>\n<h2 id=\"3-在nginx-的配置文件中进行负载均衡的配置\"><a class=\"markdownIt-Anchor\" href=\"#3-在nginx-的配置文件中进行负载均衡的配置\">#</a> 3、在 nginx 的配置文件中进行负载均衡的配置</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528221342515.png\" alt=\"image-20210528221342515\"></p>\n<h2 id=\"4-配置成功\"><a class=\"markdownIt-Anchor\" href=\"#4-配置成功\">#</a> 4、配置成功</h2>\n<p>测试，请求同一个路径，轮流地访问 8080，8081 两个服务器，即实现了负载均衡的效果</p>\n<h2 id=\"5-nginx负载均衡的策略\"><a class=\"markdownIt-Anchor\" href=\"#5-nginx负载均衡的策略\">#</a> 5、nginx 负载均衡的策略</h2>\n<h3 id=\"1-轮询默认\"><a class=\"markdownIt-Anchor\" href=\"#1-轮询默认\">#</a> 1、轮询（默认）</h3>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p>\n<h3 id=\"2-weight\"><a class=\"markdownIt-Anchor\" href=\"#2-weight\">#</a> 2、weight</h3>\n<p>weight 代表权重，默认为 1，权重越高，被分配的客户端越多</p>\n<p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-ip_hash\"><a class=\"markdownIt-Anchor\" href=\"#3-ip_hash\">#</a> 3、ip_hash</h3>\n<p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ip_hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-fair第三方\"><a class=\"markdownIt-Anchor\" href=\"#4-fair第三方\">#</a> 4、fair（第三方）</h3>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"nginx配置实例-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置实例-动静分离\">#</a> nginx 配置实例 - 动静分离</h1>\n<h2 id=\"1-什么是动静分离\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是动静分离\">#</a> 1、什么是动静分离</h2>\n<p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种：</p>\n<ul>\n<li>\n<p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</p>\n</li>\n<li>\n<p>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528223635697.png\" alt=\"image-20210528223635697\"></p>\n<p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以设置浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间，没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>\n<h2 id=\"2-准备工作-4\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-4\">#</a> 2、准备工作</h2>\n<p>（1）在 linux 系统中准备静态资源，用于进行访问</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225532427.png\" alt=\"image-20210528225532427\"></p>\n<h2 id=\"3-具体配置-2\"><a class=\"markdownIt-Anchor\" href=\"#3-具体配置-2\">#</a> 3、具体配置</h2>\n<p>（1）在 nginx 配置文件中进行配置</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225736743.png\" alt=\"image-20210528225736743\"></p>\n<h2 id=\"4-最终测试-2\"><a class=\"markdownIt-Anchor\" href=\"#4-最终测试-2\">#</a> 4、最终测试</h2>\n<p>（1）浏览器输入地址：<span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvaW1hZ2UvMS5wbmc=\">http://10.102.126.42/image/1.png</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225829853.png\" alt=\"image-20210528225829853\"></p>\n<p>直接输入地址 http://10.102.126.42/image/，可以将静态资源全部加载出来，== 注意最后一个 <code>/</code> ，就是 image 后面的 <code>/</code>  不能少，不然会出现 404</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529170620289.png\" alt=\"image-20210529170620289\"></p>\n<p>（2）浏览器输入：<span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvd3d3L2EuaHRtbA==\">http://10.102.126.42/www/a.html</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528230839058.png\" alt=\"image-20210528230839058\"></p>\n<h1 id=\"nginx配置高可用集群\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置高可用集群\">#</a> nginx 配置高可用集群</h1>\n<h2 id=\"1-什么是nginx高可用\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是nginx高可用\">#</a> 1、什么是 nginx 高可用</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529195702822.png\" alt=\"image-20210529195702822\"></p>\n<p>（1）需要两台 nginx 服务器</p>\n<p>（2）需要 keepalived</p>\n<p>（3）需要虚拟 ip 地址</p>\n<h2 id=\"2-配置高可用的准备工作\"><a class=\"markdownIt-Anchor\" href=\"#2-配置高可用的准备工作\">#</a> 2、配置高可用的准备工作</h2>\n<p>（1）需要配置两台服务器 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIv\">http://10.102.126.42/</span> 和 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi42OC43Ni8=\">http://10.102.68.76/</span></p>\n<p>（2）在两台服务器安装 nginx</p>\n<p>（3）在两台服务器安装 keepalived</p>\n<h2 id=\"3-在两台服务器安装keepalived\"><a class=\"markdownIt-Anchor\" href=\"#3-在两台服务器安装keepalived\">#</a> 3、在两台服务器安装 keepalived</h2>\n<p>（1）使用 yum 命令进行安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> keepalived -y</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -q -a keepalived\t<span class=\"token comment\"># 查看 keepalived 是否安装</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203452428.png\" alt=\"image-20210529203452428\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203544568.png\" alt=\"image-20210529203544568\"></p>\n<p><mark>在这步操作中可能会出现一下问题</mark></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Error downloading packages:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  keepalived-1.3.5-19.el7.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">1</span>:net-snmp-libs-5.7.2-49.el7_9.1.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">1</span>:net-snmp-agent-libs-5.7.2-49.el7_9.1.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203728931.png\" alt=\"image-20210529203728931\"></p>\n<p>出现这种情况百度的话是这种办法</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529204055515.png\" alt=\"image-20210529204055515\"></p>\n<p><mark>但我觉得首先应该检查自己的虚拟机是否是联网状态，即 ping 百度看能不能 ping 通，如果虚拟机没有联网是没办法通过 yum 命令安装的</mark></p>\n<p>我就是通过虚拟机联网解决了</p>\n<p>（2）安装之后，在 etc 里面生成目录 keepalived，有文件  <code>keepalived.conf</code></p>\n<h2 id=\"4-完成高可用配置主从配置\"><a class=\"markdownIt-Anchor\" href=\"#4-完成高可用配置主从配置\">#</a> 4、完成高可用配置（主从配置）</h2>\n<p>（1）修改 <code>/etc/keepalived/keepalived.conf</code>  配置文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>global_defs <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnotification_email <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tacassen@firewall.loc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tfailover@firewall.loc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tsysadmin@firewall.loc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tnotification_email_from Alexandre.Cassen@firewall.loc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tsmtp_server <span class=\"token number\">10.102</span>.126.42</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tsmtp_connect_timeout <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\trouter_id LVS_DEVEL <span class=\"token comment\"># 访问到主机，这是主机的名字，和 localhost 差不多的意思</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vrrp_script chk_http_port <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tscript <span class=\"token string\">\"/usr/local/src/nginx_check.sh\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tinterval <span class=\"token number\">2</span> <span class=\"token comment\">#（检测脚本执行的间隔）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tweight <span class=\"token number\">2</span> <span class=\"token comment\"># 权重</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>vrrp_instance VI_1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstate BACKUP <span class=\"token comment\"># 备份服务器上将 MASTER 改为 BACKUP</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tinterface ens32 //网卡</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tvirtual_router_id <span class=\"token number\">51</span> <span class=\"token comment\"># 主、备机的 virtual_router_id 必须相同</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpriority <span class=\"token number\">90</span> <span class=\"token comment\"># 主、备机取不同的优先级，主机值较大，备份机值较小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tadvert_int <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tauthentication <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tauth_type PASS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tauth_pass <span class=\"token number\">1111</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tvirtual_ipaddress <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token number\">10.102</span>.126.50 <span class=\"token comment\"># VRRP H 虚拟地址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）在 <code>/usr/local/src</code>  添加检测脚本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx –-no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$A</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t/usr/local/nginx/sbin/nginx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">sleep</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx --no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">killall</span> keepalived</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p><mark>注意这里两台服务器都要配置</mark></p>\n<p>（3）把两台服务器上 nginx 和 keepalived 启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 nginx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 启动 keepalived</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl start keepalived.service</pre></td></tr></table></figure><h2 id=\"5-最终测试-2\"><a class=\"markdownIt-Anchor\" href=\"#5-最终测试-2\">#</a> 5、最终测试</h2>\n<p>（1）在浏览器地址栏输入 虚拟 ip 地址 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNTAv\">http://10.102.126.50/</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529220108249.png\" alt=\"image-20210529220108249\"></p>\n<p>可以看到服务器已经绑定了虚拟 ip</p>\n<p>（2）把主服务器（10.102.126.50）nginx 和 keepalived 停止，再输入 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNTAv\">http://10.102.126.50/</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529223105940.png\" alt=\"image-20210529223105940\"></p>\n<p><mark>依旧能进行访问</mark>，说明此时集群搭建成功</p>\n<p>可以看到备份服务器也绑定了虚拟 ip</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529223435351.png\" alt=\"image-20210529223435351\"></p>\n<h1 id=\"nginx的原理\"><a class=\"markdownIt-Anchor\" href=\"#nginx的原理\">#</a> nginx 的原理</h1>\n<h2 id=\"1-master-和-worker\"><a class=\"markdownIt-Anchor\" href=\"#1-master-和-worker\">#</a> 1、master 和 worker</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529225621258.png\" alt=\"image-20210529225621258\"></p>\n<h2 id=\"2-worker-如何进行工作的\"><a class=\"markdownIt-Anchor\" href=\"#2-worker-如何进行工作的\">#</a> 2、worker 如何进行工作的</h2>\n<p>每一个 worker 都会争抢请求，争抢到请求则执行。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529225650761.png\" alt=\"image-20210529225650761\"></p>\n<h2 id=\"3-一个master和多个worker有什么好处\"><a class=\"markdownIt-Anchor\" href=\"#3-一个master和多个worker有什么好处\">#</a> 3、一个 master 和多个 worker 有什么好处</h2>\n<p>（1）可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作</p>\n<p>例如，当其中一个 worker 在执行请求的时候，其他的三个 worker 进行更新，然后可以继续争抢请求，此时还有一个 worker 没有更新热部署，当执行完任务就会进行热部署更新。</p>\n<p>（2）每个 woker 是独立的进程，如果有其中的一个 woker 出现问题，其他 woker 独立的，继续进行争抢，实现请求过程，不会造成服务中断</p>\n<h2 id=\"4-设置多少个worker合适\"><a class=\"markdownIt-Anchor\" href=\"#4-设置多少个worker合适\">#</a> 4、设置多少个 worker 合适</h2>\n<p>worker 数和服务器的 cpu 数相等是最为适宜的</p>\n<h2 id=\"5-连接数-worker_connection\"><a class=\"markdownIt-Anchor\" href=\"#5-连接数-worker_connection\">#</a> 5、连接数 worker_connection</h2>\n<p><mark>第一个：发送请求，占用了 worker 的几个连接数？</mark></p>\n<p>答案：2 个或者是 4 个，因为当客户端通过 nginx 请求静态资源的时候，此时 nginx 连接请求，并返回数据，此时连接数为 2 个。当客户端通过 nginx 请求后端，例如访问数据库的时候就需要连接 tomcat，此时还要返回数据，就有 4 个连接数。</p>\n<p><mark>第二个：nginx 有一个 master，有四个 worker，每个 worker 支持最大的连接数 1024. 那么支持的最大并发数是多少？</mark></p>\n<p><code>普通的静态访问最大并发数是：worker_connections \\* worker_processes /2</code></p>\n<p><code>而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections \\* worker_processes/4。</code></p>\n",
            "tags": [
                "Nginx"
            ]
        }
    ]
}