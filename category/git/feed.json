{
    "version": "https://jsonfeed.org/version/1",
    "title": "失心耀的博客 • All posts by \"git\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/",
            "url": "http://example.com/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/",
            "title": "Git协同与提交规范",
            "date_published": "2021-05-17T02:59:22.000Z",
            "content_html": "<span id=\"more\"></span>\n<h2 id=\"1前言\"><a class=\"markdownIt-Anchor\" href=\"#1前言\">#</a> 1. 前言</h2>\n<p>在现代化的软件开发中，尤其是在企业中的团队协同开发流程与代码管理方面，git 都充当着不可或缺的角色。本章中将会讲述如何使用 git 来进行一些基本的版本控制操作与团队协同中的 git 使用流程管理与提交规范。</p>\n<p>在 Git 快速上手章节中你将会了解 git 的基本概念与一些常用命令，能让你快速上手或复习 git 的基本操作。</p>\n<p>在 Git 多人合作基本模型中，你将会了解到 git 的团队基本工作模型。</p>\n<p>Git 工作流与分支管理规范是对于在企业级中 git 的团队协同流程的介绍与规范的讲解，你会学到团队开发中 git 在软件开发生命周期中的角色。</p>\n<p>Git 提交规范总结了在 git 使用过程中对于代码记录的提交信息的规范要求。</p>\n<h2 id=\"2-git-快速上手\"><a class=\"markdownIt-Anchor\" href=\"#2-git-快速上手\">#</a> 2. Git 快速上手</h2>\n<h3 id=\"21-git-的简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#21-git-的简单介绍\">#</a> 2.1 Git 的简单介绍</h3>\n<p>Git 是一个用于控制管理代码历史版本的工具，区别于集中式的 SVN，Git 使用了分布式的管理方式。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/845.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/845.png\" class=\"\"></p>\n<p>团队每人都拥有一个自己的本地仓库，不仅可以自己本地进行版本管理，也可以将代码版本在各个成员间共享.</p>\n<h3 id=\"22-初始化一个本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#22-初始化一个本地仓库\">#</a> 2.2 初始化一个本地仓库</h3>\n<p>在开始操作之前，确保你的系统环境已经安装了 Git， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbQ==\">https://git-scm.com</span> 上提供了各个系统环境的 Git 下载。</p>\n<p>在使用 git 命令进行操作之前，你需要一个 git 仓库，你可以移动到你的工作目录，命令行中执行:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Initialized empty Git repository <span class=\"token keyword\">in</span> /path/to/work/directory/.git/</pre></td></tr></table></figure><p>这样你就可以得到一个本地仓库了，你会看到工作目录下已经新增了一个 <em>.git</em> 目录。</p>\n<p><em>注：某些系统中可能预设隐藏以。开头的文件夹，可能需要开启相关设置才能看到</em></p>\n<h3 id=\"23-克隆远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#23-克隆远程仓库\">#</a> 2.3 克隆远程仓库</h3>\n<p>当然如果你已经有了一个远程仓库，你就不需要初始化一个本地仓库了，你可以使用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>remote address<span class=\"token operator\">></span></pre></td></tr></table></figure><p>上面的命令会将链接指向的远程仓库克隆到本地，这样你也得到了一个 <em>git</em> 仓库，并且这个仓库是与远程仓库关联的，如果你有远程仓库的权限，你就可以对这个仓库推送你的提交。</p>\n<h3 id=\"24-查看仓库状态\"><a class=\"markdownIt-Anchor\" href=\"#24-查看仓库状态\">#</a> 2.4 查看仓库状态</h3>\n<p>上面我们已经初始化了一个空仓库，我们可以通过指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>No commits yet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nothing to commit <span class=\"token punctuation\">(</span>create/copy files and use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过 <em>git status</em> 查看当前的仓库 (或代码分支) 的状态。</p>\n<h3 id=\"25-追踪文件修改\"><a class=\"markdownIt-Anchor\" href=\"#25-追踪文件修改\">#</a> 2.5 追踪文件修改</h3>\n<p>接下来我们可以为这个仓库添加一些文件，在工作目录下执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> index.js</pre></td></tr></table></figure><p>上面的指令为我们在工作目录下创建一个名为 index.js 的文件，使用 git status 可以查看到已经添加了一个 index.js 文件，下面我们在这个文件中写入一些内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('learning git!');\"</span> <span class=\"token operator\">></span> index.js</pre></td></tr></table></figure><p>上面这条指令为我们将 <em>“console.log(‘learning git!’)”</em> 这个内容写入了 <em>index.js</em> 文件中。此时查看仓库状态如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>No commits yet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Untracked files:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be commited<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        index.js</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nothing added to commit but untracked files present<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以看到信息反馈说到 index.js 这个文件是未追踪的 (<em>Untracked files</em>), 而在 git 中，如果一个文件需要 git 进行版本控制与内容修改追踪，那么就需要先将它加入到 git 仓库的暂存区 (<em>stage</em>) 中。将文件加入到暂存区只需要执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> index.js</pre></td></tr></table></figure><p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/846.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/846.png\" class=\"\"></p>\n<p>相信很多人在使用 git 添加修改或者新增文件的时候，会习惯直接使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>直接将当前目录下的修改的全部文件添加到暂存区 (<em>stage</em>), 一般情况下，这样的方式既方便又快捷，但是我仍然推荐在执行 <em>git add</em> 先使用 <em>git status</em> 命令来查看一下仓库有哪些文件被修改了，这样是因为如果你的仓库中使用了 git 的子模块功能，直接 <em>git add .</em> 会将子模块的 commit ID 也一并添加到暂存区，万一这个 commit ID 的提交并不是你的本意，那么提交到远程可能会导致子模块错乱的问题。</p>\n<p>为了养成良好习惯，最好在 <em>git add</em> 前使用 <em>git status</em> 查看一下仓库状态。</p>\n<h3 id=\"26-提交文件修改的历史信息\"><a class=\"markdownIt-Anchor\" href=\"#26-提交文件修改的历史信息\">#</a> 2.6 提交文件修改的历史信息</h3>\n<p>通过 git add 我们已经将对文件的操作 (新增或修改，删除等) 添加到了暂存区 (<em>stage</em>) 中，但是这样是不够的，我们还需要对这个操作记录成一个历史记录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add a file named index.js\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 910f65f<span class=\"token punctuation\">]</span> Add a <span class=\"token function\">file</span> named index.js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>create mode <span class=\"token number\">100644</span> index.js</pre></td></tr></table></figure><p>这样我们对文件的操作生成一条历史记录，历史记录可以通过 <em>git log</em> 进行查看。不加 -m 参数直接 commit 的提交信息会默认使用 vim 编辑器进行编辑 (对于 vim 编辑器的操作介绍请看后面章节)。对于 commit 记录，原则上我们应该每个 commit 所记录的修改保持纯洁与单一，不允许比如对两个 bug 的修复都提交到一个 commit 中的情况，这样一旦 bug A 的修复会导致另一个问题，但是 bug B 的修复是没有问题的，此时如果回退该 commit，虽然回退了 bug A 的提交，但是也丢失 bug B 的修复工作了。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/847.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/847.png\" class=\"\"></p>\n<p><em>注：笔者不推荐 commit -m 的操作，因为这不符合提交规范，这里是为了简短说明 commit 的使用，详情请看后面章节</em></p>\n<h4 id=\"261-vim-编辑器的简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#261-vim-编辑器的简单介绍\">#</a> 2.6.1 Vim 编辑器的简单介绍</h4>\n<p>使用 git commit 命令会默认使用 vim 编辑器进行提交信息的编写，同时笔者不推荐使用 git commit -m 的方式来提交信息，因为这样编写出来的提交信息不符合规范，只能说明一些简短信息或者甚至直接为空，尤其是空信息是不被允许的。所以这里会简单介绍 vim 的基本用法，有兴趣的读者可以搜索相关 vim 的学习资料进行深入学习。</p>\n<p>当你使用 add 命令将对于文件的修改添加到缓存区后，你可以使用输入 git commit 然后直接回车，然后你会进入到 vim 编辑器的界面，你会在界面上看到类似下面的信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Please enter the commit message for your changes. Lines starting</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Committer: shawn &lt;zhangxiang@zhangxiangdeMacBook-Pro.local></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># On branch master</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Changes to be committed:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#       modified:   index.js</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>~</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">\"~/path/to/working/directory/git-learning/.git/COMMIT_EDITMSG\"</span> 10L, 274C</pre></td></tr></table></figure><p>以 <em>#</em> 开头的信息是注释，不用担心他们会添加到你的提交信息中，而且如果你没有填写信息就直接退出则该 commit 会被中断。</p>\n<h5 id=\"插入模式\"><a class=\"markdownIt-Anchor\" href=\"#插入模式\">#</a> 插入模式</h5>\n<p>接下来，当你需要填写数据的时候，你需要按下 “i” 键进入插入模式，进入插入模式之后才能进行文本的插入与编写，然后就可以类似在一般的编辑器下编写你想填写的信息。</p>\n<p>而当你编写完信息后，你需要先退出插入模式而回到原来的普通模式，退出插入模式你只需要按下 “esc” 键。</p>\n<h5 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式</h5>\n<p>当你想退出 vim 编辑器的时候，我们需要进入命令模式，在普通模式下输入 <strong>:</strong> ， 进入命令模式，输入 <em>wq</em> 回车，就可以保存并退出编辑了，下面提供一些常用的命令供大家参考：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:q   退出</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:q<span class=\"token operator\">!</span>  强制退出，不进行保存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:wq  保存并退出</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>:wq<span class=\"token operator\">!</span> 强制保存并退出</pre></td></tr></table></figure><h3 id=\"27-使用分支\"><a class=\"markdownIt-Anchor\" href=\"#27-使用分支\">#</a> 2.7 使用分支</h3>\n<p>分支功能是 git 最为强大的功能之一，它能够让你并发地在多个场景下进行开发。并且可以让你同时开发不同功能而不冲突，用于区分功能或版本。</p>\n<p>在企业里面，有规模的开发团队在开发功能的时候是不可能大家都在一个分支上开发的，因为这可能需要不断地解决冲突，此外功能与功能间通常相互独立，在同一个分支上开发本就不合理。</p>\n<p>你可以执行下面这个命令来创建一个分支：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>branch-name<span class=\"token operator\">></span></pre></td></tr></table></figure><p>例如你执行 <em>git branch test</em> 这条命令创建了一条分支，实际上你是创建了一个指向该 commit 节点的名为 test 的指针：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/848.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/848.png\" class=\"\"></p>\n<h3 id=\"28-在不同场景间切换\"><a class=\"markdownIt-Anchor\" href=\"#28-在不同场景间切换\">#</a> 2.8 在不同场景间切换</h3>\n<p>在日常开发的时候，我们可能经常会需要切换到不同的开发场景，比如你正在一个功能分支上开发，但是产品经理或者测试忽然需要你在线上环境看一个问题，所以你需要将你目前的代码切换到线上环境的代码，当你需要切换分支的时候，可以：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch-name<span class=\"token operator\">>|</span><span class=\"token operator\">&lt;</span>tag<span class=\"token operator\">>|</span><span class=\"token operator\">&lt;</span>commit <span class=\"token builtin class-name\">hash</span> id<span class=\"token operator\">></span></pre></td></tr></table></figure><p>上面只是 git checkout 的使用场景之一，checkout 不仅可以切换分支，还可以切换 tag，或者 commit hash id 等环境的代码。比如你需要切换到上面创建的 test 分支，那么你需要执行 <em>git checkout test</em> 这条指令，在 git 中是使用 Head 指针来指向当前提交记录的，而 checkout 命令实际上是将 git 的 head 指针指向了 test 这一指针：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/849.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/849.png\" class=\"\"></p>\n<p>那么现在的当前工作分支就是 test 分支了。这里就会明白，实际上 checkout 命令的本质就是移动 git 的 Head 指针。</p>\n<p>当然，直接 checkout 可能会不能顺利切换过去，因为你的工作区内对于某些文件的修改没有提交，会 git 阻止你进行分支切换，提醒你先对文件的修改进行 commit 提交，相关的 commit 提交操作像上面的章节一样操作就可以，但是如果你因为一些其他原因不希望进行 commit 比如这部分的修改不满足一个 commit 或者这些是实验性的代码，所以你可以将当前的工作区修改进行 “储藏”：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> stash</pre></td></tr></table></figure><p>git stash 命令可以为你保存起目前的代码，并将这些修改压入到一个栈中，换言之你可以多次进行 stash。</p>\n<p>然后当你解决了问题，想回到原来的工作代码环境，你只需要切换到原来的分支上，进行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> stash pop</pre></td></tr></table></figure><p>这里会默认拿栈顶的代码 (也就是最近一次 stash 的代码) 修改记录并将其反映到你的工作区中。</p>\n<h2 id=\"3-git-多人合作基本模型\"><a class=\"markdownIt-Anchor\" href=\"#3-git-多人合作基本模型\">#</a> 3. Git 多人合作基本模型</h2>\n<p>在实际的软件研发过程中，团队作战的场景远远多于单兵作战，所以仅仅是掌握上面章节对于自己本地仓库进行操作的 git 指令是不够的，我们会需要一个远程的集中式仓库。所谓集中式仓库就是团队中所有人的代码都上传到这个地方进行存储，有了集中式的仓库，可以方便地进行成果共享与协作。</p>\n<h3 id=\"31-添加远程仓库地址\"><a class=\"markdownIt-Anchor\" href=\"#31-添加远程仓库地址\">#</a> 3.1 添加远程仓库地址</h3>\n<p>如果你已经使用 <em>git init</em> 初始化了一个 git 仓库，并且你想要将你的工作成果放到一个远程仓库上，为可能的多人协作做准备的话，你需要为你的本地仓库添加远程连接，也即是说将你本地仓库的历史库放到一个远程服务器的仓库中保存里面：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>remote address<span class=\"token operator\">></span></pre></td></tr></table></figure><p>使用 <em>git remote add</em> 命令为本地仓库添加一个远程仓库的地址，地址可以是 <em>http/https</em> 格式的也可以是 <em>ssh</em> 格式的。而 name 是指这个远程仓库链接名称，比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/example</pre></td></tr></table></figure><p>当然，如果你的仓库是通过 <em>git clone</em> 克隆下来的，你可以不需要添加一个远程仓库链接。</p>\n<h3 id=\"32-将本地修改推送到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#32-将本地修改推送到远程仓库\">#</a> 3.2 将本地修改推送到远程仓库</h3>\n<p>当你有若干个 <em>commit</em> 提交记录需要更新到远程仓库，在执行了 <em>commit</em> 命令后，使用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> push origin master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Counting objects: <span class=\"token number\">3</span>, done.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Writing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, <span class=\"token number\">274</span> bytes <span class=\"token operator\">|</span> <span class=\"token number\">274.00</span> KiB/s, done.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Total <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>To https://github.com/username/example.git</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      master -<span class=\"token operator\">></span> master</pre></td></tr></table></figure><p>这样就可以将你本地的 <em>commit</em> 提交传送到远程仓库中进行共享。注意第一个推送修改的时候需要指定远程连接的名称 (这里是 origin, 即上一步添加远程仓库地址的名称), 并指定推送的分支名 (这里是 master 分支)。</p>\n<h3 id=\"33-拉取并合并他人修改\"><a class=\"markdownIt-Anchor\" href=\"#33-拉取并合并他人修改\">#</a> 3.3 拉取并合并他人修改</h3>\n<p>当团队其他成员对该分支上的代码进行了修改并且已经 <em>push</em> 到远程仓库后，你可以将他的提交拉取到本地并且将他的提交进行合并自己本地仓库上，通过：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> pull</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>There is no tracking information <span class=\"token keyword\">for</span> the current branch.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Please specify <span class=\"token function\">which</span> branch you want to merge with.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>See git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>If you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> master</pre></td></tr></table></figure><p>第一次拉取远程仓库的修改的时候，会出现像上面 <em>“There is no tracking information for the current branch”</em> 的错误，这是因为本地分支与远程分支没有建立起关联关系，所以我们需要通过以下两种方式来达到目的:</p>\n<p>1. 通过执行 <em>pull</em> 命令的时候指定分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p>2. 通过执行 <em>branch</em> 命令建立本地分支与远程分支的关联关系后再次执行 <em>pull</em> 命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Branch <span class=\"token string\">'master'</span> <span class=\"token builtin class-name\">set</span> up to track remote branch <span class=\"token string\">'master'</span> from <span class=\"token string\">'origin'</span><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> pull</pre></td></tr></table></figure><p>这样，你本地仓库就会出现其他人提交的代码修改了。</p>\n<h3 id=\"34-协作基本模型\"><a class=\"markdownIt-Anchor\" href=\"#34-协作基本模型\">#</a> 3.4 协作基本模型</h3>\n<p>使用 git 的 push 命令与 pull 命令其实已经可以实现多人代码共享的情景，你对本地代码进行了很多修改，同时创建了很多 commit 记录，然后你可以通过 push 推送到远程仓库，团队其他人通过 pull 命令拉取你的提交，同时他们也有可能将他们的 commit 记录提交远程仓库，你可以使用 pull 命令拉取他们的提交。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/850.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/850.png\" class=\"\"></p>\n<p>但是大家并行开发同时进行提交，大概率会出现 push 的时候被 git 阻止的情况，原因是两个并行的提交，远程仓库需要对两者的提交顺序进行编排，所以会要求你先进行 pull 命令执行，将远程的提交拉取下来并合并到本地分支，在本地编排好你的本地提交记录与其他人的提交记录之后，才允许你进行 push 命令的执行。</p>\n<h2 id=\"4-git-工作流与分支管理规范\"><a class=\"markdownIt-Anchor\" href=\"#4-git-工作流与分支管理规范\">#</a> 4. Git 工作流与分支管理规范</h2>\n<p>对于一些规模比较大的团队，一般会使用 git 分支来管理与规范不同环境的代码。</p>\n<h3 id=\"41-分支管理的必要性\"><a class=\"markdownIt-Anchor\" href=\"#41-分支管理的必要性\">#</a> 4.1 分支管理的必要性</h3>\n<p>也许你会有疑问为什么我们会需要分支管理，并且需要分如此多的分支？因为在软件开发中，我们通常会有几个阶段，比如开发阶段，冒烟阶段，提测阶段，预发布阶段与上线阶段，而这些阶段都会对应有不同的部署环境，如果我们没有分支管理与将这些环境分别用不同的分支进行区分，代码版本管理将会无从谈起。所以我们会给分出很多分支，并且赋予这些分支不同的角色对应不同的环境与阶段。</p>\n<p><em>注：1. 冒烟这一术语原来自硬件行业，在软件工程中指由开发人员自身对新的程序代码进行测试，确保新的代码不出故障</em></p>\n<h3 id=\"42-使用-gitflow-工作流\"><a class=\"markdownIt-Anchor\" href=\"#42-使用-gitflow-工作流\">#</a> 4.2 使用 gitflow 工作流</h3>\n<p>对于分支的管理，推荐使用 gitflow 工作流的模式，流程大概如下图：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/843.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/843.png\" class=\"\"></p>\n<p>对上面的分支说明如下：</p>\n<ul>\n<li>feature branches。功能分支，一般是从 develop 开发分支上检出 (checkout)</li>\n<li>develop。公共的开发主线分支，feature 功能分支的代码开发完成后，经过 code review 后会合并到此分支</li>\n<li>release branches。测试、发布主线，此分支是从 develop 分支上检出 (checkout), 一般是提测阶段会使用该分支的代码</li>\n<li>bugfix。修复 release 分支问题，</li>\n<li>hotfix。紧急修复，一般是用于修复上线后的生产环境的问题。</li>\n<li>master。可发布的稳定版分支</li>\n</ul>\n<blockquote>\n<p><em>注：gitflow 分支管理图来自网络</em></p>\n</blockquote>\n<h4 id=\"421-功能开发流程\"><a class=\"markdownIt-Anchor\" href=\"#421-功能开发流程\">#</a> 4.2.1 功能开发流程</h4>\n<p>团队在使用 <em>gitflow</em> 分支管理规范下，当我们需要有新的功能进行开发的时候，我们需要从最新的 <em>develop</em> 分支上检出 (<em>checkout</em>) 一个功能分支分支，命名形式如 <em>feature-xxx-version</em>，然后就可以在该功能分支上进行开发，当你开发完成后，可以将分支 <em>push</em> 到远程仓库中，并在对应的远程仓库管理软件 (<em>gitlab</em> 等) 中提交 <em>merge request</em>，经过相关人员的代码审查后，会将功能分支合并到 <em>develop</em> 分支上并删除这个功能分支。</p>\n<h4 id=\"422-提测流程\"><a class=\"markdownIt-Anchor\" href=\"#422-提测流程\">#</a> 4.2.2 提测流程</h4>\n<p>当开发人员完成了该版本的所有功能后，会向测试人员发起测试功能的请求，此时会将最新的 <em>develop</em> 分支 (此时的 <em>develop</em> 分支已有所有该版本的新功能的代码) 检出 <em>release</em> 分支，命名格式如 <em>release-version</em>，测试人员 QA 会基于 <em>release-version</em> 为主线对代码进行测试与测试环境部署。</p>\n<p>当测试人员在 <em>release</em> 分支上发布代码 <em>bug</em> 的时候，开发人员需要从 <em>release-version</em> 分支上检出 <em>bugfix</em> 分支，命名格式如 <em>bugfix-xxx</em> ，然后类似功能开发流程，将 <em>bugfix-xxx</em> 分支合并到 <em>release-version</em> 分支上。</p>\n<h4 id=\"423-部署发布流程\"><a class=\"markdownIt-Anchor\" href=\"#423-部署发布流程\">#</a> 4.2.3 部署发布流程</h4>\n<p>当测试人员测试通过后，会将 <em>release-version</em> 分支合并到 <em>master</em> 分支，并将 <em>release-version</em> 分支合并到 <em>develop</em> 分支，将 <em>master</em> 分支的代码进行部署，并测试线上，测试通过后对 <em>master</em> 分支打上 <em>tag</em>，并将 <em>master</em> 分支合并会 <em>develop</em> 分支。这里解释一下打 tag 的作用，tag 相当于是一个当前 commit 的一个快照，作用与 commit-sha1 类似，但是 tag 更具有可读性，可以供快速回退到想要的版本记录。</p>\n<h4 id=\"424线上问题紧急修复流程\"><a class=\"markdownIt-Anchor\" href=\"#424线上问题紧急修复流程\">#</a> 4.2.4 线上问题紧急修复流程</h4>\n<p>当线上即生产环境发现 <em>bug</em> 的时候，需要在 master 分支上检出 (<em>checkout</em>) 一个 <em>hotfix-x.x.x</em> (x.x.x 是指语义化版本号) 分支，然后相关的开发人员的修</p>\n<h3 id=\"43-便于-code-review-的合作流程\"><a class=\"markdownIt-Anchor\" href=\"#43-便于-code-review-的合作流程\">#</a> 4.3 便于 code review 的合作流程</h3>\n<p>在编写代码的时候，为了代码的高质量与开发人员的知识共享，通常会加上代码审查也就是 code review 环节。这个环节是借助 merge request 或者 pull request 来做到的，所以我们提交的 commit 记录应该尽量保持为<strong>一个</strong>，这样的好处有很多：</p>\n<ol>\n<li>方便代码审核者进行 code review，只需要看这一个 commit 记录的逻辑即可</li>\n<li>万一该 commit 的代码导致出现问题，我们可以只针对这个 commit 进行快速回退。</li>\n<li>一个功能保持一个 commit 记录如果遇到需要对这个功能提前提交到某些环境比如生产环境上，我们可以快速用过 cherry-pick 命令，在对应的分支上 &quot;重现&quot; 该提交记录，达到提前提交的目的。</li>\n</ol>\n<p>也许你会有疑问，单个功能保持一个 commit 记录与 commit 提交记录尽量保持较细的粒度这一原则是否相悖，笔者觉得并没有冲突，因为这两个 git 协作要求是基于不同的角度来看待问题的，对于自己开发的分支上，我们需要保持每个提交的粒度在一个 commit 做一个修改，这样有利于我们记录工作内容与方便自己在本分支上做回滚，但是对于一个软件开发的主分支来说，它上面的提交应该是以功能为单位的，而无需关心这个功能内开发人员开发这个功能做了多少次修改。</p>\n<p>面对这种情况，我们会使用 rebase 命令，也就是衍合 (变基) 操作。所谓衍合就是将你此分支上的 commit 提交，按顺序重新在某个分支上的某个基础点重新 &quot;演绎&quot; 一次，而这个重新 &quot;演绎&quot; 重新提交的 commit 记录与原来的 commit 提交会有些许不同，不同点在于 commit 的 HashId 会不同，但是提交内容是一样的。</p>\n<p>rebase 命令提供了交互式的界面，并且提供多种的命令让你能够将多个 commit 记录合并为一个，从而达到我们单一功能保持一个 commit 记录的目的，保持提交历史的清爽。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/844.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/844.png\" class=\"\"></p>\n<p>*<em> 注：企业中一般会使用需求管理系统来管理需要开发的需求等</em></p>\n<h2 id=\"5-git-提交规范\"><a class=\"markdownIt-Anchor\" href=\"#5-git-提交规范\">#</a> 5. Git 提交规范</h2>\n<p>制定一个 <em>git commit</em> 信息的提交规范是开发团队工作流必不可少的环节。试想一下，如果查看主分支上的历史库也就是你查看 <em>git log</em> 的时候，打印出来的信息杂乱无章的话，如果代码遇到问题，可能需要很大的精力与成本来查找到导致问题的代码提交，所以团队需要制定规范来引导成员编写规范的 <em>commit</em> 信息。</p>\n<p>接下来的 <em>commit</em> 信息规范参考了 <em>angularjs</em> 团队的开发者指引与笔者的工作团队进行总结，读者如有需要可以以此为基础增加或修改成为自己团队的 <em>commit</em> 规范的一部分。</p>\n<h3 id=\"51-提交信息基本模板\"><a class=\"markdownIt-Anchor\" href=\"#51-提交信息基本模板\">#</a> 5.1 提交信息基本模板</h3>\n<p>如果 commit 信息都按照一定的模式进行提交，那么我们就会很容易找到自己想要的信息，模板参考如下：</p>\n<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; [&lt;ISSUE_ID&gt;]\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>\n<p>commit 信息包括三个字段: type (必需)， scope (可选) 和 subject (必需)。</p>\n<ol>\n<li>type。type 是用于说明该 commit 的类型的，一般我们会规定 type 的类型如下：</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>feat: 新功能 (feature)</li>\n<li>fix: 修复 bug</li>\n<li>docs: 文档 (documents)</li>\n<li>style: 代码格式 (不影响代码运行的格式变动，注意不是指 CSS 的修改)</li>\n<li>refactor: 重构 (既不是新增功能，也不是修改 bug 的代码变动)</li>\n<li>test: 提交测试代码 (单元测试，集成测试等)</li>\n<li>chore: 构建或辅助工具的变动</li>\n<li>misc: 一些未归类或不知道将它归类到什么方面的提交</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>scope。scope 说明 commit 影响的范围，比如数据层，控制层，视图层等等，这个需要视具体场景与项目的不同而灵活变动</li>\n<li>subject。subject 是对于该 commit 目的的简短描述</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>使用第一人称现在时的动词开头，比如 modify 而不是 modified 或 modifies</li>\n<li>首字母小写，并且结尾不加句号</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>ISSUEE_ID。这个与公司的需求管理与项目管理有关，假设你的项目放在 <em>github</em> 上，你的需求或者 <em>bug</em> 修复可能会有对应的 <em>issues</em> 记录，你可以加到你的 <em>commit</em> 信息中如 <em>issue-37938634</em>。</li>\n</ol>\n<p>body 其实就是 subject 的详细说明，而 footer 中你可以填写相关的需求管理 issues id。</p>\n<p>在企业中一般会对团队中要做的事情与需求开发使用一个软件进行管理，好处是可以让代码与对应的用户故事 (story) 或者需求，bug 进行关联，便于管理，类似的方案有 github，gitlab，tracker，JIRA 等等，比如在网易某些团队中就会使用 JIRA 加上 gitlab 来进行团队管理。</p>\n<p>commit message 的规范性是很重要的，对于自己养成良好的编程习惯很有帮助，但是没有必要强制完全遵循开源团队的规范，毕竟每个团队与个人的情况不同，博采众长即可，当然你也可以使用像 <em>commitlint</em> 这样的校验工具从工具层面上来强制执行某些规范，这里就不展开讲了，有兴趣的读者可以查阅相关资料并使用到自己团队的实践中。</p>\n<h2 id=\"6-ideaad-集成提交规范插件\"><a class=\"markdownIt-Anchor\" href=\"#6-ideaad-集成提交规范插件\">#</a> 6. IDEA/AD 集成提交规范插件</h2>\n<p>打开 <code>File/Settings</code> ，选择 <code>Plugins</code> ，搜索 <code>Git Commit Template</code>  插件并下载。</p>\n<p>commit 提交的时候，点击下图中的图标。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/851.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/851.png\" class=\"\"></p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/852.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/852.png\" class=\"\"></p>\n<h3 id=\"61-header\"><a class=\"markdownIt-Anchor\" href=\"#61-header\">#</a> 6.1 Header</h3>\n<p>Header 的部分只有一行，包括三个字段: <strong>type (必需), scope (可选), subject (必需)</strong></p>\n<p>对应到 idea 插件上图的配置分别为 Header 部分的:</p>\n<table>\n<thead>\n<tr>\n<th>type (必需)</th>\n<th>Type of change</th>\n<th>commit 类别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scope (可选)</td>\n<td>Scope of this change</td>\n<td>影响的范围， 一般为自己代码的模块名。</td>\n</tr>\n<tr>\n<td><strong>subject (必需)</strong></td>\n<td><strong>Short description</strong></td>\n<td><strong>简短的描述</strong>，建议符合 50/72 格式。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1-type用于说明-commit-的类别只允许使用下面7个标识\"><a class=\"markdownIt-Anchor\" href=\"#1-type用于说明-commit-的类别只允许使用下面7个标识\">#</a> (1) type 用于说明 commit 的类别，只允许使用下面 7 个标识</h4>\n<p><code>type</code>  用于说明 commit 的类别：</p>\n<ol>\n<li><strong>feat：新功能（feature）；</strong></li>\n<li><strong>fix：修补 bug；</strong></li>\n<li><strong>docs：文档（documentation）；</strong></li>\n<li><strong>style： 格式（不影响代码运行的变动，空格，格式化，等等）；</strong></li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）；</li>\n<li>perf: 性能 (提高代码性能的改变)；</li>\n<li><strong>test：增加测试或者修改测试；</strong></li>\n<li>build: 影响构建系统或外部依赖项的更改 (maven,gradle,npm 等等)；</li>\n<li>ci: 对 CI 配置文件和脚本的更改；</li>\n<li><strong>chore：其他修改， 比如构建流程， 依赖管理。</strong></li>\n<li><strong>revert: Revert a commi，用于撤销以前的 commit</strong></li>\n</ol>\n<h4 id=\"2-scope\"><a class=\"markdownIt-Anchor\" href=\"#2-scope\">#</a> (2) scope</h4>\n<p><code>scope</code>  用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h4 id=\"3-subject\"><a class=\"markdownIt-Anchor\" href=\"#3-subject\">#</a> (3) subject</h4>\n<p><code>subject</code>  是 commit 目的的简短描述，不超过 50 个字符。</p>\n<blockquote>\n<p>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes<br>\n 第一个字母小写<br>\n结尾不加句号（.）</p>\n</blockquote>\n<h3 id=\"62-body\"><a class=\"markdownIt-Anchor\" href=\"#62-body\">#</a> 6.2 Body</h3>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<pre><code>More detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n</code></pre>\n<p>有两个注意点。</p>\n<p>（1）使用第一人称现在时，比如使用 change 而不是 changed 或 changes。</p>\n<p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h3 id=\"63-footer\"><a class=\"markdownIt-Anchor\" href=\"#63-footer\">#</a> 6.3 Footer</h3>\n<p>Footer 部分只用于两种情况。</p>\n<h4 id=\"631-不兼容变动\"><a class=\"markdownIt-Anchor\" href=\"#631-不兼容变动\">#</a> 6.3.1 不兼容变动</h4>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code>  开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<pre><code>BREAKING CHANGE: isolate scope bindings definition has changed.\n\n To migrate the code follow the example below:\n\n Before:\n\n scope: &#123;\n   myAttr: 'attribute',\n &#125;\n\n After:\n\n scope: &#123;\n   myAttr: '@',\n &#125;\n\n The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n</code></pre>\n<h4 id=\"632-关闭-issue\"><a class=\"markdownIt-Anchor\" href=\"#632-关闭-issue\">#</a> 6.3.2 关闭 Issue</h4>\n<p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<pre><code>Closes #234\n</code></pre>\n<p>也可以一次关闭多个 issue 。</p>\n<pre><code>Closes #123, #245, #992\n</code></pre>\n<blockquote>\n<p>特殊情况【回滚，Revert】：如果当前 commit 用于撤销以前的 commit，<br>\n必须以 revert: 开头，后面跟着被撤销 Commit 的 Header。<br>\nBody 部分的格式是固定的，必须写成 This reverts commit <hash>.，其中的 hash 是被撤销 commit 的 SHA 标识符。<br>\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。<br>\n如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p>\n</blockquote>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/853.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/853.png\" class=\"\"></p>\n<h3 id=\"64-5072格式化\"><a class=\"markdownIt-Anchor\" href=\"#64-5072格式化\">#</a> 6.4. 50/72 格式化</h3>\n<p>git commit 格式基本规约：50/72 格式化</p>\n<ul>\n<li>第一行不超过 50 个字符</li>\n<li>然后是空白行</li>\n<li>其余文字应以 72 个字符换行</li>\n</ul>\n<p>原因：</p>\n<ul>\n<li>一些工具将第一行作为主题行，将第二段作为正文 (类似于电子邮件)。若工具流行，那么该格式将流行。</li>\n<li><code>git log</code>  不处理换行，因此如果行太长则很难阅读。</li>\n<li><code>git format-patch --stdout</code>  可以将提交转换为电子邮件。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>本章节介绍了 <em>git</em> 的一些常用命令的操作与基本概念，与基于此的 <em>git</em> 合作流程与 <em>commit</em> 规范。对于 <em>git</em> 的使用，笔者建议多加练习，不能只 &quot;纸上谈兵&quot;, 实际操作才能加深对于 <em>git</em> 的理解，而 <em>git</em> 合作流程与 <em>commit</em> 规范提供了参考。</p>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}