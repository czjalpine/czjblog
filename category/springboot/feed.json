{
    "version": "https://jsonfeed.org/version/1",
    "title": "失心耀的博客 • All posts by \"springboot\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/Springboot%E7%BB%83%E4%B9%A0/",
            "url": "http://example.com/Springboot%E7%BB%83%E4%B9%A0/",
            "title": "Springboot 后端练习任务",
            "date_published": "2021-04-10T00:39:18.000Z",
            "content_html": "<h2 id=\"后端练习任务\"><a class=\"markdownIt-Anchor\" href=\"#后端练习任务\">#</a> 后端练习任务</h2>\n<h3 id=\"day01\"><a class=\"markdownIt-Anchor\" href=\"#day01\">#</a> day01：</h3>\n<h4 id=\"1创建springboot工程熟悉每个目录结构的作用\"><a class=\"markdownIt-Anchor\" href=\"#1创建springboot工程熟悉每个目录结构的作用\">#</a> 1. 创建 Springboot 工程，熟悉每个目录结构的作用</h4>\n<h4 id=\"2熟悉配置文件能自定义属性并在代码中使用的地方绑定到指定的属性上\"><a class=\"markdownIt-Anchor\" href=\"#2熟悉配置文件能自定义属性并在代码中使用的地方绑定到指定的属性上\">#</a> 2. 熟悉配置文件，能自定义属性，并在代码中使用的地方，绑定到指定的属性上</h4>\n<h4 id=\"3创建restful-api\"><a class=\"markdownIt-Anchor\" href=\"#3创建restful-api\">#</a> 3. 创建 Restful API</h4>\n<h4 id=\"4使用jpa访问mariadb实现增删查改并进行单元测试\"><a class=\"markdownIt-Anchor\" href=\"#4使用jpa访问mariadb实现增删查改并进行单元测试\">#</a> 4. 使用 JPA 访问 Mariadb，实现增删查改，并进行单元测试</h4>\n<h4 id=\"5熟悉git命令\"><a class=\"markdownIt-Anchor\" href=\"#5熟悉git命令\">#</a> 5. 熟悉 Git 命令</h4>\n<hr>\n<h3 id=\"day02\"><a class=\"markdownIt-Anchor\" href=\"#day02\">#</a> day02：</h3>\n<h4 id=\"1读取applicationproperties中的自定义属性\"><a class=\"markdownIt-Anchor\" href=\"#1读取applicationproperties中的自定义属性\">#</a> 1. 读取 application.properties 中的自定义属性。</h4>\n<p>在 <code>application.properties</code>  定义两个属性 <code>wx.appid=123456</code>  和 <code>wx.secret=9999</code> ，</p>\n<p>新建 WxController 控制器，在控制器中读取上面定义的两个自定义属性。</p>\n<h4 id=\"2自定义配置文件读取自定义配置文件中的属性\"><a class=\"markdownIt-Anchor\" href=\"#2自定义配置文件读取自定义配置文件中的属性\">#</a> 2. 自定义配置文件，读取自定义配置文件中的属性。</h4>\n<p>新建 <code>datasource.properties</code>  文件，在该配置文件中定义以下几个属性，在 WxController 控制器中读取该配置文件中的属性.</p>\n<blockquote>\n<p>note: 该方式不止一种，选择最优雅的一种。</p>\n</blockquote>\n<pre><code>geek.datasource.url=jdbc:mysql://localhost:3306/geek\ngeek.datasource.username=geek\ngeek.datasource.password=123456\n</code></pre>\n<h4 id=\"3jpa基于方法名称命名规则查询\"><a class=\"markdownIt-Anchor\" href=\"#3jpa基于方法名称命名规则查询\">#</a> 3.JPA 基于方法名称命名规则查询</h4>\n<p>新建 <code>Student</code>  实体。实体属性根据需求自己定义。</p>\n<p>1. 根据学生的 <code>年龄</code> 查询</p>\n<p>2. 根据学生的 <code>名称``模糊</code> 查询</p>\n<p>3. 查询 <code>所有</code> 学生，按照 <code>年龄</code> 降序</p>\n<p>4. 统计 <code>所有</code> 学生的人数</p>\n<h4 id=\"4jpa自定义sql查询使用query注解\"><a class=\"markdownIt-Anchor\" href=\"#4jpa自定义sql查询使用query注解\">#</a> 4.JPA 自定义 SQL 查询，使用 @Query 注解。</h4>\n<p>1. 根据学生的 <code>班级</code> 查询，并按照年龄降序</p>\n<p>2. 根据学生的 <code>年龄</code> 进行 <code>范围</code> 查询</p>\n<h4 id=\"5jpa分页查询\"><a class=\"markdownIt-Anchor\" href=\"#5jpa分页查询\">#</a> 5.JPA 分页查询</h4>\n<p>1. 根据学生的 <code>年龄</code> 进行查询，并进行分页。</p>\n<h4 id=\"6复杂查询\"><a class=\"markdownIt-Anchor\" href=\"#6复杂查询\">#</a> 6. 复杂查询</h4>\n<p>1. 根据学生 <code>年龄</code> 比较查询和 <code>名称</code> 、 <code>班级</code> 的模糊查询，并进行分页。</p>\n<p><strong>【注意】年龄为一个变量，名称和班级为一个变量，总共两个变量</strong></p>\n<h4 id=\"7跟app组对接\"><a class=\"markdownIt-Anchor\" href=\"#7跟app组对接\">#</a> 7. 跟 app 组对接</h4>\n<div style=\"color:red\">每个后端成员找一个APP成员，组成搭档后，进行需求的分析，为下一次作业做准备。\n<p>项目背景：小说 APP</p>\n<hr>\n<h3 id=\"day03\"><a class=\"markdownIt-Anchor\" href=\"#day03\">#</a> day03：</h3>\n<h4 id=\"1小说列表首页\"><a class=\"markdownIt-Anchor\" href=\"#1小说列表首页\">#</a> 1. 小说列表首页</h4>\n<h5 id=\"11-新建个springboot项目项目名称名字_book\"><a class=\"markdownIt-Anchor\" href=\"#11-新建个springboot项目项目名称名字_book\">#</a> 1.1 新建个 SpringBoot 项目，** 项目名称：** 名字_book</h5>\n<h5 id=\"12-找上周选择的app搭档根据他的首页页面进行需求分析设计实体和restful-api\"><a class=\"markdownIt-Anchor\" href=\"#12-找上周选择的app搭档根据他的首页页面进行需求分析设计实体和restful-api\">#</a> 1.2 找上周选择的 App 搭档，根据他的首页页面进行需求分析，设计实体和 Restful Api.</h5>\n<p>实体一般包括<strong>书籍</strong> <code>Book</code>  和<strong>分类</strong> <code>Category</code> ，具体实体设计需要根据页面分析。【<strong>note: 分类实体能写出无限级的加分</strong>】</p>\n<p><strong><span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span></strong> 需要贴 APP 组员首页截图和 Postman 请求首页 API 结果的截图。</p>\n<blockquote>\n<p><strong>注意：需写增删查改方法，数据通过 postman 模拟添加。</strong></p>\n</blockquote>\n<h4 id=\"2thymeleaf使用\"><a class=\"markdownIt-Anchor\" href=\"#2thymeleaf使用\">#</a> 2.Thymeleaf 使用</h4>\n<h5 id=\"21-新建springboot项目项目名称-名字_day03\"><a class=\"markdownIt-Anchor\" href=\"#21-新建springboot项目项目名称-名字_day03\">#</a> 2.1 新建 SpringBoot 项目，项目名称： 名字_day03</h5>\n<h5 id=\"22-阅读thymeleaf教程把练习代码提交到day03项目中\"><a class=\"markdownIt-Anchor\" href=\"#22-阅读thymeleaf教程把练习代码提交到day03项目中\">#</a> 2.2 阅读 Thymeleaf 教程，把练习代码提交到 day03 项目中</h5>\n<p>Thymeleaf 教程链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDMwODk0Nzc=\">https://zhuanlan.zhihu.com/p/103089477</span></p>\n<h5 id=\"23-thymeleaf实战\"><a class=\"markdownIt-Anchor\" href=\"#23-thymeleaf实战\">#</a> 2.3 Thymeleaf 实战</h5>\n<p>在小说项目 <code>名字_book</code>  编写后台 HTML 页面，使用 Thymeleaf 模板引擎，对接小说项目中的<strong>书籍</strong> <code>Book</code>  和<strong>分类</strong> <code>Category</code>  的<strong>增删查改 Restful API</strong></p>\n<blockquote>\n<p>增删查改 Restful API 有如下几个功能：</p>\n<p>书籍：</p>\n<p>1. 查询书籍，<strong>要求分页</strong></p>\n<p>2. 添加书籍</p>\n<p>3. 修改书籍</p>\n<p>4. 删除书籍</p>\n<p>分类：</p>\n<p>1. 查询分类</p>\n<p>2. 添加分类</p>\n<p>3. 修改分类</p>\n<p>4. 删除分类</p>\n</blockquote>\n<p><strong>代码提交到小说项目 <code>名字_book</code> </strong></p>\n<p><strong>【note】1. 可以使用 Bootstrap4 进行页面布局 <code>https://getbootstrap.net/</code> ；2. 也可以使用后台模板，只要能做出效果；3. 但也可以你纯用 HTML+CSS 手撸一个后台页面；【推荐】第一和第二种结合起来用</strong></p>\n<hr>\n<h3 id=\"day04\"><a class=\"markdownIt-Anchor\" href=\"#day04\">#</a> day04：</h3>\n<h4 id=\"1对接小说app首页\"><a class=\"markdownIt-Anchor\" href=\"#1对接小说app首页\">#</a> 1. 对接小说 APP 首页</h4>\n<p>跟自己 APP 组员对接小说 APP 首页，数据对接成功，提供截图到 README.md 文件中</p>\n<h4 id=\"2参数-表单检验\"><a class=\"markdownIt-Anchor\" href=\"#2参数-表单检验\">#</a> 2. 参数、表单检验</h4>\n<p>对书籍实体和分类实体数据进行检验</p>\n<p>1. 所有属性不能为空</p>\n<p>2.<strong> 书名</strong>长度在 1~20 个字符</p>\n<h4 id=\"3自定义异常全局异常捕获\"><a class=\"markdownIt-Anchor\" href=\"#3自定义异常全局异常捕获\">#</a> 3. 自定义异常，全局异常捕获</h4>\n<p>自定义一个异常 <code>ServiceException</code> ，全局异常捕获这个<strong>自定义异常</strong>和<strong>表单检验异常</strong>。</p>\n<p>教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMDY0MjEwMD91dG1fc291cmNlPXRhZy1uZXdlc3Q=\">https://segmentfault.com/a/1190000020642100?utm_source=tag-newest</span></p>\n<hr>\n<h3 id=\"day05\"><a class=\"markdownIt-Anchor\" href=\"#day05\">#</a> day05：</h3>\n<h4 id=\"1新建用户实体\"><a class=\"markdownIt-Anchor\" href=\"#1新建用户实体\">#</a> 1. 新建用户实体</h4>\n<p>实体自己设计</p>\n<h4 id=\"2注册用户\"><a class=\"markdownIt-Anchor\" href=\"#2注册用户\">#</a> 2. 注册用户</h4>\n<p>必须包含：用户名 + 密码 + 确认密码</p>\n<p>其他可以根据自己加.</p>\n<p><strong>注意：密码需要使用 Bcrypt 加密.</strong></p>\n<h4 id=\"3邮箱注册\"><a class=\"markdownIt-Anchor\" href=\"#3邮箱注册\">#</a> 3. 邮箱注册</h4>\n<p>邮箱注册需要发一封邮件到该用户的邮箱中，只有该用户点击该邮件进行验证，该用户才可以验证成功。</p>\n<p><img data-src=\"../../../springboot%E7%BB%83%E4%B9%A0%E4%BB%BB%E5%8A%A1/assets/image-20200928094416423.png\" alt=\"image-20200928094416423\"></p>\n<h4 id=\"4手机号注册\"><a class=\"markdownIt-Anchor\" href=\"#4手机号注册\">#</a> 4. 手机号注册</h4>\n<p>用户填写完手机号，发送验证码，<strong>验证码需要有个 15 分钟有效期。</strong></p>\n<hr>\n<h3 id=\"day06\"><a class=\"markdownIt-Anchor\" href=\"#day06\">#</a> day06：</h3>\n<h4 id=\"1批量导入书籍\"><a class=\"markdownIt-Anchor\" href=\"#1批量导入书籍\">#</a> 1. 批量导入书籍</h4>\n<p>复制出来之前的小说项目，更名为：姓名_day06</p>\n<p>在页面上，加一个批量导入按钮，点击可以上传 excel 表格，进行批量导入。</p>\n<p>note：封面图片 url 可以默认在 excel 中写死</p>\n<p>导入格式：书籍名称、介绍、作者、分类名称</p>\n<h4 id=\"2批量导出所有书籍\"><a class=\"markdownIt-Anchor\" href=\"#2批量导出所有书籍\">#</a> 2. 批量导出所有书籍</h4>\n<p>导出 excel 名称格式为： <strong>当前日期_书籍信息.xlsx</strong>     2020-10-09_书籍信息.xlsx</p>\n<p>列名需包括：书籍名称、介绍、作者、分类名称、创建时间</p>\n<hr>\n<h3 id=\"day07\"><a class=\"markdownIt-Anchor\" href=\"#day07\">#</a> day07：</h3>\n<h4 id=\"目标学会使用swagger2生成文档\"><a class=\"markdownIt-Anchor\" href=\"#目标学会使用swagger2生成文档\">#</a> 目标：学会使用 swagger2 生成文档</h4>\n<p>介绍</p>\n<blockquote>\n<p>在日常的工作中，我们往往需要给前端（WEB 端、IOS、Android）或者第三方提供接口，这个时候我们就需要给他们提供一份详细的 API 说明文档。但维护一份详细的文档可不是一件简单的事情。首先，编写一份详细的文档本身就是一件很费时费力的事情，另一方面，由于代码和文档是分离的，所以很容易导致文档和代码的不一致。这篇文章我们就来分享一种 API 文档维护的方式，即通过 Swagger 来自动生成 Restuful API 文档。</p>\n<p>那什么是 Swagger？我们可以直接看下官方的描述：</p>\n<pre><code>THE WORLD'S MOST POPULAR API TOOLING``Swagger is the world’s largest framework of API developer tools ``for` `the OpenAPI Specification(OAS),``enabling development across the entire API lifecycle, from design and documentation, to test and deployment.\n</code></pre>\n<p>这段话首先告诉大家 Swagger 是世界上最流行的 API 工具，并且 Swagger 的目的是支撑整个 API 生命周期的开发，包括设计、文档以及测试和部署。这篇文章中我们会用到 Swagger 的文档管理和测试功能。</p>\n</blockquote>\n<p>任务：给各个接口生成文档，包含接口说明、方法说明、参数说明、例子</p>\n<p>使用<strong> Swagger2</strong> 对书籍进行<strong>增删改查</strong>测试，贴测试结果的截图到 readme.md 文档中</p>\n<blockquote>\n<p>可以使用 <code>swagger-bootstrap-ui</code>  对文档进行换肤</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueGlhb21pbmZvLmNvbS8yMDE4LzA4LzI5L3N3YWdnZXItYm9vdHN0cmFwLXVpLWRlc2NyaXB0aW9uLw==\">https://www.xiaominfo.com/2018/08/29/swagger-bootstrap-ui-description/</span></p>\n</blockquote>\n<hr>\n<h3 id=\"day08\"><a class=\"markdownIt-Anchor\" href=\"#day08\">#</a> day08：</h3>\n<h4 id=\"1spring-aop使用\"><a class=\"markdownIt-Anchor\" href=\"#1spring-aop使用\">#</a> 1.Spring AOP 使用</h4>\n<p>了解以下注解的使用：</p>\n<blockquote>\n<ul>\n<li><strong>@Aspect</strong>：声明该类为一个注解类；</li>\n<li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li>\n</ul>\n<p>切点定义好后，就是围绕这个切点做文章了；</p>\n<ul>\n<li><strong>@Before</strong>: 在切点之前，织入相关代码；</li>\n<li><strong>@After</strong>: 在切点之后，织入相关代码；</li>\n<li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li>\n<li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理；</li>\n<li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li>\n<li><img data-src=\"C:%5CUsers%5CAdmin%5CDocuments%5C%E6%9E%81%E5%AE%A2%E4%BD%9C%E4%B8%9A%E5%B8%83%E7%BD%AE%5Cassets%5Cimage-20210426152243000.png\" alt=\"image-20210426152243000\"></li>\n</ul>\n</blockquote>\n<p><strong>练习任务：使用 Spring AOP 计算所有 Service 业务类的程序执行时间。【注意：使用 log 日志形式打印到控制台】</strong></p>\n<p><strong>程序控制头打印如下，需截图到 README.md 中。</strong></p>\n<blockquote>\n<p><strong>INFO  ServiceLogAspect:43 - ====== 开始执行 class com.geek.service.impl.CategoryServiceImpl.xxxx======</strong></p>\n<p>INFO  ServiceLogAspect:62 - ====== 执行结束，耗时：248 毫秒 ======</p>\n</blockquote>\n<hr>\n<h3 id=\"day09\"><a class=\"markdownIt-Anchor\" href=\"#day09\">#</a> day09：</h3>\n<h4 id=\"1springboot-自定义注解\"><a class=\"markdownIt-Anchor\" href=\"#1springboot-自定义注解\">#</a> 1.SpringBoot 自定义注解</h4>\n<h5 id=\"11-了解如下几个java元注解把每个元注解的意思写道readmemd笔记中\"><a class=\"markdownIt-Anchor\" href=\"#11-了解如下几个java元注解把每个元注解的意思写道readmemd笔记中\">#</a> <strong>1.1 了解如下几个 Java 元注解</strong>，把每个元注解的意思写道 README.md 笔记中。</h5>\n<ul>\n<li>\n<p><strong>@Retention</strong></p>\n<p>Retention (保留) 注解说明，这种类型的注解会被保留到那个阶段。有三个值:<br>\n1.RetentionPolicy.SOURCE —— 这种类型的 Annotations 只在源代码级别保留，编译时就会被忽略<br>\n 2.RetentionPolicy.CLASS —— 这种类型的 Annotations 编译时被保留，在 class 文件中存在，但 JVM 将会忽略<br>\n 3.RetentionPolicy.RUNTIME —— 这种类型的 Annotations 将被 JVM 保留，所以他们能在运行时被 JVM 或其他使用反射机制的代码所读取和使用.</p>\n</li>\n<li>\n<p><strong>@Target</strong></p>\n</li>\n<li>\n<p><strong>@Document</strong></p>\n<p>Documented 注解表明这个注解应该被 javadoc 工具记录。默认情况下，javadoc 是不包括注解的。但如果声明注解时指定了 @Documented, 则它会被 javadoc 之类的工具处理，所以注解类型信息也会被包括在生成的文档中。示例 6 进一步演示了使用</p>\n</li>\n<li>\n<p><strong>@Inherited</strong></p>\n</li>\n</ul>\n<h5 id=\"12-自定义检验注解\"><a class=\"markdownIt-Anchor\" href=\"#12-自定义检验注解\">#</a> 1.2 自定义检验注解</h5>\n<p>复制上次的注册项目，更名为：名字_day09</p>\n<p>在使用<strong>密码 + 确认密码</strong>注册的时候，我们需要检验密码和确认密码是否一致，这里我们需要自己定义<strong>确认密码</strong>检验注解，来进行检验。</p>\n<p><strong>【注意】确认密码注解名称统一定义叫：ConfirmPassword 注解类</strong></p>\n<p><strong>【注意】可以参考官方检验注解源码，结构一样，主要逻辑不一样而已。</strong></p>\n<p><strong>最后使用 PostMan 测试检验的结果，把成功和失败的请求截图到 README.md 笔记中</strong></p>\n<hr>\n<h3 id=\"day10\"><a class=\"markdownIt-Anchor\" href=\"#day10\">#</a> day10：</h3>\n<p>阅读如下这篇文章，把文章案例里的代码都要敲一遍，最后一起提交到仓库。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMDE5Mjg3OA==\">https://segmentfault.com/a/1190000020192878</span></p>\n<p>任务：使用定时任务完成：<strong>定时数据库备份</strong>，备份每个月的 1 号凌晨 00: 00 点的数据库，要求兼容<strong> Window 和 Linux</strong> 双系统，把结果截图到 README.md 文件中。</p>\n<p>自己搭建 Linux 环境，镜像使用 Centos7，详细安装见下面这篇博客</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pvdWh1dS9hcnRpY2xlL2RldGFpbHMvODY1MzA3ODc=\">https://blog.csdn.net/zouhuu/article/details/86530787</span></p>\n<hr>\n<h3 id=\"day11\"><a class=\"markdownIt-Anchor\" href=\"#day11\">#</a> day11：</h3>\n<h4 id=\"rabbitmq使用\"><a class=\"markdownIt-Anchor\" href=\"#rabbitmq使用\">#</a> RabbitMq 使用</h4>\n<p>阅读博客文章：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAxOS8xMS8yOC9SYWJiaXRNcSVFNiU4QyU4NyVFNSU4RCU5Ny8=\">http://zzm.yunep.com/2019/11/28/RabbitMq 指南 /</span></p>\n<p><strong>要求：把博客里的练习代码都要敲一遍，并要求做学习笔记，后面提交到 git 仓库。</strong></p>\n<h4 id=\"rabbitmq发送短信验证码\"><a class=\"markdownIt-Anchor\" href=\"#rabbitmq发送短信验证码\">#</a> RabbitMQ 发送短信验证码</h4>\n<p>将之前的短信服务抽离为一个独立工程，工程名称：<strong>姓名_day11_sms</strong></p>\n<p>将<strong> Day05 代码</strong>复制出来，更名为：<strong>姓名_day11_producer</strong></p>\n<p>当手机号注册，发送验证码的时候，需要向 Rabbitmq 发送消息，短信服务接收到消息，进行消费。</p>\n<p>发送短信服务工程为消费者，<strong>姓名_day11_producer</strong> 为生产者</p>\n<p><strong>将测试的结果截图到 README.md 中。</strong></p>\n<hr>\n<h3 id=\"day12\"><a class=\"markdownIt-Anchor\" href=\"#day12\">#</a> day12：</h3>\n<h4 id=\"此次学习目标springbootrabbitmq-做智能家居\"><a class=\"markdownIt-Anchor\" href=\"#此次学习目标springbootrabbitmq-做智能家居\">#</a> 此次学习目标：SpringBoot+RabbitMQ 做智能家居</h4>\n<p>阅读博客文章：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAyMC8xMC8xNC9TcHJpbmdCb290LVJhYmJpdE1RLSVFNSU4MSU5QSVFNiU5OSVCQSVFOCU4MyVCRCVFNSVBRSVCNiVFNSVCMSU4NS8=\">http://zzm.yunep.com/2020/10/14/SpringBoot-RabbitMQ - 做智能家居 /</span></p>\n<p>创建 SpringBoot 项目：工程名称：名字_day12</p>\n<p><strong>要求：实现文章里的案例功能，并要求写 README.md 学习笔记。</strong></p>\n<hr>\n<h3 id=\"day13\"><a class=\"markdownIt-Anchor\" href=\"#day13\">#</a> day13：</h3>\n<p><strong>学习目标：Redis 使用</strong></p>\n<h4 id=\"1安装redis并了解redis命令\"><a class=\"markdownIt-Anchor\" href=\"#1安装redis并了解redis命令\">#</a> 1. 安装 Redis 并了解 Redis 命令</h4>\n<h4 id=\"2了解redis的五种数据类型需要做笔记\"><a class=\"markdownIt-Anchor\" href=\"#2了解redis的五种数据类型需要做笔记\">#</a> 2. 了解 Redis 的五种数据类型，需要做笔记！</h4>\n<ul>\n<li>\n<p><strong>String</strong></p>\n</li>\n<li>\n<p><strong>Hash</strong></p>\n</li>\n<li>\n<p><strong>list</strong></p>\n</li>\n<li>\n<p><strong>set</strong></p>\n</li>\n<li>\n<p><strong>zset</strong></p>\n</li>\n</ul>\n<h4 id=\"3springboot整合redis并实现手机验证码注册和验证码过期\"><a class=\"markdownIt-Anchor\" href=\"#3springboot整合redis并实现手机验证码注册和验证码过期\">#</a> 3.springboot 整合 redis，并实现手机验证码注册和验证码过期</h4>\n<p>博客文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC85NzM5NDkzMg==\">https://zhuanlan.zhihu.com/p/97394932</span></p>\n<p>在短信服务工程中引入 redis，发送短信时：键：手机号码 +&quot;_register&quot; 值：短信验证码</p>\n<p>采用 redis 方式将短信验证码放入 redis 缓存中，如果<strong>验证码 60 秒内未过期</strong> 且 <strong>验证码匹配通过</strong>，则执行注册逻辑，完成注册。</p>\n<hr>\n<h3 id=\"day14\"><a class=\"markdownIt-Anchor\" href=\"#day14\">#</a> day14：</h3>\n<p>简单使用 SpringSecurity【老懒狗可忽略】</p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDc2NjIxNC9hcnRpY2xlL2RldGFpbHMvMTA3MTA3NjM2\">https://blog.csdn.net/weixin_44766214/article/details/107107636</span></p>\n<p><strong>学习目标：Oauth2 使用入门</strong></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAxOS8xMi8xMy9PYXV0aDIlRTQlQkQlQkYlRTclOTQlQTglRTUlODUlQTUlRTklOTclQTgv\">http://zzm.yunep.com/2019/12/13/Oauth2 使用入门 /</span></p>\n<p>仓库名称：名字_day14</p>\n<p>根据博客代码搭建 Oauth2 登录认证，把代码提交到仓库，并把演示图和重要代码放到 README.md 文件中。</p>\n<hr>\n<h3 id=\"day15\"><a class=\"markdownIt-Anchor\" href=\"#day15\">#</a> day15：</h3>\n<p><strong>学习目标：Oauth2 结合 JWT</strong></p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/</span></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAxOS8xMi8xMi9PYXV0aDIlRTclQkIlOTMlRTUlOTAlODhKV1Qv\">http://zzm.yunep.com/2019/12/12/Oauth2 结合 JWT/</span></p>\n<p>复制 day14 的项目，仓库名称：名字_day15</p>\n<p>使用 JWT 存储令牌，把博客上的练习代码都试一遍，并把演示图和重要代码放到 README.md 文件中。</p>\n<hr>\n<h3 id=\"day16\"><a class=\"markdownIt-Anchor\" href=\"#day16\">#</a> day16：</h3>\n<p><strong>学习目标：Oauth2 实现单点登录</strong></p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">https://jwt.io/</span></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAxOS8xMi8yNi9PYXV0aDIlRTUlQUUlOUUlRTclOEUlQjAlRTUlOEQlOTUlRTclODIlQjklRTclOTklQkIlRTUlQkQlOTUv\">http://zzm.yunep.com/2019/12/26/Oauth2 实现单点登录 /</span></p>\n<p>复制 day15 的项目，仓库名称：名字_day16</p>\n<p>把博客上的练习代码都试一遍，并把演示图和重要代码放到 README.md 文件中。</p>\n<hr>\n<h3 id=\"day17\"><a class=\"markdownIt-Anchor\" href=\"#day17\">#</a> day17：</h3>\n<p><strong>学习目标：ElasticSearch 安装</strong></p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9lbGFzdGljc2VhcmNoLw==\">https://www.elastic.co/cn/elasticsearch/</span></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAyMC8xMS8xMy9FbGFzdGljc2VhcmNoLSVFNSU4NSVBNSVFOSU5NyVBOCVFNSVBRSU4OSVFOCVBMyU4NS8=\">http://zzm.yunep.com/2020/11/13/Elasticsearch - 入门安装 /</span></p>\n<p>仓库名称：名字_day17</p>\n<p>把安装流程和安装完成演示图放到 README.md 文件中。</p>\n<hr>\n<h3 id=\"day18\"><a class=\"markdownIt-Anchor\" href=\"#day18\">#</a> day18：</h3>\n<p>简简单单 Day 系列小任务，主要完成项目开发。</p>\n<p><strong>学习目标：ElasticSearch 核心概念和中文分词器配置</strong></p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9lbGFzdGljc2VhcmNoLw==\">https://www.elastic.co/cn/elasticsearch/</span></p>\n<p>中文分词器官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXMvdGFnL3Y3LjEwLjA=\">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.10.0</span></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS55dW5lcC5jb20vMjAyMC8xMS8xNy9FbGFzdGljU2VhcmNoJUU2JUEwJUI4JUU1JUJGJTgzJUU2JUE2JTgyJUU1JUJGJUI1JUU1JTkyJThDJUU0JUI4JUFEJUU2JTk2JTg3JUU1JTg4JTg2JUU4JUFGJThEJUU1JTk5JUE4Lw==\">http://zzm.yunep.com/2020/11/17/ElasticSearch 核心概念和中文分词器 /</span></p>\n<p>仓库名称：名字_day18</p>\n<p>把完成演示图放到 README.md 文件中。</p>\n<hr>\n<h3 id=\"day19\"><a class=\"markdownIt-Anchor\" href=\"#day19\">#</a> day19：</h3>\n<p>简简单单 Day 系列小任务，主要完成项目开发。</p>\n<p><strong>学习目标：ElasticSearch 索引操作</strong></p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9lbGFzdGljc2VhcmNoLw==\">https://www.elastic.co/cn/elasticsearch/</span></p>\n<p>阅读博客：<span class=\"exturl\" data-url=\"aHR0cDovL3p6bS5sd2Vpc2hpLmNvbS8yMDIwLzExLzE3L0VsYXN0aWNTZWFyY2gtJUU3JUI0JUEyJUU1JUJDJTk1JUU1JTlGJUJBJUU2JTlDJUFDJUU2JTkzJThEJUU0JUJEJTlDLw==\">http://zzm.lweishi.com/2020/11/17/ElasticSearch - 索引基本操作 /</span></p>\n<p>仓库名称：名字_day19</p>\n<p>把完成演示图放到 README.md 文件中。</p>\n",
            "tags": [
                "Springboot"
            ]
        }
    ]
}