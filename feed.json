{
    "version": "https://jsonfeed.org/version/1",
    "title": "失心耀的博客",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/",
            "url": "http://example.com/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/",
            "title": "RabbitMQ 高级特性",
            "date_published": "2021-06-13T03:38:04.000Z",
            "content_html": "<span id=\"more\"></span>\n<h1 id=\"1-rabbitmq高级-过期时间ttl\"><a class=\"markdownIt-Anchor\" href=\"#1-rabbitmq高级-过期时间ttl\">#</a> 1. RabbitMQ 高级 - 过期时间 TTL</h1>\n<h2 id=\"11-概述\"><a class=\"markdownIt-Anchor\" href=\"#11-概述\">#</a> 1.1 概述</h2>\n<p>过期时间 TTL 表示可以对消息设置预期的时间，在这个时间内都可以被消费者接收获取；过了之后消息将自动被删除。RabbitMQ 可以对<strong>消息和队列</strong>设置 TTL。目前有两种方法可以设置。</p>\n<ul>\n<li>第一种方法是通过队列属性设置，队列中所有消息都有相同的过期时间。</li>\n<li>第二种方法是对消息进行单独设置，每条消息 TTL 可以不同。</li>\n</ul>\n<p><strong>如果上述两种方法同时使用</strong>，<strong>则消息的过期时间以两者之间 TTL 较小的那个数值为准</strong>。消息在队列的生存时间一旦超过设置的 TTL 值，就称为 dead message 被投递到死信队列， 消费者将无法再收到该消息。</p>\n<h2 id=\"12-设置队列ttl\"><a class=\"markdownIt-Anchor\" href=\"#12-设置队列ttl\">#</a> 1.2 设置队列 TTL</h2>\n<p>生产者、消费者都进行交换机、队列的配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName TTLRabbitMqConfiguration</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description ttl 队列配置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 16:40</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TTLRabbitMqConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 声明注册 direct 模式的交换机</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">ttlDirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl_direct_exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 队列的过期时间</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-message-ttl\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">ttlDirectBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">ttlDirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>参数 x-message-ttl 的值 必须是非负 32 位整数 (0 &lt;= n &lt;= 2^32-1) ，以毫秒为单位表示 TTL 的值。这样，值 6000 表示存在于 队列 中的当前 消息 将最多只存活 6 秒。</p>\n</blockquote>\n<p>生产者 <code>OrderService</code>  下单代码，以及测试。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrderTTL</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义交换机</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"ttl_direct_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> orderNumber <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\",订单编号是：\"</span> <span class=\"token operator\">+</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"ttl\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 发送订单信息给 RabbitMQ fanout</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrderTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">111L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513165521887.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513165521887.png\" class=\"\"></p>\n<h2 id=\"13-设置消息ttl\"><a class=\"markdownIt-Anchor\" href=\"#13-设置消息ttl\">#</a> 1.3 设置消息 TTL</h2>\n<p>消息的过期时间；只需要在发送消息（可以发送到任何队列，不管该队列是否属于某个交换机）的时候设置过期时间即可。在测试类中编写如下方法发送消息并设置过期时间到队列：</p>\n<ul>\n<li>在 <code>TTLRabbitMqConfiguration</code>  配置类中创建一个普通的队列，并绑定到该交换机上。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">ttlMsgQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.message.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在生产者 <code>OrderService</code>  中发送消息，并设置过期时间。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 给消息设置过期时间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrderTTLMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义交换机</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"ttl_direct_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> orderNumber <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\",订单编号是：\"</span> <span class=\"token operator\">+</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"ttlMsg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 给消息设置过期时间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">MessagePostProcessor</span> messagePostProcessor <span class=\"token operator\">=</span> message <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setContentEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 发送订单信息给 RabbitMQ fanout</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">,</span> messagePostProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testTTLMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrderTTLMsg</span><span class=\"token punctuation\">(</span><span class=\"token number\">111L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>两种方法有如下区别：</p>\n<p>队列 TTL：过期以后，会写入转移到死信队列中。</p>\n<p>消息 TTL：过期以后，就会被移除，不会被转移到死信队列中。</p>\n</blockquote>\n<h1 id=\"2-rabbitmq高级-死信队列\"><a class=\"markdownIt-Anchor\" href=\"#2-rabbitmq高级-死信队列\">#</a> 2. RabbitMQ 高级 - 死信队列</h1>\n<h2 id=\"21-概述\"><a class=\"markdownIt-Anchor\" href=\"#21-概述\">#</a> 2.1 概述</h2>\n<p>DLX，全称为 Dead-Letter-Exchange , 可以称之为死信交换机，也有人称之为死信邮箱。当消息在一个队列中变成死信 (dead message) 之后，它能被重新发送到另一个交换机中，这个交换机就是 DLX ，绑定 DLX 的队列就称之为死信队列。<br>\n消息变成死信，可能是由于以下的原因：</p>\n<ul>\n<li>消息被拒绝</li>\n<li>消息过期</li>\n<li>队列达到最大长度</li>\n</ul>\n<p>DLX 也是一个正常的交换机，和一般的交换机没有区别，它能在任何的队列上被指定，实际上就是设置某一个队列的属性。<strong>当这个队列中存在死信时，Rabbitmq 就会自动地将这个消息重新发布到设置的 DLX 上去，进而被路由到另一个队列，即死信队列。</strong><br>\n要想使用死信队列，只需要在定义队列的时候设置队列参数  <code>x-dead-letter-exchange</code>  指定交换机即可。</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/833.png\" alt=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/833.png\" class=\"\">\n<h2 id=\"22-实现\"><a class=\"markdownIt-Anchor\" href=\"#22-实现\">#</a> 2.2 实现</h2>\n<p>在 <code>TTLRabbitMqConfiguration</code>  中的队列 <code>ttlQueue</code>  配置死信交换机和死信队列</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 队列的过期时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-message-ttl\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置死信交换机和死信队列</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-dead-letter-exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dead_direct_exchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-dead-letter-routing-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fanout 模式不需要配置路由 Key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后再运行下之前的测试方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrderTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">111L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 rabbitMQ 管理界面中结果</p>\n<ul>\n<li>未过期：</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513173952448.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513173952448.png\" class=\"\"></p>\n<ul>\n<li>过期后：</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513174028982.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513174028982.png\" class=\"\"></p>\n<h2 id=\"23-队列达到最大接收长度\"><a class=\"markdownIt-Anchor\" href=\"#23-队列达到最大接收长度\">#</a> 2.3 队列达到最大接收长度</h2>\n<p>在 <code>TTLRabbitMqConfiguration</code>  中的队列 <code>ttlQueue</code>  配置接收消息个数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">ttlQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 队列的过期时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-message-ttl\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置死信交换机和死信队列</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-dead-letter-exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dead_direct_exchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-dead-letter-routing-key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dead\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//fanout 模式不需要配置路由 Key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttl.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果达到最大接收消息个数后，其余的消息会被转移到死信队列中。</p>\n<p>模拟发送 11 次消息到该队列中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testForTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrderTTL</span><span class=\"token punctuation\">(</span><span class=\"token number\">111L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513175005152.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513175005152.png\" class=\"\"></p>\n<p>该队列只能接收 5 个消息，其余的 6 个转移到死信队列中。</p>\n<p>ttl 队列的 5 个消息过期后，也会被转入死信队列中。</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513175130713.png\" alt=\"image-20210513175130713\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210513175130713.png\" class=\"\">\n<h1 id=\"3rabbitmq高级-内存磁盘的监控\"><a class=\"markdownIt-Anchor\" href=\"#3rabbitmq高级-内存磁盘的监控\">#</a> 3.RabbitMQ 高级 - 内存磁盘的监控</h1>\n<h2 id=\"31-rabbitmq的内存警告\"><a class=\"markdownIt-Anchor\" href=\"#31-rabbitmq的内存警告\">#</a> 3.1 RabbitMQ 的内存警告</h2>\n<p>当内存使用超过配置的阈值或者磁盘空间剩余空间对于配置的阈值时，RabbitMQ 会暂时阻塞客户端的连接，并且停止接收从客户端发来的消息，以此避免服务器的崩溃，客户端与服务端的心态检测机制也会失效。<br>\n如下图：</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/840.png\" alt=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/840.png\" class=\"\">\n<p><strong>当出现 blocking 或 blocked 话说明到达了阈值和以及高负荷运行了。</strong></p>\n<h2 id=\"32-rabbitmq的内存控制\"><a class=\"markdownIt-Anchor\" href=\"#32-rabbitmq的内存控制\">#</a> 3.2 RabbitMQ 的内存控制</h2>\n<p>参考帮助文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpZ3VyZS5odG1s\">https://www.rabbitmq.com/configure.html</span><br>\n 当出现警告的时候，可以通过配置去修改和调整.</p>\n<h3 id=\"321-命令的方式\"><a class=\"markdownIt-Anchor\" href=\"#321-命令的方式\">#</a> 3.2.1 命令的方式：</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl set_vm_memory_high_watermark <span class=\"token number\">0.7</span> <span class=\"token comment\">#设置相对的内存大小，值的范围在 0~1 范围，是磁盘大小的 0~1 倍数，建议取值在 04~0.7 之间，不建议超过 0.7.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmqctl set_vm_memory_high_watermark absolute 10MB <span class=\"token comment\">#设置绝对的内存大小</span></pre></td></tr></table></figure><p><strong>fraction/value 为内存阈值</strong>。<strong>默认情况是：0.4/2GB</strong>，代表的含义是：当 RabbitMQ 的内存超过 40% 时，就会产生警告并且阻塞所有生产者的连接。通过此命令修改阈值在 Broker 重启以后将会失效，通过修改配置文件方式设置的阈值则不会随着重启而消失，但修改了配置文件一样要重启 broker 才会生效。</p>\n<p>分析：</p>\n<blockquote>\n<p>rabbitmqctl set_vm_memory_high_watermark absolute 50MB</p>\n</blockquote>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/841.png\" alt=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/841.png\" class=\"\">\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/842.png\" alt=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/842.png\" class=\"\">\n<p>看到 <code>State</code>  为 <code>blocking</code> ，赶紧给 Rabbitmq 加内存。</p>\n<h3 id=\"322-配置文件方式-rabbitmqconf\"><a class=\"markdownIt-Anchor\" href=\"#322-配置文件方式-rabbitmqconf\">#</a> 3.2.2 配置文件方式 rabbitmq.conf</h3>\n<blockquote>\n<p>当前配置文件：/etc/rabbitmq/rabbitmq.conf</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#默认</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#vm_memory_high_watermark.relative = 0.4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用 relative 相对值进行设置 fraction, 建议取值在 04~0.7 之间，不建议超过 0.7.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">vm_memory_high_watermark.relative</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">0.6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 使用 absolute 的绝对值的方式，但是是 KB,MB,GB 对应的命令如下</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">vm_memory_high_watermark.absolute</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">2GB</span></pre></td></tr></table></figure><h2 id=\"33-rabbitmq的内存换页\"><a class=\"markdownIt-Anchor\" href=\"#33-rabbitmq的内存换页\">#</a> 3.3 RabbitMQ 的内存换页</h2>\n<p>在某个 Broker 节点及内存阻塞生产者之前，它会尝试将队列中的消息换页到磁盘以释放内存空间，持久化和非持久化的消息都会写入磁盘中，其中持久化的消息本身就在磁盘中有一个副本，所以在转移的过程中持久化的消息会先从内存中清除掉。</p>\n<blockquote>\n<p><strong>默认情况下，内存到达的阈值是 50% 时就会换页处理。</strong><br>\n也就是说，在默认情况下该内存的阈值是 0.4 的情况下，当内存超过 0.4*0.5=0.2 时，会进行换页动作。</p>\n</blockquote>\n<p>比如有 1000MB 内存，当内存的使用率达到了 400MB, 已经达到了极限，但是因为配置的换页内存 0.5，这个时候会在达到极限 400mb 之前，会把内存中的 200MB 进行转移到磁盘中。从而达到稳健的运行。</p>\n<p>可以通过设置  <code>vm_memory_high_watermark_paging_ratio</code>  来进行调整</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">vm_memory_high_watermark.relative</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">0.4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">vm_memory_high_watermark_paging_ratio</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">0.7 #建议小于0。7，最好是在0.4或者0.5（设置小于1的值）</span></pre></td></tr></table></figure><p>为什么设置小</p>\n<p>于 1，以为你如果你设置为 1 的阈值。内存都已经达到了极限了。你在去换页意义不是很大了。</p>\n<h2 id=\"34-rabbitmq的磁盘预警\"><a class=\"markdownIt-Anchor\" href=\"#34-rabbitmq的磁盘预警\">#</a> 3.4 RabbitMQ 的磁盘预警</h2>\n<p>当磁盘的剩余空间低于确定的阈值时，RabbitMQ 同样会阻塞生产者，这样可以避免因非持久化的消息持续换页而耗尽磁盘空间导致服务器崩溃。</p>\n<blockquote>\n<p>** 默认情况下：磁盘预警为 50MB 的时候会进行预警。** 表示当前磁盘空间第 50MB 的时候会阻塞生产者并且停止内存消息换页到磁盘的过程。<br>\n这个阈值可以减小，但是不能完全的消除因磁盘耗尽而导致崩溃的可能性。比如在两次磁盘空间的检查空隙内，第一次检查是：60MB ，第二检查可能就是 1MB, 就会出现警告。</p>\n</blockquote>\n<h3 id=\"通过命令方式修改如下\"><a class=\"markdownIt-Anchor\" href=\"#通过命令方式修改如下\">#</a> 通过命令方式修改如下：</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl set_disk_free_limit  <span class=\"token operator\">&lt;</span>disk_limit<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmqctl set_disk_free_limit mem_relative  <span class=\"token operator\">&lt;</span>fraction<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>disk_limit：固定单位 KB MB GB</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fraction ：是相对阈值，建议范围在:1.0~2.0之间。（相对于内存）</pre></td></tr></table></figure><h3 id=\"通过配置文件配置如下\"><a class=\"markdownIt-Anchor\" href=\"#通过配置文件配置如下\">#</a> 通过配置文件配置如下：</h3>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">disk_free_limit.relative</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">3.0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">disk_free_limit.absolute</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">50mb</span></pre></td></tr></table></figure><h1 id=\"4-rabbitmq-高级-集群\"><a class=\"markdownIt-Anchor\" href=\"#4-rabbitmq-高级-集群\">#</a> 4. RabbitMQ - 高级 - 集群</h1>\n<h2 id=\"41-rabbitmq-集群\"><a class=\"markdownIt-Anchor\" href=\"#41-rabbitmq-集群\">#</a> 4.1 RabbitMQ 集群</h2>\n<p>RabbitMQ 这款消息队列中间件产品本身是基于 Erlang 编写，Erlang 语言天生具备分布式特性（通过同步 Erlang 集群各节点的 magic cookie 来实现）。因此，RabbitMQ 天然支持 Clustering。这使得 RabbitMQ 本身不需要像 ActiveMQ、Kafka 那样通过 ZooKeeper 分别来实现 HA 方案和保存集群的元数据。集群是保证可靠性的一种方式，同时可以通过水平扩展以达到增加消息吞吐量能力的目的。<br>\n在实际使用过程中多采取多机多实例部署方式，为了便于同学们练习搭建，有时候你不得不在一台机器上去搭建一个 rabbitmq 集群，本章主要针对单机多实例这种方式来进行开展。</p>\n<blockquote>\n<p>主要参考官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NsdXN0ZXJpbmcuaHRtbA==\">https://www.rabbitmq.com/clustering.html</span></p>\n</blockquote>\n<h2 id=\"42-集群搭建\"><a class=\"markdownIt-Anchor\" href=\"#42-集群搭建\">#</a> 4.2 集群搭建</h2>\n<p>配置的前提是你的 rabbitmq 可以运行起来，比如”ps aux|grep rabbitmq” 你能看到相关进程，又比如运行 “rabbitmqctl status” 你可以看到类似如下信息，而不报错：</p>\n<p>执行下面命令进行查看：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> rabbitmq</pre></td></tr></table></figure><p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210518185635235.png\" alt=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/image-20210518185635235.png\" class=\"\">\n<p>或者</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl status rabbitmq-server</pre></td></tr></table></figure><blockquote>\n<p>注意：确保 RabbitMQ 可以运行的，确保完成之后，把单机版的 RabbitMQ 服务停止，后台看不到 RabbitMQ 的进程为止</p>\n</blockquote>\n<h2 id=\"43-单机多实例搭建\"><a class=\"markdownIt-Anchor\" href=\"#43-单机多实例搭建\">#</a> 4.3 单机多实例搭建</h2>\n<p>** 场景：** 假设有两个 rabbitmq 节点，分别为 rabbit-1, rabbit-2，rabbit-1 作为主节点，rabbit-2 作为从节点。<br>\n<strong>启动命令</strong>：RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit-1 rabbitmq-server -detached<br>\n<strong> 结束命令</strong>：rabbitmqctl -n rabbit-1 stop</p>\n<h3 id=\"431-第一步启动第一个节点rabbit-1\"><a class=\"markdownIt-Anchor\" href=\"#431-第一步启动第一个节点rabbit-1\">#</a> 4.3.1 <strong>第一步</strong>：启动第一个节点 rabbit-1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> <span class=\"token assign-left variable\">RABBITMQ_NODE_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">5672</span> <span class=\"token assign-left variable\">RABBITMQ_NODENAME</span><span class=\"token operator\">=</span>rabbit-1 rabbitmq-server start <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.省略<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">##########  Logs: /var/log/rabbitmq/rabbit-1.log</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">######  ##        /var/log/rabbitmq/rabbit-1-sasl.log</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">##########</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              Starting broker<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> completed with <span class=\"token number\">7</span> plugins.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1234567</span></pre></td></tr></table></figure><p>至此节点 rabbit-1 启动完成。</p>\n<h3 id=\"432-启动第二个节点rabbit-2\"><a class=\"markdownIt-Anchor\" href=\"#432-启动第二个节点rabbit-2\">#</a> 4.3.2 启动第二个节点 rabbit-2</h3>\n<blockquote>\n<p>注意：web 管理插件端口占用，所以还要指定其 web 插件占用的端口号<br>\n RABBITMQ_SERVER_START_ARGS=”-rabbitmq_management listener [{port,15673}]”</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token assign-left variable\">RABBITMQ_NODE_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">5673</span> <span class=\"token assign-left variable\">RABBITMQ_SERVER_START_ARGS</span><span class=\"token operator\">=</span><span class=\"token string\">\"-rabbitmq_management listener [&#123;port,15673&#125;]\"</span> <span class=\"token assign-left variable\">RABBITMQ_NODENAME</span><span class=\"token operator\">=</span>rabbit-2 rabbitmq-server start <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>省略<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">##########  Logs: /var/log/rabbitmq/rabbit-2.log</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">######  ##        /var/log/rabbitmq/rabbit-2-sasl.log</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">##########</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              Starting broker<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> completed with <span class=\"token number\">7</span> plugins.</pre></td></tr></table></figure><p>至此节点 rabbit-2 启动完成</p>\n<h3 id=\"433-验证启动-ps-auxgrep-rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#433-验证启动-ps-auxgrep-rabbitmq\">#</a> 4.3.3 验证启动 “ps aux|grep rabbitmq”</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq  <span class=\"token number\">2022</span>  <span class=\"token number\">2.7</span>  <span class=\"token number\">0.4</span> <span class=\"token number\">5349380</span> <span class=\"token number\">77020</span> ?       Sl   <span class=\"token number\">11</span>:03   <span class=\"token number\">0</span>:06 /usr/lib/erlang/erts-9.2/bin/beam.smp -W w -A <span class=\"token number\">128</span> -P <span class=\"token number\">1048576</span> -t <span class=\"token number\">5000000</span> -stbt db -zdbbl <span class=\"token number\">128000</span> -K <span class=\"token boolean\">true</span> -B i -- -root /usr/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/ebin -noshell -noinput -s rabbit boot -sname rabbit-1 -boot start_sasl -kernel inet_default_connect_options <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>nodelay,true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> -rabbit tcp_listeners <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"auto\"</span>,5672<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> -sasl errlog_type error -sasl sasl_error_logger <span class=\"token boolean\">false</span> -rabbit error_logger <span class=\"token punctuation\">&#123;</span>file,<span class=\"token string\">\"/var/log/rabbitmq/rabbit-1.log\"</span><span class=\"token punctuation\">&#125;</span> -rabbit sasl_error_logger <span class=\"token punctuation\">&#123;</span>file,<span class=\"token string\">\"/var/log/rabbitmq/rabbit-1-sasl.log\"</span><span class=\"token punctuation\">&#125;</span> -rabbit enabled_plugins_file <span class=\"token string\">\"/etc/rabbitmq/enabled_plugins\"</span> -rabbit plugins_dir <span class=\"token string\">\"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/plugins\"</span> -rabbit plugins_expand_dir <span class=\"token string\">\"/var/lib/rabbitmq/mnesia/rabbit-1-plugins-expand\"</span> -os_mon start_cpu_sup <span class=\"token boolean\">false</span> -os_mon start_disksup <span class=\"token boolean\">false</span> -os_mon start_memsup <span class=\"token boolean\">false</span> -mnesia <span class=\"token function\">dir</span> <span class=\"token string\">\"/var/lib/rabbitmq/mnesia/rabbit-1\"</span> -kernel inet_dist_listen_min <span class=\"token number\">25672</span> -kernel inet_dist_listen_max <span class=\"token number\">25672</span> start</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmq  <span class=\"token number\">2402</span>  <span class=\"token number\">4.2</span>  <span class=\"token number\">0.4</span> <span class=\"token number\">5352196</span> <span class=\"token number\">77196</span> ?       Sl   <span class=\"token number\">11</span>:05   <span class=\"token number\">0</span>:05 /usr/lib/erlang/erts-9.2/bin/beam.smp -W w -A <span class=\"token number\">128</span> -P <span class=\"token number\">1048576</span> -t <span class=\"token number\">5000000</span> -stbt db -zdbbl <span class=\"token number\">128000</span> -K <span class=\"token boolean\">true</span> -B i -- -root /usr/lib/erlang -progname erl -- -home /var/lib/rabbitmq -- -pa /usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/ebin -noshell -noinput -s rabbit boot -sname rabbit-2 -boot start_sasl -kernel inet_default_connect_options <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>nodelay,true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> -rabbit tcp_listeners <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"auto\"</span>,5673<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> -sasl errlog_type error -sasl sasl_error_logger <span class=\"token boolean\">false</span> -rabbit error_logger <span class=\"token punctuation\">&#123;</span>file,<span class=\"token string\">\"/var/log/rabbitmq/rabbit-2.log\"</span><span class=\"token punctuation\">&#125;</span> -rabbit sasl_error_logger <span class=\"token punctuation\">&#123;</span>file,<span class=\"token string\">\"/var/log/rabbitmq/rabbit-2-sasl.log\"</span><span class=\"token punctuation\">&#125;</span> -rabbit enabled_plugins_file <span class=\"token string\">\"/etc/rabbitmq/enabled_plugins\"</span> -rabbit plugins_dir <span class=\"token string\">\"/usr/lib/rabbitmq/plugins:/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.15/plugins\"</span> -rabbit plugins_expand_dir <span class=\"token string\">\"/var/lib/rabbitmq/mnesia/rabbit-2-plugins-expand\"</span> -os_mon start_cpu_sup <span class=\"token boolean\">false</span> -os_mon start_disksup <span class=\"token boolean\">false</span> -os_mon start_memsup <span class=\"token boolean\">false</span> -mnesia <span class=\"token function\">dir</span> <span class=\"token string\">\"/var/lib/rabbitmq/mnesia/rabbit-2\"</span> -rabbitmq_management listener <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>port,15673<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> -kernel inet_dist_listen_min <span class=\"token number\">25673</span> -kernel inet_dist_listen_max <span class=\"token number\">25673</span> start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">12</span></pre></td></tr></table></figure><h3 id=\"434-rabbit-1操作作为主节点\"><a class=\"markdownIt-Anchor\" href=\"#434-rabbit-1操作作为主节点\">#</a> 4.3.4 rabbit-1 操作作为主节点</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#停止应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-1 stop_app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#目的是清除节点上的历史数据（如果不清除，无法将节点加入到集群）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-1 reset</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#启动应用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-1 start_app</pre></td></tr></table></figure><h3 id=\"435-rabbit2操作为从节点\"><a class=\"markdownIt-Anchor\" href=\"#435-rabbit2操作为从节点\">#</a> 4.3.5 rabbit2 操作为从节点</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 停止应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-2 stop_app</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 目的是清除节点上的历史数据（如果不清除，无法将节点加入到集群）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-2 reset</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 将 rabbit2 节点加入到 rabbit1（主节点）集群当中【Server-node 服务器的主机名】</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-2 join_cluster rabbit-1@<span class=\"token string\">'Server-node'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 启动应用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl -n rabbit-2 start_app</pre></td></tr></table></figure><h3 id=\"436-验证集群状态\"><a class=\"markdownIt-Anchor\" href=\"#436-验证集群状态\">#</a> 4.3.6 验证集群状态</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token function\">sudo</span> rabbitmqctl cluster_status -n rabbit-1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//集群有两个节点：rabbit-1@Server-node、rabbit-2@Server-node</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>nodes,<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>disc,<span class=\"token punctuation\">[</span><span class=\"token string\">'rabbit-1@Server-node'</span>,<span class=\"token string\">'rabbit-2@Server-node'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>running_nodes,<span class=\"token punctuation\">[</span><span class=\"token string\">'rabbit-2@Server-node'</span>,<span class=\"token string\">'rabbit-1@Server-node'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>cluster_name,<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"rabbit-1@Server-node.localdomain\"</span><span class=\"token operator\">>></span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>partitions,<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#123;</span>alarms,<span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'rabbit-2@Server-node'</span>,<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span>,<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'rabbit-1@Server-node'</span>,<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"437-web监控\"><a class=\"markdownIt-Anchor\" href=\"#437-web监控\">#</a> 4.3.7 Web 监控</h3>\n<blockquote>\n<p>打开 rabbitmq Web 管理界面：rabbitmq-plugins enable rabbitmq_management</p>\n</blockquote>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/851.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/851.png\" class=\"\"></p>\n<img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/851.png\" class=\"\">\n<blockquote>\n<p>注意在访问的时候：web 结面的管理需要给 15672 node-1 和 15673 的 node-2 设置用户名和密码。如下:</p>\n</blockquote>\n<p>在 <code>rabbit-1</code>  或者 <code>rabbit-2</code>  其中一个节点设置的用户，其他节点都会共享。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl -n rabbit-1 add_user admin admin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rabbitmqctl -n rabbit-1 set_user_tags admin administrator</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rabbitmqctl -n rabbit-1 set_permissions -p / admin <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rabbitmqctl -n rabbit-2 add_user admin admin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rabbitmqctl -n rabbit-2 set_user_tags admin administrator</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rabbitmqctl -n rabbit-2 set_permissions -p / admin <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></pre></td></tr></table></figure><h3 id=\"438-小结\"><a class=\"markdownIt-Anchor\" href=\"#438-小结\">#</a> 4.3.8 小结</h3>\n<blockquote>\n<p><strong>Tips：</strong><br>\n如果采用多机部署方式，需读取其中一个节点的 cookie, 并复制到其他节点（节点之间通过 cookie 确定相互是否可通信）。cookie 存放在 /var/lib/rabbitmq/.erlang.cookie。<br>\n例如：主机名分别为 rabbit-1、rabbit-2<br>\n1、逐个启动各节点<br>\n 2、配置各节点的 hosts 文件 (vim /etc/hosts)<br>\n​ ip1：rabbit-1<br>\n​ ip2：rabbit-2<br>\n 其它步骤雷同单机部署方式</p>\n</blockquote>\n<h1 id=\"5-rabbitmq-高级-分布式事务\"><a class=\"markdownIt-Anchor\" href=\"#5-rabbitmq-高级-分布式事务\">#</a> 5. RabbitMQ - 高级 - 分布式事务</h1>\n<h2 id=\"51-简述\"><a class=\"markdownIt-Anchor\" href=\"#51-简述\">#</a> 5.1 简述</h2>\n<p>分布式事务指事务的操作位于不同的节点上，需要保证事务的 AICD 特性。<br>\n例如在下单场景下，库存和订单如果不在同一个节点上，就涉及分布式事务。</p>\n<blockquote>\n<p>简单的说，就是在某个业务处理下，所涉及到的多个系统之间各自数据库的数据一致性。</p>\n</blockquote>\n<h2 id=\"52-分布式事务的方式\"><a class=\"markdownIt-Anchor\" href=\"#52-分布式事务的方式\">#</a> 5.2 分布式事务的方式</h2>\n<p>在分布式系统中，要实现分布式事务，无外乎那几种解决方案。</p>\n<h4 id=\"一-两阶段提交2pc需要数据库产商的支持java组件有atomikos等\"><a class=\"markdownIt-Anchor\" href=\"#一-两阶段提交2pc需要数据库产商的支持java组件有atomikos等\">#</a> 一、两阶段提交（2PC）需要数据库产商的支持，java 组件有 atomikos 等。</h4>\n<p>两阶段提交（Two-phase Commit，2PC），通过引入协调者（Coordinator）来协调参与者的行为，并最终决定这些参与者是否要真正执行事务。</p>\n<h5 id=\"1-准备阶段\"><a class=\"markdownIt-Anchor\" href=\"#1-准备阶段\">#</a> 1、准备阶段</h5>\n<p>协调者询问参与者事务是否执行成功，参与者发回事务执行结果。</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/852.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/852.png\" class=\"\"></p>\n<h5 id=\"2-提交阶段\"><a class=\"markdownIt-Anchor\" href=\"#2-提交阶段\">#</a> 2、提交阶段</h5>\n<p>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务；否则，协调者发送通知让参与者回滚事务。<br>\n需要注意的是，在准备阶段，参与者执行了事务，但是还未提交。只有在提交阶段接收到协调者发来的通知后，才进行提交或者回滚。</p>\n<p><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/853.png\" alt=\"853\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/853.png\" class=\"\"></p>\n<h5 id=\"存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题\">#</a> 存在的问题</h5>\n<ul>\n<li>1 同步阻塞 所有事务参与者在等待其它参与者响应的时候都处于同步阻塞状态，无法进行其它操作。</li>\n<li>2 单点问题 协调者在 2PC 中起到非常大的作用，发生故障将会造成很大影响。特别是在阶段二发生故障，所有参与者会一直等待状态，无法完成其它操作。</li>\n<li>3 数据不一致 在阶段二，如果协调者只发送了部分 Commit 消息，此时网络发生异常，那么只有部分参与者接收到 Commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</li>\n<li>4 太过保守 任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</li>\n</ul>\n<h4 id=\"二-补偿事务tcc-严选阿里蚂蚁金服\"><a class=\"markdownIt-Anchor\" href=\"#二-补偿事务tcc-严选阿里蚂蚁金服\">#</a> 二、补偿事务（TCC） 严选，阿里，蚂蚁金服。</h4>\n<p>TCC 其实就是采用的补偿机制，其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p>\n<ul>\n<li>Try 阶段主要是对业务系统做检测及资源预留</li>\n<li>Confirm 阶段主要是对业务系统做确认提交，Try 阶段执行成功并开始执行 Confirm 阶段时，默认 - - - Confirm 阶段是不会出错的。即：只要 Try 成功，Confirm 一定成功。</li>\n<li>Cancel 阶段主要是在业务执行错误，需要回滚的状态下执行的业务取消，预留资源释放。</li>\n</ul>\n<blockquote>\n<p>举个例子，假入 Bob 要向 Smith 转账，思路大概是： 我们有一个本地方法，里面依次调用<br>\n 1：首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。<br>\n2：在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。<br>\n3：如果第 2 步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。</p>\n</blockquote>\n<p>优点： 跟 2PC 比起来，实现以及流程相对简单了一些，但数据的一致性比 2PC 也要差一些<br>\n缺点： 缺点还是比较明显的，在 2,3 步中都有可能失败。TCC 属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用 TCC 不太好定义及处理。</p>\n<h4 id=\"三-本地消息表异步确保比如支付宝-微信支付主动查询支付状态对账单的形式\"><a class=\"markdownIt-Anchor\" href=\"#三-本地消息表异步确保比如支付宝-微信支付主动查询支付状态对账单的形式\">#</a> 三、本地消息表（异步确保）比如：支付宝、微信支付主动查询支付状态，对账单的形式</h4>\n<p>本地消息表与业务数据表处于同一个数据库中，这样就能利用本地事务来保证在对这两个表的操作满足事务特性，并且使用了消息队列来保证最终一致性。</p>\n<ul>\n<li>在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。</li>\n<li>之后将本地消息表中的消息转发到 Kafka 等消息队列中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。</li>\n<li>在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/854.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/854.png\" class=\"\"></p>\n<blockquote>\n<p>优点： 一种非常经典的实现，避免了分布式事务，实现了最终一致性。<br>\n缺点： 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p>\n</blockquote>\n<h3 id=\"四-mq-事务消息-异步场景通用性较强拓展性较高\"><a class=\"markdownIt-Anchor\" href=\"#四-mq-事务消息-异步场景通用性较强拓展性较高\">#</a> 四、MQ 事务消息 异步场景，通用性较强，拓展性较高。</h3>\n<p>有一些第三方的 MQ 是支持事务消息的，比如 RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的 MQ 都是不支持事务消息的，比如 Kafka 不支持。<br>\n以阿里的 RabbitMQ 中间件为例，其思路大致为：</p>\n<ul>\n<li>第一阶段 Prepared 消息，会拿到消息的地址。 第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。</li>\n<li>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了 RabbitMQ 会定期扫描消息集群中的事务消息，这时候发现了 Prepared 消息，它会向消息发送者确认，所以生产方需要实现一个 check 接口，RabbitMQ 会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/855.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/855.png\" class=\"\"></p>\n<blockquote>\n<p>优点： 实现了最终一致性，不需要依赖本地数据库事务。<br>\n缺点： 实现难度大，主流 MQ 不支持，RocketMQ 事务消息部分代码也未开源。</p>\n</blockquote>\n<h3 id=\"五-总结\"><a class=\"markdownIt-Anchor\" href=\"#五-总结\">#</a> 五、总结</h3>\n<p>通过本文我们总结并对比了几种分布式分解方案的优缺点，分布式事务本身是一个技术难题，是没有一种完美的方案应对所有场景的，具体还是要根据业务场景去抉择吧。阿里 RocketMQ 去实现的分布式事务，现在也有除了很多分布式事务的协调器，比如 LCN 等，大家可以多去尝试。</p>\n<h2 id=\"53-具体实现\"><a class=\"markdownIt-Anchor\" href=\"#53-具体实现\">#</a> 5.3 具体实现</h2>\n<p>分布式事务的完整架构图：</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/856.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/856.png\" class=\"\"></p>\n<p>美团外卖架构：</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/857.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/857.png\" class=\"\"></p>\n<h3 id=\"531-系统与系统之间的分布式事务问题\"><a class=\"markdownIt-Anchor\" href=\"#531-系统与系统之间的分布式事务问题\">#</a> 5.3.1 系统与系统之间的分布式事务问题</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/858.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/858.png\" class=\"\"></p>\n<h3 id=\"532-系统间调用过程中事务回滚问题\"><a class=\"markdownIt-Anchor\" href=\"#532-系统间调用过程中事务回滚问题\">#</a> 5.3.2 系统间调用过程中事务回滚问题</h3>\n<p>创建两个项目 <code>mt_order</code>  和 <code>mt_dispatch</code></p>\n<ul>\n<li>mt_order</li>\n</ul>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8089</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mariadb<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/demo</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> org.mariadb.jdbc.Driver</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">open-in-view</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> update</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">addresses</span><span class=\"token punctuation\">:</span> 10.1.53.166<span class=\"token punctuation\">:</span><span class=\"token number\">5672</span><span class=\"token punctuation\">,</span>10.1.53.166<span class=\"token punctuation\">:</span><span class=\"token number\">5673</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 开启手动 ACK，让程序去控制 MQ 消息的重发、移除和转移</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">publisher-confirm-type</span><span class=\"token punctuation\">:</span> correlated</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">publisher-returns</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> manual</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">retry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启重启</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token key atrule\">max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\">#最大重试次数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token key atrule\">initial-interval</span><span class=\"token punctuation\">:</span> 2000ms <span class=\"token comment\">#重试间隔时间</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-devtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-rabbit-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mariadb.jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mariadb-java-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Table</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"`order`\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderContent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderRepository</span> orderRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 1. 订单信息 ---- 插入订单数据库，订单数据库事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        orderRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2. 通过 http 接口发送订单消息到运单系统</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token function\">dispatchHttpApi</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单创建失败，原因是运单接口调用失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 将订单信息发送到运单系统</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param orderId 订单 ID</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dispatchHttpApi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">SimpleClientHttpRequestFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleClientHttpRequestFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 连接超时 > 3 秒</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 处理超时 > 2 秒</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        factory<span class=\"token punctuation\">.</span><span class=\"token function\">setReadTimeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 发送 http 请求</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:9000/dispatch/order?orderId=\"</span> <span class=\"token operator\">+</span> orderId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">RestTemplate</span> restTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>mt_dispatch</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-devtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>optional</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>optional</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-rabbit-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-jpa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mariadb.jdbc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mariadb-java-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9000</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mariadb<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/demo</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> org.mariadb.jdbc.Driver</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">open-in-view</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> update</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">addresses</span><span class=\"token punctuation\">:</span> 10.1.53.166<span class=\"token punctuation\">:</span><span class=\"token number\">5672</span><span class=\"token punctuation\">,</span>10.1.53.166<span class=\"token punctuation\">:</span><span class=\"token number\">5673</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\"># 开启手动 ACK，让程序去控制 MQ 消息的重发、移除和转移</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> manual</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">retry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启重启</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token key atrule\">max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token comment\">#最大重试次数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">initial-interval</span><span class=\"token punctuation\">:</span> 2000ms <span class=\"token comment\">#重试间隔时间</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dispatcher</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderContent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DispatchRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatchService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DispatchRepository</span> dispatchRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Dispatcher</span> dispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dispatcher</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> orderId<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"买了一栋别墅\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Dispatcher</span> result <span class=\"token operator\">=</span> dispatchRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>dispatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"运单创建失败！原因【操作数据库失败】\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>mt_order</code>  中添加单元测试，模拟创建订单， <code>mt_dispatch</code>  开启 <code>debug</code>  模式，并打断点在 <code>DispatchService</code>  中的 <code>dispatch</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">orderCreated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    order<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    order<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"买了一栋别墅\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    order<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    order<span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单创建成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>【测试结果】订单系统因为设置了处理超时时间 <code>2s</code> ，超过了之后数据会进行回滚，而运单系统则继续将数据插入到数据库中。订单系统出现异常，会进行回滚，而运单系统不会。</p>\n<p>【结论】订单系统的 Transactional 只能控制自己服务的事务，不能控制其他服务的事务，从而引起分布式事务问题。</p>\n<h3 id=\"533-基于mq的分布式事务整体设计思路\"><a class=\"markdownIt-Anchor\" href=\"#533-基于mq的分布式事务整体设计思路\">#</a> 5.3.3 基于 MQ 的分布式事务整体设计思路</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/859.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/859.png\" class=\"\"></p>\n<h3 id=\"534-基于mq的分布式事务消息的可靠生产问题\"><a class=\"markdownIt-Anchor\" href=\"#534-基于mq的分布式事务消息的可靠生产问题\">#</a> 5.3.4 基于 MQ 的分布式事务消息的可靠生产问题</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/860.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/860.png\" class=\"\"></p>\n<p>如果这个时候 MQ 服务器出现了异常和故障，那么消息是无法获取到回执信息。怎么解决呢？</p>\n<h3 id=\"535-基于mq的分布式事务消息的可靠生产问题-定时重发\"><a class=\"markdownIt-Anchor\" href=\"#535-基于mq的分布式事务消息的可靠生产问题-定时重发\">#</a> 5.3.5 基于 MQ 的分布式事务消息的可靠生产问题 - 定时重发</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/861.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/861.png\" class=\"\"></p>\n<p>生产者 <code>mt_order</code> yml 配置开启发送确定机制</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 开启手动 ACK，让程序去控制 MQ 消息的重发、移除和转移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">publisher-confirm-type</span><span class=\"token punctuation\">:</span> correlated <span class=\"token comment\">#消息发送确认机制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">publisher-returns</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启消息回执</span></pre></td></tr></table></figure><p>创建一个订单消息冗余表，来保证消息的可靠性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Entity</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMessage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Id</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> userId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> orderContent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDateTime</span> createTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 消息发送成功状态，是否已被 rabbitmq 接收。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 repository，根据 <code>订单id</code>  修改订单消息冗余表的状态</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderMessageRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderMessage</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Modifying</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Query</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"update order_message set status = ?1 where id = ?2\"</span><span class=\"token punctuation\">,</span> nativeQuery <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Integer</span> <span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 service</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMessageService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderMessageRepository</span> orderMessageRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将订单数据保存到订单消息冗余表中。消息状态默认为 0，未消费</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveLocalMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">OrderMessage</span> orderMessage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderMessage</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        orderMessageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>orderMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建 MQ 发送消息以及发送成功后的确认回调处理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMQService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderMessageRepository</span> orderMessageRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 发布者确认的回调。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @PostConstruct 该注解用来修饰一个非静态的 void () 方法，被该注解修饰的方法会在服务器加载 Servlet 的时候运行，并且只会被运行一次。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param correlationData 回调的相关数据。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param ack             ack 为真，nack 为假</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param cause           一个可选的原因，用于 nack，如果可用，否则为空。</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostConstruct</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">regCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 消息发送成功以后，给生产者的消息回执，来确保生产者的可靠性</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConfirmCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>correlationData<span class=\"token punctuation\">,</span> ack<span class=\"token punctuation\">,</span> cause<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cause: \"</span> <span class=\"token operator\">+</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 如果 ack 为 true 代表消息已经收到</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> correlationData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ack<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MQ队列应答失败，orderId是：\"</span> <span class=\"token operator\">+</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> orderMessageRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本地消息状态修改成功，消息成功投递到消息队列中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本地消息状态修改失败，出现异常：\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order_fanout_exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">objectToJson</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrelationData</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderMessage</span> orderMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order_fanout_exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">objectToJson</span><span class=\"token punctuation\">(</span>orderMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorrelationData</span><span class=\"token punctuation\">(</span>orderMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JSON 序列化工具类，这里使用的是 <code>jackson</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 当前类用于将某个特定的对象转换为 JSON 对象，或者将 JSON 对象转换为某个特定的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ObjectMapper</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper</span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span>mapper <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">String</span> <span class=\"token function\">objectToJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">jsonToObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span>  <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> tr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">T</span> o <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建一个定时任务，每隔一段时间，检查有没有发送失败的消息，然后重新将消息发送到 MQ 中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableScheduling</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderMessageService</span> orderMessageService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderMQService</span> orderMQService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>cron <span class=\"token operator\">=</span> <span class=\"token string\">\"0 */1 * * * ?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 把消息为 0 的状态消息查询出来，重新投递到 MQ 中。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderMessage</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> orderMessageService<span class=\"token punctuation\">.</span><span class=\"token function\">findByStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"检查未发送的消息，进行重新发送，需要重发的数量 = \"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 3. 通过 http 接口发送订单消息到运单系统</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">-></span> orderMQService<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建控制器，以便开启 debug 模式测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MQOrderService</span> mqOrderService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        order<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        order<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderContent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"买了一栋别墅\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        order<span class=\"token punctuation\">.</span><span class=\"token function\">setUserId</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        order<span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        mqOrderService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单创建成功！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 rabbitmq Web 控制界面创建 <code>fanout模式</code> 交换机 <code>order_fanout_exchange</code>  以及绑定消息队列 <code>order.queue</code> 。</p>\n<p>【测试】开启 debug 模式，浏览器访问 <code>http://ip:8089/test</code></p>\n<h3 id=\"536-基于mq的分布式事务消息的可靠消费\"><a class=\"markdownIt-Anchor\" href=\"#536-基于mq的分布式事务消息的可靠消费\">#</a> 5.3.6 基于 MQ 的分布式事务消息的可靠消费</h3>\n<p><strong>在消息过程中，出现了故障，默认会进行重发，触发 rabbitmq 的重试机制，而重试机制会引发死循环。</strong></p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/862.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/862.png\" class=\"\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName OrderMQConsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 订单 MQ 消息 消费</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/24 9:59</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMQConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DispatchService</span> dispatchService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 解决消息重试的集中方案：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//1. 控制重发的次数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//2.try + catch + 手动 ack</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//3.try + catch + 手动 ack + 死信队列 + 人工干预</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"order.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">messageConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderMsg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CorrelationData</span> correlationData<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AmqpHeaders</span><span class=\"token punctuation\">.</span>DELIVERY_TAG<span class=\"token punctuation\">)</span> <span class=\"token keyword\">long</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 1. 获取消息队列的消息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到MQ的消息是：\"</span> <span class=\"token operator\">+</span> orderMsg <span class=\"token operator\">+</span> <span class=\"token string\">\"，count = \"</span> <span class=\"token operator\">+</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 2. 获取订单服务的消息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">jsonToObject</span><span class=\"token punctuation\">(</span>orderMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单ID = \"</span> <span class=\"token operator\">+</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 3. 派单处理</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        dispatchService<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制消息重发的次数</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 开启手动 ACK，让程序去控制 MQ 消息的重发、移除和转移</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">simple</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token key atrule\">acknowledge-mode</span><span class=\"token punctuation\">:</span> manual <span class=\"token comment\"># 默认为 none，自动进行 ack，会把消息进行移除或转移到死信队列；manual 表示进行手动确认</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">retry</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启重启</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token key atrule\">max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">#最大重试次数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">initial-interval</span><span class=\"token punctuation\">:</span> 2000ms <span class=\"token comment\">#重试间隔时间</span></pre></td></tr></table></figure><h3 id=\"537-基于mq的分布式事务消息的消息重发\"><a class=\"markdownIt-Anchor\" href=\"#537-基于mq的分布式事务消息的消息重发\">#</a> 5.3.7 基于 MQ 的分布式事务消息的消息重发</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/863.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/863.png\" class=\"\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMQConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DispatchService</span> dispatchService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 解决消息重试的集中方案：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//1. 控制重发的次数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//2.try + catch + 手动 ack</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//3.try + catch + 手动 ack + 死信队列 + 人工干预</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"order.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">messageConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderMsg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CorrelationData</span> correlationData<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AmqpHeaders</span><span class=\"token punctuation\">.</span>DELIVERY_TAG<span class=\"token punctuation\">)</span> <span class=\"token keyword\">long</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 1. 获取消息队列的消息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到MQ的消息是：\"</span> <span class=\"token operator\">+</span> orderMsg <span class=\"token operator\">+</span> <span class=\"token string\">\"，count = \"</span> <span class=\"token operator\">+</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 2. 获取订单服务的消息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">jsonToObject</span><span class=\"token punctuation\">(</span>orderMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3. 获取订单 id</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单ID = \"</span> <span class=\"token operator\">+</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//        int a =1/0;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 4. 派单处理</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            dispatchService<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 5. 手动 ack 告诉 MQ 消息已经正常消费</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 如果出现异常的情况下，根据实际的情况去进行重发</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 重发一次后，丢失，还是记录，存库根据自己的业务场景去决定</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 参数 1：消息的 tag   参数 2：false 是否多条处理</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 参数 3： requeue 是否重发，false 不会重发，会把消息转移到死信队列中；true 的话会进行死循环的重发，建议如果使用 true 的话，不要加 try/catch 否则就会造成死循环。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicNack</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如果使用的是 try + catch + 手动 ack，之前的控制重试次数机制就会失效</p>\n</blockquote>\n<h3 id=\"538-基于mq的分布式事务消息的死信队列消息转移-人工处理\"><a class=\"markdownIt-Anchor\" href=\"#538-基于mq的分布式事务消息的死信队列消息转移-人工处理\">#</a> 5.3.8 基于 MQ 的分布式事务消息的死信队列消息转移 + 人工处理</h3>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/864.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/864.png\" class=\"\"></p>\n<p><strong>如果死信队列报错就进行人工处理</strong></p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/865.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/865.png\" class=\"\"></p>\n<p>新建 rabbitmq 配置类 <code>RabbitMQConfiguration</code> ，定义订单交换机、队列，以及死信交换机和队列，并完成队列和死信队列的绑定。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 声明注册 fanout 模式的交换机，作为死信交换机</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @return FanoutExchange</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FanoutExchange</span> <span class=\"token function\">deadExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dead_order_fanout_exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 声明死信队列</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">deadOrderQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dead.order.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 完成绑定关系（队列和交换机）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingDeadOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">deadOrderQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">deadExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FanoutExchange</span> <span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order_fanout_exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">orderQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        args<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x-dead-letter-exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dead_order_fanout_exchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">bindingOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">orderQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者根据订单消费类，复制出来一个死信队列消费处理，失败后的处理根据业务场景决定。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadMQConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DispatchService</span> dispatchService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 解决消息重试的集中方案：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//1. 控制重发的次数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//2.try + catch + 手动 ack</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//3.try + catch + 手动 ack + 死信队列 + 人工干预</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"dead.order.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">messageConsumer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderMsg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CorrelationData</span> correlationData<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AmqpHeaders</span><span class=\"token punctuation\">.</span>DELIVERY_TAG<span class=\"token punctuation\">)</span> <span class=\"token keyword\">long</span> tag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 1. 获取消息队列的消息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"死信队列收到MQ的消息是：\"</span> <span class=\"token operator\">+</span> orderMsg <span class=\"token operator\">+</span> <span class=\"token string\">\"，count = \"</span> <span class=\"token operator\">+</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 2. 获取订单服务的消息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Order</span> order <span class=\"token operator\">=</span> <span class=\"token class-name\">JsonUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">jsonToObject</span><span class=\"token punctuation\">(</span>orderMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Order</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 3. 获取订单 id</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">String</span> orderId <span class=\"token operator\">=</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"订单ID = \"</span> <span class=\"token operator\">+</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4. 派单处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            dispatchService<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5. 手动 ack 告诉 MQ 消息已经正常消费</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人工干预\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送短信预警\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"把消息转移到别的存储DB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicNack</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>由于  <code>订单队列</code> 和 <code>死信队列</code>  都对 运单数据进行插入，所以要考虑到数据幂等性（数据的一致性），可以将运单表的订单 ID <code>orderId</code>  设置唯一约束，这个方法会损耗数据库的一些资源；另一种办法就是使用分布式锁。</p>\n</blockquote>\n<p>整个流程：生产者推送一条消息过来，为了保证可靠生产，使用消息冗余的机制，来保证消息投递的可靠性；</p>\n<p>消费者监听 <code>order.queue</code>  队列，接收消费过程中出现异常故障，将消息转移到死信队列中。</p>\n<p>消费者监听死信队列 <code>dead.order.queue</code> ，接收到以后，消费后正常处理，如果消费过程中，出现异常故障，则进行 <code>人工干预</code> 、 <code>发送短信预警</code> 或者 <code>把消息转移到别的存储DB</code> ，最后把消息进行移除。</p>\n<h2 id=\"6-其他信息\"><a class=\"markdownIt-Anchor\" href=\"#6-其他信息\">#</a> 6、其他信息</h2>\n<p>SpringBoot RabbitMq 详细配置信息</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token key atrule\">addresses</span><span class=\"token punctuation\">:</span> 127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">6605</span><span class=\"token punctuation\">,</span>127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">6606</span><span class=\"token punctuation\">,</span>127.0.0.1<span class=\"token punctuation\">:</span><span class=\"token number\">6705</span> <span class=\"token comment\">#指定 client 连接到的 server 的地址，多个以逗号分隔 (优先取 addresses，然后再取 host)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#    port:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">## 集群配置 addresses 之间用逗号隔开</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># addresses: ip:port,ip:port</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\"># 连接到 rabbitMQ 的 vhost</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">requested-heartbeat</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#指定心跳超时，单位秒，0 为不指定；默认 60s</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">publisher-confirms</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#是否启用 发布确认</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">publisher-reurns</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 是否启用发布返回</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">connection-timeout</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#连接超时，单位毫秒，0 表示无穷大，不超时</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">channel.size</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 缓存中保持的 channel 数量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">channel.checkout-timeout</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 当缓存数量被设置时，从缓存中获取一个 channel 的超时时间，单位毫秒；如果为 0，则总是创建一个新 channel</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">connection.size</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 缓存的连接数，只有是 CONNECTION 模式时生效</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">connection.mode</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 连接工厂缓存模式：CHANNEL 和 CONNECTION</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">listener</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token key atrule\">simple.auto-startup</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 是否启动时自动启动容器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">simple.acknowledge-mode</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 表示消息确认方式，其有三种配置方式，分别是 none、manual 和 auto；默认 auto</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">simple.concurrency</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 最小的消费者数量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">simple.max-concurrency</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 最大的消费者数量</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">simple.prefetch</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于 transaction 数量.</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">simple.transaction-size</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 指定一个事务处理的消息数量，最好是小于等于 prefetch 的数量.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">simple.default-requeue-rejected</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 决定被拒绝的消息是否重新入队；默认是 true（与参数 acknowledge-mode 有关系）</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">simple.idle-event-interval</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 多少长时间发布空闲容器时间，单位毫秒</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 监听重试是否可用</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 最大重试次数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.initial-interval</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 第一次和第二次尝试发布或传递消息之间的间隔</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.multiplier</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 应用于上一重试间隔的乘数</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.max-interval</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 最大重试时间间隔</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token key atrule\">simple.retry.stateless</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 重试是有状态 or 无状态</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token key atrule\">mandatory</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 启用强制信息；默认 false</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token key atrule\">receive-timeout</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># receive () 操作的超时时间</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token key atrule\">reply-timeout</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># sendAndReceive () 操作的超时时间</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token key atrule\">retry.enabled</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 发送重试是否可用</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token key atrule\">retry.max-attempts</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 最大重试次数</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token key atrule\">retry.initial-interval</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 第一次和第二次尝试发布或传递消息之间的间隔</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token key atrule\">retry.multiplier</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 应用于上一重试间隔的乘数</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token key atrule\">retry.max-interval</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#最大重试时间间隔</span></pre></td></tr></table></figure><blockquote>\n<p>注：相关配置很多，大家只需要关注一些常用的配置即可</p>\n</blockquote>\n<ul>\n<li>对于发送方而言，需要做以下配置：<br>\n1 配置 CachingConnectionFactory<br>\n2 配置 Exchange/Queue/Binding<br>\n3 配置 RabbitAdmin 创建上一步的 Exchange/Queue/Binding<br>\n4 配置 RabbitTemplate 用于发送消息，RabbitTemplate 通过 CachingConnectionFactory 获取到 Connection，然后想指定 Exchange 发送</li>\n<li>对于消费方而言，需要做以下配置：<br>\n1 配置 CachingConnectionFactory<br>\n2 配置 Exchange/Queue/Binding<br>\n3 配置 RabbitAdmin 创建上一步的 Exchange/Queue/Binding<br>\n4 配置 RabbitListenerContainerFactory<br>\n5 配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhYmJpdExpc3RlbmVy\"> @RabbitListener</span>/<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JhYmJpdEhhbmRsZXI=\">@RabbitHandler</span> 用于接收消息<br>\n在默认情况下主要的配置如下：</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/866.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/866.png\" class=\"\"></p>\n<p>Spring AMQP 的主要对象:</p>\n<p><img data-src=\"RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/867.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/867.png\" class=\"\"></p>\n",
            "tags": [
                "RabbitMQ"
            ]
        },
        {
            "id": "http://example.com/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/",
            "url": "http://example.com/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/",
            "title": "Git协同与提交规范",
            "date_published": "2021-05-17T02:59:22.000Z",
            "content_html": "<span id=\"more\"></span>\n<h2 id=\"1前言\"><a class=\"markdownIt-Anchor\" href=\"#1前言\">#</a> 1. 前言</h2>\n<p>在现代化的软件开发中，尤其是在企业中的团队协同开发流程与代码管理方面，git 都充当着不可或缺的角色。本章中将会讲述如何使用 git 来进行一些基本的版本控制操作与团队协同中的 git 使用流程管理与提交规范。</p>\n<p>在 Git 快速上手章节中你将会了解 git 的基本概念与一些常用命令，能让你快速上手或复习 git 的基本操作。</p>\n<p>在 Git 多人合作基本模型中，你将会了解到 git 的团队基本工作模型。</p>\n<p>Git 工作流与分支管理规范是对于在企业级中 git 的团队协同流程的介绍与规范的讲解，你会学到团队开发中 git 在软件开发生命周期中的角色。</p>\n<p>Git 提交规范总结了在 git 使用过程中对于代码记录的提交信息的规范要求。</p>\n<h2 id=\"2-git-快速上手\"><a class=\"markdownIt-Anchor\" href=\"#2-git-快速上手\">#</a> 2. Git 快速上手</h2>\n<h3 id=\"21-git-的简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#21-git-的简单介绍\">#</a> 2.1 Git 的简单介绍</h3>\n<p>Git 是一个用于控制管理代码历史版本的工具，区别于集中式的 SVN，Git 使用了分布式的管理方式。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/845.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/845.png\" class=\"\"></p>\n<p>团队每人都拥有一个自己的本地仓库，不仅可以自己本地进行版本管理，也可以将代码版本在各个成员间共享.</p>\n<h3 id=\"22-初始化一个本地仓库\"><a class=\"markdownIt-Anchor\" href=\"#22-初始化一个本地仓库\">#</a> 2.2 初始化一个本地仓库</h3>\n<p>在开始操作之前，确保你的系统环境已经安装了 Git， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbQ==\">https://git-scm.com</span> 上提供了各个系统环境的 Git 下载。</p>\n<p>在使用 git 命令进行操作之前，你需要一个 git 仓库，你可以移动到你的工作目录，命令行中执行:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Initialized empty Git repository <span class=\"token keyword\">in</span> /path/to/work/directory/.git/</pre></td></tr></table></figure><p>这样你就可以得到一个本地仓库了，你会看到工作目录下已经新增了一个 <em>.git</em> 目录。</p>\n<p><em>注：某些系统中可能预设隐藏以。开头的文件夹，可能需要开启相关设置才能看到</em></p>\n<h3 id=\"23-克隆远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#23-克隆远程仓库\">#</a> 2.3 克隆远程仓库</h3>\n<p>当然如果你已经有了一个远程仓库，你就不需要初始化一个本地仓库了，你可以使用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>remote address<span class=\"token operator\">></span></pre></td></tr></table></figure><p>上面的命令会将链接指向的远程仓库克隆到本地，这样你也得到了一个 <em>git</em> 仓库，并且这个仓库是与远程仓库关联的，如果你有远程仓库的权限，你就可以对这个仓库推送你的提交。</p>\n<h3 id=\"24-查看仓库状态\"><a class=\"markdownIt-Anchor\" href=\"#24-查看仓库状态\">#</a> 2.4 查看仓库状态</h3>\n<p>上面我们已经初始化了一个空仓库，我们可以通过指令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>No commits yet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nothing to commit <span class=\"token punctuation\">(</span>create/copy files and use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过 <em>git status</em> 查看当前的仓库 (或代码分支) 的状态。</p>\n<h3 id=\"25-追踪文件修改\"><a class=\"markdownIt-Anchor\" href=\"#25-追踪文件修改\">#</a> 2.5 追踪文件修改</h3>\n<p>接下来我们可以为这个仓库添加一些文件，在工作目录下执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> index.js</pre></td></tr></table></figure><p>上面的指令为我们在工作目录下创建一个名为 index.js 的文件，使用 git status 可以查看到已经添加了一个 index.js 文件，下面我们在这个文件中写入一些内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"console.log('learning git!');\"</span> <span class=\"token operator\">></span> index.js</pre></td></tr></table></figure><p>上面这条指令为我们将 <em>“console.log(‘learning git!’)”</em> 这个内容写入了 <em>index.js</em> 文件中。此时查看仓库状态如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>No commits yet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Untracked files:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be commited<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        index.js</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>nothing added to commit but untracked files present<span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>可以看到信息反馈说到 index.js 这个文件是未追踪的 (<em>Untracked files</em>), 而在 git 中，如果一个文件需要 git 进行版本控制与内容修改追踪，那么就需要先将它加入到 git 仓库的暂存区 (<em>stage</em>) 中。将文件加入到暂存区只需要执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> index.js</pre></td></tr></table></figure><p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/846.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/846.png\" class=\"\"></p>\n<p>相信很多人在使用 git 添加修改或者新增文件的时候，会习惯直接使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>直接将当前目录下的修改的全部文件添加到暂存区 (<em>stage</em>), 一般情况下，这样的方式既方便又快捷，但是我仍然推荐在执行 <em>git add</em> 先使用 <em>git status</em> 命令来查看一下仓库有哪些文件被修改了，这样是因为如果你的仓库中使用了 git 的子模块功能，直接 <em>git add .</em> 会将子模块的 commit ID 也一并添加到暂存区，万一这个 commit ID 的提交并不是你的本意，那么提交到远程可能会导致子模块错乱的问题。</p>\n<p>为了养成良好习惯，最好在 <em>git add</em> 前使用 <em>git status</em> 查看一下仓库状态。</p>\n<h3 id=\"26-提交文件修改的历史信息\"><a class=\"markdownIt-Anchor\" href=\"#26-提交文件修改的历史信息\">#</a> 2.6 提交文件修改的历史信息</h3>\n<p>通过 git add 我们已经将对文件的操作 (新增或修改，删除等) 添加到了暂存区 (<em>stage</em>) 中，但是这样是不够的，我们还需要对这个操作记录成一个历史记录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Add a file named index.js\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>master <span class=\"token punctuation\">(</span>root-commit<span class=\"token punctuation\">)</span> 910f65f<span class=\"token punctuation\">]</span> Add a <span class=\"token function\">file</span> named index.js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token function\">file</span> changed, <span class=\"token number\">1</span> insertion<span class=\"token punctuation\">(</span>+<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>create mode <span class=\"token number\">100644</span> index.js</pre></td></tr></table></figure><p>这样我们对文件的操作生成一条历史记录，历史记录可以通过 <em>git log</em> 进行查看。不加 -m 参数直接 commit 的提交信息会默认使用 vim 编辑器进行编辑 (对于 vim 编辑器的操作介绍请看后面章节)。对于 commit 记录，原则上我们应该每个 commit 所记录的修改保持纯洁与单一，不允许比如对两个 bug 的修复都提交到一个 commit 中的情况，这样一旦 bug A 的修复会导致另一个问题，但是 bug B 的修复是没有问题的，此时如果回退该 commit，虽然回退了 bug A 的提交，但是也丢失 bug B 的修复工作了。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/847.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/847.png\" class=\"\"></p>\n<p><em>注：笔者不推荐 commit -m 的操作，因为这不符合提交规范，这里是为了简短说明 commit 的使用，详情请看后面章节</em></p>\n<h4 id=\"261-vim-编辑器的简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#261-vim-编辑器的简单介绍\">#</a> 2.6.1 Vim 编辑器的简单介绍</h4>\n<p>使用 git commit 命令会默认使用 vim 编辑器进行提交信息的编写，同时笔者不推荐使用 git commit -m 的方式来提交信息，因为这样编写出来的提交信息不符合规范，只能说明一些简短信息或者甚至直接为空，尤其是空信息是不被允许的。所以这里会简单介绍 vim 的基本用法，有兴趣的读者可以搜索相关 vim 的学习资料进行深入学习。</p>\n<p>当你使用 add 命令将对于文件的修改添加到缓存区后，你可以使用输入 git commit 然后直接回车，然后你会进入到 vim 编辑器的界面，你会在界面上看到类似下面的信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Please enter the commit message for your changes. Lines starting</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># with '#' will be ignored, and an empty message aborts the commit.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Committer: shawn &lt;zhangxiang@zhangxiangdeMacBook-Pro.local></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># On branch master</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># Changes to be committed:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#       modified:   index.js</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>~</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>~</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">\"~/path/to/working/directory/git-learning/.git/COMMIT_EDITMSG\"</span> 10L, 274C</pre></td></tr></table></figure><p>以 <em>#</em> 开头的信息是注释，不用担心他们会添加到你的提交信息中，而且如果你没有填写信息就直接退出则该 commit 会被中断。</p>\n<h5 id=\"插入模式\"><a class=\"markdownIt-Anchor\" href=\"#插入模式\">#</a> 插入模式</h5>\n<p>接下来，当你需要填写数据的时候，你需要按下 “i” 键进入插入模式，进入插入模式之后才能进行文本的插入与编写，然后就可以类似在一般的编辑器下编写你想填写的信息。</p>\n<p>而当你编写完信息后，你需要先退出插入模式而回到原来的普通模式，退出插入模式你只需要按下 “esc” 键。</p>\n<h5 id=\"命令模式\"><a class=\"markdownIt-Anchor\" href=\"#命令模式\">#</a> 命令模式</h5>\n<p>当你想退出 vim 编辑器的时候，我们需要进入命令模式，在普通模式下输入 <strong>:</strong> ， 进入命令模式，输入 <em>wq</em> 回车，就可以保存并退出编辑了，下面提供一些常用的命令供大家参考：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>:q   退出</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:q<span class=\"token operator\">!</span>  强制退出，不进行保存</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>:wq  保存并退出</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>:wq<span class=\"token operator\">!</span> 强制保存并退出</pre></td></tr></table></figure><h3 id=\"27-使用分支\"><a class=\"markdownIt-Anchor\" href=\"#27-使用分支\">#</a> 2.7 使用分支</h3>\n<p>分支功能是 git 最为强大的功能之一，它能够让你并发地在多个场景下进行开发。并且可以让你同时开发不同功能而不冲突，用于区分功能或版本。</p>\n<p>在企业里面，有规模的开发团队在开发功能的时候是不可能大家都在一个分支上开发的，因为这可能需要不断地解决冲突，此外功能与功能间通常相互独立，在同一个分支上开发本就不合理。</p>\n<p>你可以执行下面这个命令来创建一个分支：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch <span class=\"token operator\">&lt;</span>branch-name<span class=\"token operator\">></span></pre></td></tr></table></figure><p>例如你执行 <em>git branch test</em> 这条命令创建了一条分支，实际上你是创建了一个指向该 commit 节点的名为 test 的指针：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/848.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/848.png\" class=\"\"></p>\n<h3 id=\"28-在不同场景间切换\"><a class=\"markdownIt-Anchor\" href=\"#28-在不同场景间切换\">#</a> 2.8 在不同场景间切换</h3>\n<p>在日常开发的时候，我们可能经常会需要切换到不同的开发场景，比如你正在一个功能分支上开发，但是产品经理或者测试忽然需要你在线上环境看一个问题，所以你需要将你目前的代码切换到线上环境的代码，当你需要切换分支的时候，可以：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch-name<span class=\"token operator\">>|</span><span class=\"token operator\">&lt;</span>tag<span class=\"token operator\">>|</span><span class=\"token operator\">&lt;</span>commit <span class=\"token builtin class-name\">hash</span> id<span class=\"token operator\">></span></pre></td></tr></table></figure><p>上面只是 git checkout 的使用场景之一，checkout 不仅可以切换分支，还可以切换 tag，或者 commit hash id 等环境的代码。比如你需要切换到上面创建的 test 分支，那么你需要执行 <em>git checkout test</em> 这条指令，在 git 中是使用 Head 指针来指向当前提交记录的，而 checkout 命令实际上是将 git 的 head 指针指向了 test 这一指针：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/849.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/849.png\" class=\"\"></p>\n<p>那么现在的当前工作分支就是 test 分支了。这里就会明白，实际上 checkout 命令的本质就是移动 git 的 Head 指针。</p>\n<p>当然，直接 checkout 可能会不能顺利切换过去，因为你的工作区内对于某些文件的修改没有提交，会 git 阻止你进行分支切换，提醒你先对文件的修改进行 commit 提交，相关的 commit 提交操作像上面的章节一样操作就可以，但是如果你因为一些其他原因不希望进行 commit 比如这部分的修改不满足一个 commit 或者这些是实验性的代码，所以你可以将当前的工作区修改进行 “储藏”：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> stash</pre></td></tr></table></figure><p>git stash 命令可以为你保存起目前的代码，并将这些修改压入到一个栈中，换言之你可以多次进行 stash。</p>\n<p>然后当你解决了问题，想回到原来的工作代码环境，你只需要切换到原来的分支上，进行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> stash pop</pre></td></tr></table></figure><p>这里会默认拿栈顶的代码 (也就是最近一次 stash 的代码) 修改记录并将其反映到你的工作区中。</p>\n<h2 id=\"3-git-多人合作基本模型\"><a class=\"markdownIt-Anchor\" href=\"#3-git-多人合作基本模型\">#</a> 3. Git 多人合作基本模型</h2>\n<p>在实际的软件研发过程中，团队作战的场景远远多于单兵作战，所以仅仅是掌握上面章节对于自己本地仓库进行操作的 git 指令是不够的，我们会需要一个远程的集中式仓库。所谓集中式仓库就是团队中所有人的代码都上传到这个地方进行存储，有了集中式的仓库，可以方便地进行成果共享与协作。</p>\n<h3 id=\"31-添加远程仓库地址\"><a class=\"markdownIt-Anchor\" href=\"#31-添加远程仓库地址\">#</a> 3.1 添加远程仓库地址</h3>\n<p>如果你已经使用 <em>git init</em> 初始化了一个 git 仓库，并且你想要将你的工作成果放到一个远程仓库上，为可能的多人协作做准备的话，你需要为你的本地仓库添加远程连接，也即是说将你本地仓库的历史库放到一个远程服务器的仓库中保存里面：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>remote address<span class=\"token operator\">></span></pre></td></tr></table></figure><p>使用 <em>git remote add</em> 命令为本地仓库添加一个远程仓库的地址，地址可以是 <em>http/https</em> 格式的也可以是 <em>ssh</em> 格式的。而 name 是指这个远程仓库链接名称，比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/username/example</pre></td></tr></table></figure><p>当然，如果你的仓库是通过 <em>git clone</em> 克隆下来的，你可以不需要添加一个远程仓库链接。</p>\n<h3 id=\"32-将本地修改推送到远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#32-将本地修改推送到远程仓库\">#</a> 3.2 将本地修改推送到远程仓库</h3>\n<p>当你有若干个 <em>commit</em> 提交记录需要更新到远程仓库，在执行了 <em>commit</em> 命令后，使用：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> push origin master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Counting objects: <span class=\"token number\">3</span>, done.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Writing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">3</span>/3<span class=\"token punctuation\">)</span>, <span class=\"token number\">274</span> bytes <span class=\"token operator\">|</span> <span class=\"token number\">274.00</span> KiB/s, done.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Total <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>To https://github.com/username/example.git</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * <span class=\"token punctuation\">[</span>new branch<span class=\"token punctuation\">]</span>      master -<span class=\"token operator\">></span> master</pre></td></tr></table></figure><p>这样就可以将你本地的 <em>commit</em> 提交传送到远程仓库中进行共享。注意第一个推送修改的时候需要指定远程连接的名称 (这里是 origin, 即上一步添加远程仓库地址的名称), 并指定推送的分支名 (这里是 master 分支)。</p>\n<h3 id=\"33-拉取并合并他人修改\"><a class=\"markdownIt-Anchor\" href=\"#33-拉取并合并他人修改\">#</a> 3.3 拉取并合并他人修改</h3>\n<p>当团队其他成员对该分支上的代码进行了修改并且已经 <em>push</em> 到远程仓库后，你可以将他的提交拉取到本地并且将他的提交进行合并自己本地仓库上，通过：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> pull</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>There is no tracking information <span class=\"token keyword\">for</span> the current branch.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Please specify <span class=\"token function\">which</span> branch you want to merge with.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>See git-pull<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> details.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">git</span> pull <span class=\"token operator\">&lt;</span>remote<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>If you wish to <span class=\"token builtin class-name\">set</span> tracking information <span class=\"token keyword\">for</span> this branch you can <span class=\"token keyword\">do</span> so with:</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/<span class=\"token operator\">&lt;</span>branch<span class=\"token operator\">></span> master</pre></td></tr></table></figure><p>第一次拉取远程仓库的修改的时候，会出现像上面 <em>“There is no tracking information for the current branch”</em> 的错误，这是因为本地分支与远程分支没有建立起关联关系，所以我们需要通过以下两种方式来达到目的:</p>\n<p>1. 通过执行 <em>pull</em> 命令的时候指定分支</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> pull origin master</pre></td></tr></table></figure><p>2. 通过执行 <em>branch</em> 命令建立本地分支与远程分支的关联关系后再次执行 <em>pull</em> 命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">git</span> branch --set-upstream-to<span class=\"token operator\">=</span>origin/master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Branch <span class=\"token string\">'master'</span> <span class=\"token builtin class-name\">set</span> up to track remote branch <span class=\"token string\">'master'</span> from <span class=\"token string\">'origin'</span><span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ <span class=\"token function\">git</span> pull</pre></td></tr></table></figure><p>这样，你本地仓库就会出现其他人提交的代码修改了。</p>\n<h3 id=\"34-协作基本模型\"><a class=\"markdownIt-Anchor\" href=\"#34-协作基本模型\">#</a> 3.4 协作基本模型</h3>\n<p>使用 git 的 push 命令与 pull 命令其实已经可以实现多人代码共享的情景，你对本地代码进行了很多修改，同时创建了很多 commit 记录，然后你可以通过 push 推送到远程仓库，团队其他人通过 pull 命令拉取你的提交，同时他们也有可能将他们的 commit 记录提交远程仓库，你可以使用 pull 命令拉取他们的提交。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/850.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/850.png\" class=\"\"></p>\n<p>但是大家并行开发同时进行提交，大概率会出现 push 的时候被 git 阻止的情况，原因是两个并行的提交，远程仓库需要对两者的提交顺序进行编排，所以会要求你先进行 pull 命令执行，将远程的提交拉取下来并合并到本地分支，在本地编排好你的本地提交记录与其他人的提交记录之后，才允许你进行 push 命令的执行。</p>\n<h2 id=\"4-git-工作流与分支管理规范\"><a class=\"markdownIt-Anchor\" href=\"#4-git-工作流与分支管理规范\">#</a> 4. Git 工作流与分支管理规范</h2>\n<p>对于一些规模比较大的团队，一般会使用 git 分支来管理与规范不同环境的代码。</p>\n<h3 id=\"41-分支管理的必要性\"><a class=\"markdownIt-Anchor\" href=\"#41-分支管理的必要性\">#</a> 4.1 分支管理的必要性</h3>\n<p>也许你会有疑问为什么我们会需要分支管理，并且需要分如此多的分支？因为在软件开发中，我们通常会有几个阶段，比如开发阶段，冒烟阶段，提测阶段，预发布阶段与上线阶段，而这些阶段都会对应有不同的部署环境，如果我们没有分支管理与将这些环境分别用不同的分支进行区分，代码版本管理将会无从谈起。所以我们会给分出很多分支，并且赋予这些分支不同的角色对应不同的环境与阶段。</p>\n<p><em>注：1. 冒烟这一术语原来自硬件行业，在软件工程中指由开发人员自身对新的程序代码进行测试，确保新的代码不出故障</em></p>\n<h3 id=\"42-使用-gitflow-工作流\"><a class=\"markdownIt-Anchor\" href=\"#42-使用-gitflow-工作流\">#</a> 4.2 使用 gitflow 工作流</h3>\n<p>对于分支的管理，推荐使用 gitflow 工作流的模式，流程大概如下图：</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/843.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/843.png\" class=\"\"></p>\n<p>对上面的分支说明如下：</p>\n<ul>\n<li>feature branches。功能分支，一般是从 develop 开发分支上检出 (checkout)</li>\n<li>develop。公共的开发主线分支，feature 功能分支的代码开发完成后，经过 code review 后会合并到此分支</li>\n<li>release branches。测试、发布主线，此分支是从 develop 分支上检出 (checkout), 一般是提测阶段会使用该分支的代码</li>\n<li>bugfix。修复 release 分支问题，</li>\n<li>hotfix。紧急修复，一般是用于修复上线后的生产环境的问题。</li>\n<li>master。可发布的稳定版分支</li>\n</ul>\n<blockquote>\n<p><em>注：gitflow 分支管理图来自网络</em></p>\n</blockquote>\n<h4 id=\"421-功能开发流程\"><a class=\"markdownIt-Anchor\" href=\"#421-功能开发流程\">#</a> 4.2.1 功能开发流程</h4>\n<p>团队在使用 <em>gitflow</em> 分支管理规范下，当我们需要有新的功能进行开发的时候，我们需要从最新的 <em>develop</em> 分支上检出 (<em>checkout</em>) 一个功能分支分支，命名形式如 <em>feature-xxx-version</em>，然后就可以在该功能分支上进行开发，当你开发完成后，可以将分支 <em>push</em> 到远程仓库中，并在对应的远程仓库管理软件 (<em>gitlab</em> 等) 中提交 <em>merge request</em>，经过相关人员的代码审查后，会将功能分支合并到 <em>develop</em> 分支上并删除这个功能分支。</p>\n<h4 id=\"422-提测流程\"><a class=\"markdownIt-Anchor\" href=\"#422-提测流程\">#</a> 4.2.2 提测流程</h4>\n<p>当开发人员完成了该版本的所有功能后，会向测试人员发起测试功能的请求，此时会将最新的 <em>develop</em> 分支 (此时的 <em>develop</em> 分支已有所有该版本的新功能的代码) 检出 <em>release</em> 分支，命名格式如 <em>release-version</em>，测试人员 QA 会基于 <em>release-version</em> 为主线对代码进行测试与测试环境部署。</p>\n<p>当测试人员在 <em>release</em> 分支上发布代码 <em>bug</em> 的时候，开发人员需要从 <em>release-version</em> 分支上检出 <em>bugfix</em> 分支，命名格式如 <em>bugfix-xxx</em> ，然后类似功能开发流程，将 <em>bugfix-xxx</em> 分支合并到 <em>release-version</em> 分支上。</p>\n<h4 id=\"423-部署发布流程\"><a class=\"markdownIt-Anchor\" href=\"#423-部署发布流程\">#</a> 4.2.3 部署发布流程</h4>\n<p>当测试人员测试通过后，会将 <em>release-version</em> 分支合并到 <em>master</em> 分支，并将 <em>release-version</em> 分支合并到 <em>develop</em> 分支，将 <em>master</em> 分支的代码进行部署，并测试线上，测试通过后对 <em>master</em> 分支打上 <em>tag</em>，并将 <em>master</em> 分支合并会 <em>develop</em> 分支。这里解释一下打 tag 的作用，tag 相当于是一个当前 commit 的一个快照，作用与 commit-sha1 类似，但是 tag 更具有可读性，可以供快速回退到想要的版本记录。</p>\n<h4 id=\"424线上问题紧急修复流程\"><a class=\"markdownIt-Anchor\" href=\"#424线上问题紧急修复流程\">#</a> 4.2.4 线上问题紧急修复流程</h4>\n<p>当线上即生产环境发现 <em>bug</em> 的时候，需要在 master 分支上检出 (<em>checkout</em>) 一个 <em>hotfix-x.x.x</em> (x.x.x 是指语义化版本号) 分支，然后相关的开发人员的修</p>\n<h3 id=\"43-便于-code-review-的合作流程\"><a class=\"markdownIt-Anchor\" href=\"#43-便于-code-review-的合作流程\">#</a> 4.3 便于 code review 的合作流程</h3>\n<p>在编写代码的时候，为了代码的高质量与开发人员的知识共享，通常会加上代码审查也就是 code review 环节。这个环节是借助 merge request 或者 pull request 来做到的，所以我们提交的 commit 记录应该尽量保持为<strong>一个</strong>，这样的好处有很多：</p>\n<ol>\n<li>方便代码审核者进行 code review，只需要看这一个 commit 记录的逻辑即可</li>\n<li>万一该 commit 的代码导致出现问题，我们可以只针对这个 commit 进行快速回退。</li>\n<li>一个功能保持一个 commit 记录如果遇到需要对这个功能提前提交到某些环境比如生产环境上，我们可以快速用过 cherry-pick 命令，在对应的分支上 &quot;重现&quot; 该提交记录，达到提前提交的目的。</li>\n</ol>\n<p>也许你会有疑问，单个功能保持一个 commit 记录与 commit 提交记录尽量保持较细的粒度这一原则是否相悖，笔者觉得并没有冲突，因为这两个 git 协作要求是基于不同的角度来看待问题的，对于自己开发的分支上，我们需要保持每个提交的粒度在一个 commit 做一个修改，这样有利于我们记录工作内容与方便自己在本分支上做回滚，但是对于一个软件开发的主分支来说，它上面的提交应该是以功能为单位的，而无需关心这个功能内开发人员开发这个功能做了多少次修改。</p>\n<p>面对这种情况，我们会使用 rebase 命令，也就是衍合 (变基) 操作。所谓衍合就是将你此分支上的 commit 提交，按顺序重新在某个分支上的某个基础点重新 &quot;演绎&quot; 一次，而这个重新 &quot;演绎&quot; 重新提交的 commit 记录与原来的 commit 提交会有些许不同，不同点在于 commit 的 HashId 会不同，但是提交内容是一样的。</p>\n<p>rebase 命令提供了交互式的界面，并且提供多种的命令让你能够将多个 commit 记录合并为一个，从而达到我们单一功能保持一个 commit 记录的目的，保持提交历史的清爽。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/844.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/844.png\" class=\"\"></p>\n<p>*<em> 注：企业中一般会使用需求管理系统来管理需要开发的需求等</em></p>\n<h2 id=\"5-git-提交规范\"><a class=\"markdownIt-Anchor\" href=\"#5-git-提交规范\">#</a> 5. Git 提交规范</h2>\n<p>制定一个 <em>git commit</em> 信息的提交规范是开发团队工作流必不可少的环节。试想一下，如果查看主分支上的历史库也就是你查看 <em>git log</em> 的时候，打印出来的信息杂乱无章的话，如果代码遇到问题，可能需要很大的精力与成本来查找到导致问题的代码提交，所以团队需要制定规范来引导成员编写规范的 <em>commit</em> 信息。</p>\n<p>接下来的 <em>commit</em> 信息规范参考了 <em>angularjs</em> 团队的开发者指引与笔者的工作团队进行总结，读者如有需要可以以此为基础增加或修改成为自己团队的 <em>commit</em> 规范的一部分。</p>\n<h3 id=\"51-提交信息基本模板\"><a class=\"markdownIt-Anchor\" href=\"#51-提交信息基本模板\">#</a> 5.1 提交信息基本模板</h3>\n<p>如果 commit 信息都按照一定的模式进行提交，那么我们就会很容易找到自己想要的信息，模板参考如下：</p>\n<pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt; [&lt;ISSUE_ID&gt;]\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre>\n<p>commit 信息包括三个字段: type (必需)， scope (可选) 和 subject (必需)。</p>\n<ol>\n<li>type。type 是用于说明该 commit 的类型的，一般我们会规定 type 的类型如下：</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>feat: 新功能 (feature)</li>\n<li>fix: 修复 bug</li>\n<li>docs: 文档 (documents)</li>\n<li>style: 代码格式 (不影响代码运行的格式变动，注意不是指 CSS 的修改)</li>\n<li>refactor: 重构 (既不是新增功能，也不是修改 bug 的代码变动)</li>\n<li>test: 提交测试代码 (单元测试，集成测试等)</li>\n<li>chore: 构建或辅助工具的变动</li>\n<li>misc: 一些未归类或不知道将它归类到什么方面的提交</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>scope。scope 说明 commit 影响的范围，比如数据层，控制层，视图层等等，这个需要视具体场景与项目的不同而灵活变动</li>\n<li>subject。subject 是对于该 commit 目的的简短描述</li>\n</ol>\n<ul>\n<li>\n<ul>\n<li>使用第一人称现在时的动词开头，比如 modify 而不是 modified 或 modifies</li>\n<li>首字母小写，并且结尾不加句号</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>ISSUEE_ID。这个与公司的需求管理与项目管理有关，假设你的项目放在 <em>github</em> 上，你的需求或者 <em>bug</em> 修复可能会有对应的 <em>issues</em> 记录，你可以加到你的 <em>commit</em> 信息中如 <em>issue-37938634</em>。</li>\n</ol>\n<p>body 其实就是 subject 的详细说明，而 footer 中你可以填写相关的需求管理 issues id。</p>\n<p>在企业中一般会对团队中要做的事情与需求开发使用一个软件进行管理，好处是可以让代码与对应的用户故事 (story) 或者需求，bug 进行关联，便于管理，类似的方案有 github，gitlab，tracker，JIRA 等等，比如在网易某些团队中就会使用 JIRA 加上 gitlab 来进行团队管理。</p>\n<p>commit message 的规范性是很重要的，对于自己养成良好的编程习惯很有帮助，但是没有必要强制完全遵循开源团队的规范，毕竟每个团队与个人的情况不同，博采众长即可，当然你也可以使用像 <em>commitlint</em> 这样的校验工具从工具层面上来强制执行某些规范，这里就不展开讲了，有兴趣的读者可以查阅相关资料并使用到自己团队的实践中。</p>\n<h2 id=\"6-ideaad-集成提交规范插件\"><a class=\"markdownIt-Anchor\" href=\"#6-ideaad-集成提交规范插件\">#</a> 6. IDEA/AD 集成提交规范插件</h2>\n<p>打开 <code>File/Settings</code> ，选择 <code>Plugins</code> ，搜索 <code>Git Commit Template</code>  插件并下载。</p>\n<p>commit 提交的时候，点击下图中的图标。</p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/851.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/851.png\" class=\"\"></p>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/852.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/852.png\" class=\"\"></p>\n<h3 id=\"61-header\"><a class=\"markdownIt-Anchor\" href=\"#61-header\">#</a> 6.1 Header</h3>\n<p>Header 的部分只有一行，包括三个字段: <strong>type (必需), scope (可选), subject (必需)</strong></p>\n<p>对应到 idea 插件上图的配置分别为 Header 部分的:</p>\n<table>\n<thead>\n<tr>\n<th>type (必需)</th>\n<th>Type of change</th>\n<th>commit 类别</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>scope (可选)</td>\n<td>Scope of this change</td>\n<td>影响的范围， 一般为自己代码的模块名。</td>\n</tr>\n<tr>\n<td><strong>subject (必需)</strong></td>\n<td><strong>Short description</strong></td>\n<td><strong>简短的描述</strong>，建议符合 50/72 格式。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"1-type用于说明-commit-的类别只允许使用下面7个标识\"><a class=\"markdownIt-Anchor\" href=\"#1-type用于说明-commit-的类别只允许使用下面7个标识\">#</a> (1) type 用于说明 commit 的类别，只允许使用下面 7 个标识</h4>\n<p><code>type</code>  用于说明 commit 的类别：</p>\n<ol>\n<li><strong>feat：新功能（feature）；</strong></li>\n<li><strong>fix：修补 bug；</strong></li>\n<li><strong>docs：文档（documentation）；</strong></li>\n<li><strong>style： 格式（不影响代码运行的变动，空格，格式化，等等）；</strong></li>\n<li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）；</li>\n<li>perf: 性能 (提高代码性能的改变)；</li>\n<li><strong>test：增加测试或者修改测试；</strong></li>\n<li>build: 影响构建系统或外部依赖项的更改 (maven,gradle,npm 等等)；</li>\n<li>ci: 对 CI 配置文件和脚本的更改；</li>\n<li><strong>chore：其他修改， 比如构建流程， 依赖管理。</strong></li>\n<li><strong>revert: Revert a commi，用于撤销以前的 commit</strong></li>\n</ol>\n<h4 id=\"2-scope\"><a class=\"markdownIt-Anchor\" href=\"#2-scope\">#</a> (2) scope</h4>\n<p><code>scope</code>  用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h4 id=\"3-subject\"><a class=\"markdownIt-Anchor\" href=\"#3-subject\">#</a> (3) subject</h4>\n<p><code>subject</code>  是 commit 目的的简短描述，不超过 50 个字符。</p>\n<blockquote>\n<p>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes<br>\n 第一个字母小写<br>\n结尾不加句号（.）</p>\n</blockquote>\n<h3 id=\"62-body\"><a class=\"markdownIt-Anchor\" href=\"#62-body\">#</a> 6.2 Body</h3>\n<p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<pre><code>More detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n</code></pre>\n<p>有两个注意点。</p>\n<p>（1）使用第一人称现在时，比如使用 change 而不是 changed 或 changes。</p>\n<p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h3 id=\"63-footer\"><a class=\"markdownIt-Anchor\" href=\"#63-footer\">#</a> 6.3 Footer</h3>\n<p>Footer 部分只用于两种情况。</p>\n<h4 id=\"631-不兼容变动\"><a class=\"markdownIt-Anchor\" href=\"#631-不兼容变动\">#</a> 6.3.1 不兼容变动</h4>\n<p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code>  开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<pre><code>BREAKING CHANGE: isolate scope bindings definition has changed.\n\n To migrate the code follow the example below:\n\n Before:\n\n scope: &#123;\n   myAttr: 'attribute',\n &#125;\n\n After:\n\n scope: &#123;\n   myAttr: '@',\n &#125;\n\n The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n</code></pre>\n<h4 id=\"632-关闭-issue\"><a class=\"markdownIt-Anchor\" href=\"#632-关闭-issue\">#</a> 6.3.2 关闭 Issue</h4>\n<p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<pre><code>Closes #234\n</code></pre>\n<p>也可以一次关闭多个 issue 。</p>\n<pre><code>Closes #123, #245, #992\n</code></pre>\n<blockquote>\n<p>特殊情况【回滚，Revert】：如果当前 commit 用于撤销以前的 commit，<br>\n必须以 revert: 开头，后面跟着被撤销 Commit 的 Header。<br>\nBody 部分的格式是固定的，必须写成 This reverts commit <hash>.，其中的 hash 是被撤销 commit 的 SHA 标识符。<br>\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。<br>\n如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 Reverts 小标题下面。</p>\n</blockquote>\n<p><img data-src=\"Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/853.png\" alt=\"\"><img data-src=\"/Git%E5%8D%8F%E5%90%8C%E4%B8%8E%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83/853.png\" class=\"\"></p>\n<h3 id=\"64-5072格式化\"><a class=\"markdownIt-Anchor\" href=\"#64-5072格式化\">#</a> 6.4. 50/72 格式化</h3>\n<p>git commit 格式基本规约：50/72 格式化</p>\n<ul>\n<li>第一行不超过 50 个字符</li>\n<li>然后是空白行</li>\n<li>其余文字应以 72 个字符换行</li>\n</ul>\n<p>原因：</p>\n<ul>\n<li>一些工具将第一行作为主题行，将第二段作为正文 (类似于电子邮件)。若工具流行，那么该格式将流行。</li>\n<li><code>git log</code>  不处理换行，因此如果行太长则很难阅读。</li>\n<li><code>git format-patch --stdout</code>  可以将提交转换为电子邮件。</li>\n</ul>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>本章节介绍了 <em>git</em> 的一些常用命令的操作与基本概念，与基于此的 <em>git</em> 合作流程与 <em>commit</em> 规范。对于 <em>git</em> 的使用，笔者建议多加练习，不能只 &quot;纸上谈兵&quot;, 实际操作才能加深对于 <em>git</em> 的理解，而 <em>git</em> 合作流程与 <em>commit</em> 规范提供了参考。</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://example.com/nginx/",
            "url": "http://example.com/nginx/",
            "title": "Nginx初步学习",
            "date_published": "2021-05-13T08:30:03.000Z",
            "content_html": "<span id=\"more\"></span>\n<h1 id=\"nginx\"><a class=\"markdownIt-Anchor\" href=\"#nginx\">#</a> nginx</h1>\n<p>推荐视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpKNDExdzdTVj9wPTE=\">尚硅谷 Nginx</span></p>\n<h1 id=\"内容概览\"><a class=\"markdownIt-Anchor\" href=\"#内容概览\">#</a> 内容概览</h1>\n<h2 id=\"1-nginx-简介\"><a class=\"markdownIt-Anchor\" href=\"#1-nginx-简介\">#</a> 1、nginx 简介</h2>\n<p>（1）介绍 nginx 的应用场景和具体可以做什么事情</p>\n<p>（2）介绍什么是反向代理</p>\n<p>（3）介绍什么是负载均衡</p>\n<p>（4）介绍什么是动静分离</p>\n<h2 id=\"2-nginx-安装\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx-安装\">#</a> 2、nginx 安装</h2>\n<p>（1）介绍 nginx 在 linux 系统中如何进行安装</p>\n<h2 id=\"3-nginx-常用的命令和配置文件\"><a class=\"markdownIt-Anchor\" href=\"#3-nginx-常用的命令和配置文件\">#</a> 3、nginx 常用的命令和配置文件</h2>\n<p>（1）介绍 nginx 启动、关闭、重新加载命令</p>\n<p>（2）介绍 nginx 的配置文件</p>\n<h2 id=\"4-nginx-配置实例-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#4-nginx-配置实例-反向代理\">#</a> 4、nginx 配置实例 - 反向代理</h2>\n<h2 id=\"5-nginx-配置实例-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#5-nginx-配置实例-负载均衡\">#</a> 5、nginx 配置实例 - 负载均衡</h2>\n<h2 id=\"6-nginx-配置实例-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#6-nginx-配置实例-动静分离\">#</a> 6、nginx 配置实例 - 动静分离</h2>\n<h2 id=\"7-nginx-原理与优化参数配置\"><a class=\"markdownIt-Anchor\" href=\"#7-nginx-原理与优化参数配置\">#</a> 7、nginx 原理与优化参数配置</h2>\n<h2 id=\"8-搭建-nginx-高可用集群\"><a class=\"markdownIt-Anchor\" href=\"#8-搭建-nginx-高可用集群\">#</a> 8、搭建 nginx 高可用集群</h2>\n<p>（1）搭建 nginx 高可用集群（主从模式）</p>\n<p>（2）搭建 nginx 高可用集群（双主模式）</p>\n<hr>\n<h1 id=\"nginx简介\"><a class=\"markdownIt-Anchor\" href=\"#nginx简介\">#</a> nginx 简介</h1>\n<h2 id=\"1-什么是nginx\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是nginx\">#</a> 1、什么是 nginx</h2>\n<p>Nginx (“engine x”) 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等</p>\n<h2 id=\"2-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#2-反向代理\">#</a> 2、反向代理</h2>\n<h3 id=\"21-正向代理\"><a class=\"markdownIt-Anchor\" href=\"#21-正向代理\">#</a> 2.1、正向代理</h3>\n<p>需要在客户端配置代理服务器进行指定网站访问</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527212532451.png\" alt=\"image-20210527212532451\"></p>\n<h3 id=\"22-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#22-反向代理\">#</a> 2.2、反向代理</h3>\n<p>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址，不需要在客户端配置代理服务器，就相当于客户端只是单纯的认为我们的反向代理服务器才是真正的服务器。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527212846955.png\" alt=\"image-20210527212846955\"></p>\n<h2 id=\"3-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#3-负载均衡\">#</a> 3、负载均衡</h2>\n<p>单个服务器解决不了，增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527213914267.png\" alt=\"image-20210527213914267\"></p>\n<h2 id=\"4-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#4-动静分离\">#</a> 4、动静分离</h2>\n<p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527215607579.png\" alt=\"image-20210527215607579\"></p>\n<hr>\n<h1 id=\"nginx的安装\"><a class=\"markdownIt-Anchor\" href=\"#nginx的安装\">#</a> nginx 的安装</h1>\n<h2 id=\"1-这里我没有用服务器学习直接xshell远程连接虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#1-这里我没有用服务器学习直接xshell远程连接虚拟机\">#</a> 1、这里我没有用服务器学习，直接 xshell 远程连接虚拟机</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527220757094.png\" alt=\"image-20210527220757094\"></p>\n<h2 id=\"2-进行nginx安装\"><a class=\"markdownIt-Anchor\" href=\"#2-进行nginx安装\">#</a> 2、进行 nginx 安装</h2>\n<h3 id=\"第一步安装pcre\"><a class=\"markdownIt-Anchor\" href=\"#第一步安装pcre\">#</a> 第一步，安装 pcre</h3>\n<ul>\n<li>直接 pcre 官网下载相应的 tar 包</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527222031652.png\" alt=\"image-20210527222031652\"></p>\n<ul>\n<li>\n<p>解压之后进行 pcre-8.44 文件夹，执行 <code>./configure</code>  命令</p>\n</li>\n<li>\n<p>== 这里需要注意的是 linux 系统要安装 gcc 和 gcc-c++ 库</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> gcc</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y gcc-c++</pre></td></tr></table></figure><p>安装完之后在 pcre-8.44 文件夹下执行 <code>./configure</code></p>\n</li>\n<li>\n<p>继续执行 <code>make &amp;&amp; make install</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>至此 prce 安装完成，查看版本 <code>pcre-config --version</code></p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527222734029.png\" alt=\"image-20210527222734029\"></p>\n<h3 id=\"第二步安装-openssl\"><a class=\"markdownIt-Anchor\" href=\"#第二步安装-openssl\">#</a> 第二步，安装 openssl</h3>\n<h3 id=\"第三步安装zlib\"><a class=\"markdownIt-Anchor\" href=\"#第三步安装zlib\">#</a> 第三步，安装 zlib</h3>\n<p>直接通过 yum 命令安装以上两个</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> <span class=\"token function\">make</span> zlib zlib-devel gcc-c++ libtool openssl openssl-devel</pre></td></tr></table></figure><h3 id=\"最后安装nginx\"><a class=\"markdownIt-Anchor\" href=\"#最后安装nginx\">#</a> 最后安装 nginx</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 使用命令解压</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tar</span> -xvf nginx-1.21.0.tar.gz</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 进入 nginx 文件夹</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./configure</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h2 id=\"3-启动服务\"><a class=\"markdownIt-Anchor\" href=\"#3-启动服务\">#</a> 3、启动服务</h2>\n<p><mark>进入目录 /usr/local/nginx/sbin/nginx 启动服务</mark></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223628933.png\" alt=\"image-20210527223628933\"></p>\n<p><mark>进入 nginx 配置文件，发现默认端口是 80</mark></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223908493.png\" alt=\"image-20210527223908493\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527223817099.png\" alt=\"image-20210527223817099\"></p>\n<p><mark>在 centOS 中访问到了 nginx 页面</mark></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224249185.png\" alt=\"image-20210527224249185\"></p>\n<h2 id=\"4-在windows-系统中访问\"><a class=\"markdownIt-Anchor\" href=\"#4-在windows-系统中访问\">#</a> 4、在 windows 系统中访问</h2>\n<p>在 windows 系统中访问 linux 中 nginx，默认不能访问的，因为防火墙问题</p>\n<ol>\n<li>关闭防火墙</li>\n<li>开放访问的端口号，80 端口</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看开放的端口号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --list-all</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 设置开放的端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 重启防火墙</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>firewall-cmd --reload</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224723786.png\" alt=\"image-20210527224723786\"></p>\n<p>在 windows 系统中也访问到了 nginx 页面</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210527224751817.png\" alt=\"image-20210527224751817\"></p>\n<h1 id=\"nginx操作的常用命令\"><a class=\"markdownIt-Anchor\" href=\"#nginx操作的常用命令\">#</a> nginx 操作的常用命令</h1>\n<blockquote>\n<p>使用 nginx 操作命令前提条件：必须进入 nginx 的目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/nginx/sbin</pre></td></tr></table></figure><blockquote>\n<p>2、查看 nginx 的版本号</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx -v</span></pre></td></tr></table></figure><blockquote>\n<p>3、启动 nginx</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx</span></pre></td></tr></table></figure><blockquote>\n<p>4、关闭 nginx</p>\n</blockquote>\n<pre><code class=\"language-bashj\">[root@CentOS-7 sbin]# ./nginx -s stop\n</code></pre>\n<blockquote>\n<p>5、重新加载 nginx</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 sbin<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./nginx -s reload</span></pre></td></tr></table></figure><h1 id=\"nginx配置文件\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置文件\">#</a> nginx 配置文件</h1>\n<h2 id=\"1-nginx配置文件位置\"><a class=\"markdownIt-Anchor\" href=\"#1-nginx配置文件位置\">#</a> 1、nginx 配置文件位置</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528202619737.png\" alt=\"image-20210528202619737\"></p>\n<h2 id=\"2-nginx配置文件组成\"><a class=\"markdownIt-Anchor\" href=\"#2-nginx配置文件组成\">#</a> 2、nginx 配置文件组成</h2>\n<p>（1）nginx 配置文件有三部分组成</p>\n<ul>\n<li>第一部分 全局块\n<ul>\n<li>从配置文件开始到 <code>events块</code> 之间的内容，主要会设置一些影响 nginx 服务器整体运行的配置指令</li>\n<li>比如 worker_processes 1；worker_processes 值越大，可以支持的并发处理量也越多</li>\n</ul>\n</li>\n<li>第二部分 events 块\n<ul>\n<li>events 块涉及的指令主要影响 nginx 服务器与用户的网络连接</li>\n<li>比如 worker_connections   1024; 支持的最大连接数为 1024</li>\n</ul>\n</li>\n<li>第三部分 http 块\n<ul>\n<li>nginx 服务器配置中最频繁的部分</li>\n<li>http 块也可以包括 http 全局块、server 块</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"nginx-配置实例反向代理\"><a class=\"markdownIt-Anchor\" href=\"#nginx-配置实例反向代理\">#</a> nginx 配置实例 =&gt; 反向代理</h1>\n<h2 id=\"1-实现效果\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果\">#</a> 1、实现效果</h2>\n<p>（1）打开浏览器，在浏览器地址栏输入地址 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMjMuY29t\">www.123.com</span>，跳转到 liunx 系统 tomcat 主页面中</p>\n<h2 id=\"2-准备工作\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作\">#</a> 2、准备工作</h2>\n<p>（1）在 liunx 系统安装 tomcat，使用默认端口 8080</p>\n<p>tomcat 安装文件放到 liunx 系统中，解压</p>\n<p>进入 tomcat 的 bin 目录中， <code>./startup.sh</code>  启动 tomcat 服务器</p>\n<p>（2）对外开放访问的端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --add-port<span class=\"token operator\">=</span><span class=\"token number\">8080</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>firewall-cmd --reload</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看已经开放的端口号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>firewall-cmd --list-all</pre></td></tr></table></figure><p>（3）在 windows 系统中通过浏览器访问 tomcat 服务器</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210132297.png\" alt=\"image-20210528210132297\"></p>\n<h2 id=\"3-访问过程的分析\"><a class=\"markdownIt-Anchor\" href=\"#3-访问过程的分析\">#</a> 3、访问过程的分析</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210228570.png\" alt=\"image-20210528210228570\"></p>\n<h2 id=\"4-具体配置\"><a class=\"markdownIt-Anchor\" href=\"#4-具体配置\">#</a> 4、具体配置</h2>\n<blockquote>\n<p>第一步 在 windows 系统的 host 文件进行域名和 ip 对应关系的配置</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210439297.png\" alt=\"image-20210528210439297\"></p>\n<p>继续访问 tomcat</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528210724394.png\" alt=\"image-20210528210724394\"></p>\n<blockquote>\n<p>第二步 在 nginx 进行请求转发的配置（反向代理配置）</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528211211559.png\" alt=\"image-20210528211211559\"></p>\n<h2 id=\"5-最终测试\"><a class=\"markdownIt-Anchor\" href=\"#5-最终测试\">#</a> 5、最终测试</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528211428444.png\" alt=\"image-20210528211428444\"></p>\n<h1 id=\"nginx反向代理实例2\"><a class=\"markdownIt-Anchor\" href=\"#nginx反向代理实例2\">#</a> nginx 反向代理实例 2</h1>\n<h2 id=\"1-实现效果-2\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果-2\">#</a> 1、实现效果</h2>\n<p>使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中</p>\n<p>nginx 监听端口为 9001</p>\n<p><mark>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvOjkwMDEvZWR1Lw==\">http://10.102.126.42/:9001/edu/</span> 直接跳转到 127.0.0.1:8080</mark></p>\n<p><mark>访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvOjkwMDEvdm9kLw==\">http://10.102.126.42/:9001/vod/</span> 直接跳转到 127.0.0.1:8081</mark></p>\n<h2 id=\"2-准备工作-2\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-2\">#</a> 2、准备工作</h2>\n<p>（1）准备两个 tomcat 服务器，一个 8080 端口，一个 8081 端口</p>\n<p>（2）创建文件夹和测试页面</p>\n<h2 id=\"3-具体配置\"><a class=\"markdownIt-Anchor\" href=\"#3-具体配置\">#</a> 3、具体配置</h2>\n<p>（1）找到 nginx 配置文件，进行反向代理配置</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528214716255.png\" alt=\"image-20210528214716255\"></p>\n<p>（2）开放对外访问的端口号：9001，8080，8081</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --add-port=9001/tcp --permanent</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>success</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --reload</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>success</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@CentOS-7 conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># firewall-cmd --list-all</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>public <span class=\"token punctuation\">(</span>active<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  target: default</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  icmp-block-inversion: no</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  interfaces: ens32</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  sources: </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  services: dhcpv6-client <span class=\"token function\">ssh</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  ports: <span class=\"token number\">80</span>/tcp <span class=\"token number\">8080</span>/tcp <span class=\"token number\">8081</span>/tcp <span class=\"token number\">9001</span>/tcp</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  protocols: </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  masquerade: no</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  forward-ports: </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  source-ports: </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  icmp-blocks: </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  rich rules:</pre></td></tr></table></figure><h2 id=\"4-最终测试\"><a class=\"markdownIt-Anchor\" href=\"#4-最终测试\">#</a> 4、最终测试</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215314155.png\" alt=\"image-20210528215314155\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215339564.png\" alt=\"image-20210528215339564\"></p>\n<h1 id=\"location指令说明\"><a class=\"markdownIt-Anchor\" href=\"#location指令说明\">#</a> location 指令说明</h1>\n<p>该指令用于匹配 URL</p>\n<p>语法如下：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528215626081.png\" alt=\"image-20210528215626081\"></p>\n<p>1、 <code>= </code> ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求。</p>\n<p>2、 <code>~</code> ：用于表示 uri 包含正则表达式，并且区分大小写。</p>\n<p>3、 <code>~*</code> ：用于表示 uri 包含正则表达式，并且不区分大小写。</p>\n<p>4、 <code>^~</code> ：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。</p>\n<p><mark>注意：如果 uri 包含正则表达式，则必须要有～或者～* 标识。</mark></p>\n<h1 id=\"nginx配置实例-负载均衡\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置实例-负载均衡\">#</a> nginx 配置实例 - 负载均衡</h1>\n<h2 id=\"1-实现效果-3\"><a class=\"markdownIt-Anchor\" href=\"#1-实现效果-3\">#</a> 1、实现效果</h2>\n<p>（1）浏览器地址栏输入地址 http://192.168.17.129/edu/a.html，负载均衡效果，平均 8080 和 8081 端口中</p>\n<h2 id=\"2-准备工作-3\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-3\">#</a> 2、准备工作</h2>\n<p>（1）准备两台 tomcat 服务器，一台 8080，一台 8081</p>\n<p>（2）在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建页面 a.html，用于测试</p>\n<h2 id=\"3-在nginx-的配置文件中进行负载均衡的配置\"><a class=\"markdownIt-Anchor\" href=\"#3-在nginx-的配置文件中进行负载均衡的配置\">#</a> 3、在 nginx 的配置文件中进行负载均衡的配置</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528221342515.png\" alt=\"image-20210528221342515\"></p>\n<h2 id=\"4-配置成功\"><a class=\"markdownIt-Anchor\" href=\"#4-配置成功\">#</a> 4、配置成功</h2>\n<p>测试，请求同一个路径，轮流地访问 8080，8081 两个服务器，即实现了负载均衡的效果</p>\n<h2 id=\"5-nginx负载均衡的策略\"><a class=\"markdownIt-Anchor\" href=\"#5-nginx负载均衡的策略\">#</a> 5、nginx 负载均衡的策略</h2>\n<h3 id=\"1-轮询默认\"><a class=\"markdownIt-Anchor\" href=\"#1-轮询默认\">#</a> 1、轮询（默认）</h3>\n<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除</p>\n<h3 id=\"2-weight\"><a class=\"markdownIt-Anchor\" href=\"#2-weight\">#</a> 2、weight</h3>\n<p>weight 代表权重，默认为 1，权重越高，被分配的客户端越多</p>\n<p>指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22 <span class=\"token assign-left variable\">weight</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-ip_hash\"><a class=\"markdownIt-Anchor\" href=\"#3-ip_hash\">#</a> 3、ip_hash</h3>\n<p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ip_hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-fair第三方\"><a class=\"markdownIt-Anchor\" href=\"#4-fair第三方\">#</a> 4、fair（第三方）</h3>\n<p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upstream server_pool<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.21:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server <span class=\"token number\">192.168</span>.5.22:80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fair<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"nginx配置实例-动静分离\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置实例-动静分离\">#</a> nginx 配置实例 - 动静分离</h1>\n<h2 id=\"1-什么是动静分离\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是动静分离\">#</a> 1、什么是动静分离</h2>\n<p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx 处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种：</p>\n<ul>\n<li>\n<p>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</p>\n</li>\n<li>\n<p>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528223635697.png\" alt=\"image-20210528223635697\"></p>\n<p>通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以设置浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间，没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p>\n<h2 id=\"2-准备工作-4\"><a class=\"markdownIt-Anchor\" href=\"#2-准备工作-4\">#</a> 2、准备工作</h2>\n<p>（1）在 linux 系统中准备静态资源，用于进行访问</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225532427.png\" alt=\"image-20210528225532427\"></p>\n<h2 id=\"3-具体配置-2\"><a class=\"markdownIt-Anchor\" href=\"#3-具体配置-2\">#</a> 3、具体配置</h2>\n<p>（1）在 nginx 配置文件中进行配置</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225736743.png\" alt=\"image-20210528225736743\"></p>\n<h2 id=\"4-最终测试-2\"><a class=\"markdownIt-Anchor\" href=\"#4-最终测试-2\">#</a> 4、最终测试</h2>\n<p>（1）浏览器输入地址：<span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvaW1hZ2UvMS5wbmc=\">http://10.102.126.42/image/1.png</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528225829853.png\" alt=\"image-20210528225829853\"></p>\n<p>直接输入地址 http://10.102.126.42/image/，可以将静态资源全部加载出来，== 注意最后一个 <code>/</code> ，就是 image 后面的 <code>/</code>  不能少，不然会出现 404</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529170620289.png\" alt=\"image-20210529170620289\"></p>\n<p>（2）浏览器输入：<span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIvd3d3L2EuaHRtbA==\">http://10.102.126.42/www/a.html</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210528230839058.png\" alt=\"image-20210528230839058\"></p>\n<h1 id=\"nginx配置高可用集群\"><a class=\"markdownIt-Anchor\" href=\"#nginx配置高可用集群\">#</a> nginx 配置高可用集群</h1>\n<h2 id=\"1-什么是nginx高可用\"><a class=\"markdownIt-Anchor\" href=\"#1-什么是nginx高可用\">#</a> 1、什么是 nginx 高可用</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529195702822.png\" alt=\"image-20210529195702822\"></p>\n<p>（1）需要两台 nginx 服务器</p>\n<p>（2）需要 keepalived</p>\n<p>（3）需要虚拟 ip 地址</p>\n<h2 id=\"2-配置高可用的准备工作\"><a class=\"markdownIt-Anchor\" href=\"#2-配置高可用的准备工作\">#</a> 2、配置高可用的准备工作</h2>\n<p>（1）需要配置两台服务器 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNDIv\">http://10.102.126.42/</span> 和 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi42OC43Ni8=\">http://10.102.68.76/</span></p>\n<p>（2）在两台服务器安装 nginx</p>\n<p>（3）在两台服务器安装 keepalived</p>\n<h2 id=\"3-在两台服务器安装keepalived\"><a class=\"markdownIt-Anchor\" href=\"#3-在两台服务器安装keepalived\">#</a> 3、在两台服务器安装 keepalived</h2>\n<p>（1）使用 yum 命令进行安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> keepalived -y</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -q -a keepalived\t<span class=\"token comment\"># 查看 keepalived 是否安装</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203452428.png\" alt=\"image-20210529203452428\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203544568.png\" alt=\"image-20210529203544568\"></p>\n<p><mark>在这步操作中可能会出现一下问题</mark></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Error downloading packages:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  keepalived-1.3.5-19.el7.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">1</span>:net-snmp-libs-5.7.2-49.el7_9.1.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">1</span>:net-snmp-agent-libs-5.7.2-49.el7_9.1.x86_64: <span class=\"token punctuation\">[</span>Errno <span class=\"token number\">256</span><span class=\"token punctuation\">]</span> No <span class=\"token function\">more</span> mirrors to try.</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529203728931.png\" alt=\"image-20210529203728931\"></p>\n<p>出现这种情况百度的话是这种办法</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529204055515.png\" alt=\"image-20210529204055515\"></p>\n<p><mark>但我觉得首先应该检查自己的虚拟机是否是联网状态，即 ping 百度看能不能 ping 通，如果虚拟机没有联网是没办法通过 yum 命令安装的</mark></p>\n<p>我就是通过虚拟机联网解决了</p>\n<p>（2）安装之后，在 etc 里面生成目录 keepalived，有文件  <code>keepalived.conf</code></p>\n<h2 id=\"4-完成高可用配置主从配置\"><a class=\"markdownIt-Anchor\" href=\"#4-完成高可用配置主从配置\">#</a> 4、完成高可用配置（主从配置）</h2>\n<p>（1）修改 <code>/etc/keepalived/keepalived.conf</code>  配置文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>global_defs <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tnotification_email <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tacassen@firewall.loc</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tfailover@firewall.loc</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tsysadmin@firewall.loc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tnotification_email_from Alexandre.Cassen@firewall.loc</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tsmtp_server <span class=\"token number\">10.102</span>.126.42</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tsmtp_connect_timeout <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\trouter_id LVS_DEVEL <span class=\"token comment\"># 访问到主机，这是主机的名字，和 localhost 差不多的意思</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>vrrp_script chk_http_port <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tscript <span class=\"token string\">\"/usr/local/src/nginx_check.sh\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tinterval <span class=\"token number\">2</span> <span class=\"token comment\">#（检测脚本执行的间隔）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tweight <span class=\"token number\">2</span> <span class=\"token comment\"># 权重</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>vrrp_instance VI_1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tstate BACKUP <span class=\"token comment\"># 备份服务器上将 MASTER 改为 BACKUP</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tinterface ens32 //网卡</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tvirtual_router_id <span class=\"token number\">51</span> <span class=\"token comment\"># 主、备机的 virtual_router_id 必须相同</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tpriority <span class=\"token number\">90</span> <span class=\"token comment\"># 主、备机取不同的优先级，主机值较大，备份机值较小</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tadvert_int <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tauthentication <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tauth_type PASS</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tauth_pass <span class=\"token number\">1111</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tvirtual_ipaddress <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token number\">10.102</span>.126.50 <span class=\"token comment\"># VRRP H 虚拟地址</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）在 <code>/usr/local/src</code>  添加检测脚本</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx –-no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$A</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t/usr/local/nginx/sbin/nginx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">sleep</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ps</span> -C nginx --no-header <span class=\"token operator\">|</span><span class=\"token function\">wc</span> -l<span class=\"token variable\">`</span></span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token function\">killall</span> keepalived</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p><mark>注意这里两台服务器都要配置</mark></p>\n<p>（3）把两台服务器上 nginx 和 keepalived 启动</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 nginx</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./nginx</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 启动 keepalived</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl start keepalived.service</pre></td></tr></table></figure><h2 id=\"5-最终测试-2\"><a class=\"markdownIt-Anchor\" href=\"#5-最终测试-2\">#</a> 5、最终测试</h2>\n<p>（1）在浏览器地址栏输入 虚拟 ip 地址 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNTAv\">http://10.102.126.50/</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529220108249.png\" alt=\"image-20210529220108249\"></p>\n<p>可以看到服务器已经绑定了虚拟 ip</p>\n<p>（2）把主服务器（10.102.126.50）nginx 和 keepalived 停止，再输入 <span class=\"exturl\" data-url=\"aHR0cDovLzEwLjEwMi4xMjYuNTAv\">http://10.102.126.50/</span></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529223105940.png\" alt=\"image-20210529223105940\"></p>\n<p><mark>依旧能进行访问</mark>，说明此时集群搭建成功</p>\n<p>可以看到备份服务器也绑定了虚拟 ip</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529223435351.png\" alt=\"image-20210529223435351\"></p>\n<h1 id=\"nginx的原理\"><a class=\"markdownIt-Anchor\" href=\"#nginx的原理\">#</a> nginx 的原理</h1>\n<h2 id=\"1-master-和-worker\"><a class=\"markdownIt-Anchor\" href=\"#1-master-和-worker\">#</a> 1、master 和 worker</h2>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529225621258.png\" alt=\"image-20210529225621258\"></p>\n<h2 id=\"2-worker-如何进行工作的\"><a class=\"markdownIt-Anchor\" href=\"#2-worker-如何进行工作的\">#</a> 2、worker 如何进行工作的</h2>\n<p>每一个 worker 都会争抢请求，争抢到请求则执行。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/nginx/image-20210529225650761.png\" alt=\"image-20210529225650761\"></p>\n<h2 id=\"3-一个master和多个worker有什么好处\"><a class=\"markdownIt-Anchor\" href=\"#3-一个master和多个worker有什么好处\">#</a> 3、一个 master 和多个 worker 有什么好处</h2>\n<p>（1）可以使用 nginx –s reload 热部署，利用 nginx 进行热部署操作</p>\n<p>例如，当其中一个 worker 在执行请求的时候，其他的三个 worker 进行更新，然后可以继续争抢请求，此时还有一个 worker 没有更新热部署，当执行完任务就会进行热部署更新。</p>\n<p>（2）每个 woker 是独立的进程，如果有其中的一个 woker 出现问题，其他 woker 独立的，继续进行争抢，实现请求过程，不会造成服务中断</p>\n<h2 id=\"4-设置多少个worker合适\"><a class=\"markdownIt-Anchor\" href=\"#4-设置多少个worker合适\">#</a> 4、设置多少个 worker 合适</h2>\n<p>worker 数和服务器的 cpu 数相等是最为适宜的</p>\n<h2 id=\"5-连接数-worker_connection\"><a class=\"markdownIt-Anchor\" href=\"#5-连接数-worker_connection\">#</a> 5、连接数 worker_connection</h2>\n<p><mark>第一个：发送请求，占用了 worker 的几个连接数？</mark></p>\n<p>答案：2 个或者是 4 个，因为当客户端通过 nginx 请求静态资源的时候，此时 nginx 连接请求，并返回数据，此时连接数为 2 个。当客户端通过 nginx 请求后端，例如访问数据库的时候就需要连接 tomcat，此时还要返回数据，就有 4 个连接数。</p>\n<p><mark>第二个：nginx 有一个 master，有四个 worker，每个 worker 支持最大的连接数 1024. 那么支持的最大并发数是多少？</mark></p>\n<p><code>普通的静态访问最大并发数是：worker_connections \\* worker_processes /2</code></p>\n<p><code>而如果是 HTTP 作 为反向代理来说，最大并发数量应该是 worker_connections \\* worker_processes/4。</code></p>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "http://example.com/Linux/",
            "url": "http://example.com/Linux/",
            "title": "Linux初步学习",
            "date_published": "2021-05-13T08:30:03.000Z",
            "content_html": "<span id=\"more\"></span>\n<h1 id=\"linux学习日志\"><a class=\"markdownIt-Anchor\" href=\"#linux学习日志\">#</a> Linux 学习日志</h1>\n<h2 id=\"学习相关资料和技术文档\"><a class=\"markdownIt-Anchor\" href=\"#学习相关资料和技术文档\">#</a> 学习相关资料和技术文档</h2>\n<p>csdn 博主笔记：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mi9hcnRpY2xlL2xpc3QvMQ==\">https://blog.csdn.net/su2231595742/article/list/1</span></p>\n<p>linux 狂神说学习笔记：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mi9hcnRpY2xlL2RldGFpbHMvMTEyNDcyNzk2\">https://blog.csdn.net/su2231595742/article/details/112472796</span></p>\n<p>linux 安装在 VMwear 教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWUvYXJ0aWNsZS9kZXRhaWxzLzgwOTcwNTI2\">https://blog.csdn.net/babyxue/article/details/80970526</span></p>\n<h2 id=\"1入门概述\"><a class=\"markdownIt-Anchor\" href=\"#1入门概述\">#</a> 1. 入门概述</h2>\n<h3 id=\"11-我们为什么要学习linux\"><a class=\"markdownIt-Anchor\" href=\"#11-我们为什么要学习linux\">#</a> 1.1、我们为什么要学习 Linux</h3>\n<p>linux 诞生了这么多年，以前还喊着如何能取代 windows 系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p>\n<p>用习惯了 windows 操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着 linux 就没有用武之地了。在服务器端，在开发领域 linux 倒是越来越受欢迎，很多程序员都觉得不懂点 linux 都觉得不好意思，linux 在开源社区的地位依然岿然不动。</p>\n<p>尤其是作为一个后端程序员，是必须要掌握 Linux 的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p>\n<h3 id=\"12-linux-简介\"><a class=\"markdownIt-Anchor\" href=\"#12-linux-简介\">#</a> 1.2、Linux 简介</h3>\n<p>Linux 内核最初只是由芬兰人林纳斯・托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p>\n<p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p>\n<p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<h3 id=\"13-linux-发行版\"><a class=\"markdownIt-Anchor\" href=\"#13-linux-发行版\">#</a> 1.3、Linux 发行版</h3>\n<p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p>\n<p>Kali linux：安全渗透测试使用！（有兴趣做安全的同学可以了解一下！）</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/2020122020104278-1620716275522-1620716316198.png\" alt=\"linux图片\"></p>\n<p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20201220201119647.png\" alt=\"linux图片\"></p>\n<h3 id=\"14-linux-应用领域\"><a class=\"markdownIt-Anchor\" href=\"#14-linux-应用领域\">#</a> 1.4、Linux 应用领域</h3>\n<p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL +PHP）组合。</p>\n<p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p>\n<ul>\n<li>巴西联邦政府由于支持 Linux 而世界闻名。</li>\n<li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li>\n<li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li>\n<li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li>\n<li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li>\n<li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li>\n<li>法国和德国同样开始逐步采用 Linux。</li>\n</ul>\n<p>只要学不死，就往死里学</p>\n<h3 id=\"15-linux-vs-windows\"><a class=\"markdownIt-Anchor\" href=\"#15-linux-vs-windows\">#</a> 1.5、Linux vs Windows</h3>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20201220202154232.png\" alt=\"linux图片\"></p>\n<h2 id=\"2-环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#2-环境搭建\">#</a> 2、环境搭建</h2>\n<p>Linux 的安装，安装步骤比较繁琐（操作系统本身也是一个软件），现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！</p>\n<h3 id=\"21-安装centos-在本地安装这个不太建议如果没有经济来源的话可以考虑在本地搭建\"><a class=\"markdownIt-Anchor\" href=\"#21-安装centos-在本地安装这个不太建议如果没有经济来源的话可以考虑在本地搭建\">#</a> 2.1、安装 CentOS （在本地安装，这个不太建议，如果没有经济来源的话，可以考虑在本地搭建）</h3>\n<p>Linux 是一个操作系统，你也可以把自己电脑安装成双系统！</p>\n<p>虚拟机（VMware 下载（收费的，注册码！）</p>\n<p>下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudm13YXJlLmNvbS9jbi9wcm9kdWN0cy93b3Jrc3RhdGlvbi1wcm8vd29ya3N0YXRpb24tcHJvLWV2YWx1YXRpb24uaHRtbA==\">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</span></p>\n<p>官网下载：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20201222145631600.png\" alt=\"linux图片\"></p>\n<p>安装完成后打开软件有如下界面：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511152938944.png\" alt=\"image-20210511152938944\"></p>\n<p>在虚拟机上安装 CentOS7</p>\n<p>1、可以通过镜像进行安装！ 下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9jZW50b3MvNy9pc29zL3g4Nl82NC8lRUYlQkMlOEMlRTQlQjglOEIlRTglQkQlQkQlRTUlQUUlOEMlRTYlODglOTAlRTUlOTAlOEUlRTUlQUUlODklRTglQTMlODUlRTUlOEQlQjMlRTUlOEYlQUYlRUYlQkMlODElRTUlQUUlODklRTglQTMlODUlRTYlOTMlOEQlRTQlQkQlOUMlRTclQjMlQkIlRTclQkIlOUYlRTUlOTIlOEMlRTUlQUUlODklRTglQTMlODUlRTglQkQlQUYlRTQlQkIlQjYlRTYlOTglQUYlRTQlQjglODAlRTYlQTAlQjclRTclOUElODQlRUYlQkMlOEMlRTYlQjMlQTglRTYlODQlOEYlRUYlQkMlOUFMaW51eCVFNyVBMyU4MSVFNyU5QiU5OCVFNSU4OCU4NiVFNSU4QyVCQSVFNyU5QSU4NCVFNiU5NyVCNiVFNSU4MCU5OSVFOSU5QyU4MCVFOCVBNiU4MSVFNiVCMyVBOCVFNiU4NCU4RiVFNSU4OCU4NiVFNSU4QyVCQSVFNSU5MCU4RCVFNSU4RCVCMyVFNSU4RiVBRiVFRiVCQyU4MS9ib290\">http://mirrors.aliyun.com/centos/7/isos/x86_64/，下载完成后安装即可！安装操作系统和安装软件是一样的，注意：Linux 磁盘分区的时候需要注意分区名即可！/boot</span> /home!</p>\n<p>2、下载 CentOS 镜像</p>\n<p>CentOS 镜像：<span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9jZW50b3MvNy9pc29zL3g4Nl82NC8=\">http://mirrors.aliyun.com/centos/7/isos/x86_64/</span></p>\n<p>安装教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzE0NjAzL2FydGljbGUvZGV0YWlscy84ODgyOTQyMw==\">https://blog.csdn.net/qq_44714603/article/details/88829423</span></p>\n<p>3、安装 VMware 虚拟机软件，然后打开我们的镜像即可使用！</p>\n<p>打开后的样子：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511165844058.png\" alt=\"image-20210511165844058\"></p>\n<p>VMware 的使用方式：</p>\n<p>点击屏幕进入虚拟机、Ctrl + Alt 将聚焦退出虚拟机！</p>\n<p>开机后的页面：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511165753148.png\" alt=\"image-20210511165753148\"></p>\n<p>大家下载完毕后，可以安装系统，然后根据我们的账号密码，来自己测试登录！</p>\n<p>那我们的本地 Linux 环境就准备好了！</p>\n<h3 id=\"22-购买云服务器有经济来源的话可以购买阿里云服务器因为这才是最近接公司中原生环境的\"><a class=\"markdownIt-Anchor\" href=\"#22-购买云服务器有经济来源的话可以购买阿里云服务器因为这才是最近接公司中原生环境的\">#</a> 2.2、购买云服务器（有经济来源的话，可以购买阿里云服务器，因为这才是最近接公司中原生环境的！）</h3>\n<p>云服务器就是一个远程电脑，服务器一般不会关机！</p>\n<p>虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作；</p>\n<p>1、阿里云购买服务器：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzc1MjI0Mz9zcG09YTJjNmguMTM4MTMwMTcuMC5kQXJ0aWNsZTczODYzOC41YWI0MWQzY0JybGFGeg==\">https://developer.aliyun.com/article/752243?spm=a2c6h.13813017.0.dArticle738638.5ab41d3cBrlaFz</span><br>\n2、购买完毕后，获取服务器的 ip 地址，重置服务器密码，就可以远程登录了</p>\n<p>获取公网 IP 地址！<br>\n修改自己的登录密码</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511172159160.png\" alt=\"image-20210511172159160\"></p>\n<p>3、下载 xShell 远程连接工具 22，进行远程连接使用！建议使用 360 一键下载！还需要下载一个 xFtp 文件上传 21！</p>\n<p>下载完毕后，直接打开即可！<br>\n4、使用 Xshell 连接远程服务器！~</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511172321130.png\" alt=\"image-20210511172321130\"></p>\n<p>登录用户名和密码之后，登录成功就是如下界面：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511172336530.png\" alt=\"image-20210511172336530\"></p>\n<p>这里就是我们的 Linux 操作系统了！以后的操作都在这里操作，项目也在这里进行发布！</p>\n<p>Ctrl + 鼠标滚轮，放大和缩小字体！<br>\n上传文件使用 xftp 即可！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511172401519.png\" alt=\"image-20210511172401519\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511172544737.png\" alt=\"image-20210511172544737\"></p>\n<p>Tomcat 需要 Java 环境！我们后会按照 JDK，到时候再测试吧，先学基本的 Linux 命令为主！<br>\n远程环境安装！</p>\n<p>注意事项：</p>\n<p>如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！</p>\n<p>如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器</p>\n<p>安装教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYnQuY24vYmJzL3RocmVhZC0xOTM3Ni0xLTEuaHRtbA==\">https://www.bt.cn/bbs/thread-19376-1-1.html</span></p>\n<p>1、开启对应的端口<br>\n 2、一键安装<br>\n 3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了<br>\n 4、登录之后就可以可视化的安装环境和部署网站！</p>\n<p><strong>关于域名</strong></p>\n<p>如果自己的网站想要上线，就一定要购买一个域名然后进行备案；</p>\n<p>备案的话需要一些认证和时间，备完完毕后，就可以解析到自己的网站了，这个时候就可以使用域名来进行服务器的访问</p>\n<h2 id=\"3-走近linux系统\"><a class=\"markdownIt-Anchor\" href=\"#3-走近linux系统\">#</a> 3、走近 Linux 系统</h2>\n<h3 id=\"31-开机登录\"><a class=\"markdownIt-Anchor\" href=\"#31-开机登录\">#</a> 3.1、开机登录</h3>\n<p>开机会启动许多程序。它们在 Windows 叫做 &quot;服务&quot;（service），在 Linux 就叫做 &quot;守护进程&quot;（daemon）。</p>\n<p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给 login 程序来验证用户的身份，密码是不显示的，输完回车即可！</p>\n<p>一般来说，用户的登录方式有三种：</p>\n<p>命令行登录<br>\n ssh 登录<br>\n图形界面登录<br>\n最高权限账户为 root，可以操作一切！</p>\n<h3 id=\"32-关机\"><a class=\"markdownIt-Anchor\" href=\"#32-关机\">#</a> 3.2、关机</h3>\n<p>在 linux 领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p>\n<p>关机指令为：shutdown ；</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/2021011521440482.png\" alt=\"linux图片\"></p>\n<pre><code>sync # 将数据由内存同步到硬盘中。\nshutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：\nshutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机\nshutdown –h now # 立马关机\nshutdown –h 20:25 # 系统会在今天20:25关机\nshutdown –h +10 # 十分钟后关机\nshutdown –r now # 系统立马重启\nshutdown –r +10 # 系统十分钟后重启\nreboot # 就是重启，等同于 shutdown –r now\nhalt # 关闭系统，等同于shutdown –h now 和 poweroff\n</code></pre>\n<p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</p>\n<h3 id=\"33-系统目录结构\"><a class=\"markdownIt-Anchor\" href=\"#33-系统目录结构\">#</a> 3.3、系统目录结构</h3>\n<p>1、一切皆文件<br>\n 2、根目录 / ，所有的文件都挂载在这个节点下</p>\n<p>登录系统后，在当前命令窗口下输入命令：</p>\n<pre><code>ls /\n</code></pre>\n<p>你会看到如下图所示：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511182042029.png\" alt=\"image-20210511182042029\"></p>\n<p>树状目录结构：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20210115214450337.png\" alt=\"linux图片\"></p>\n<p>以下是对这些目录的解释：</p>\n<ul>\n<li><strong>/bin：</strong> bin 是 Binary 的缩写，这个目录存 放着最经常使用的命令。</li>\n<li><strong>/boot：</strong> 这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。（不要动）</li>\n<li><strong>/dev ：</strong> dev 是 Device (设备) 的缩写，存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li>\n<li><mark><strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</mark></li>\n<li><mark>**/home：** 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</mark></li>\n<li><strong>/lib：</strong> 这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。（不要动）</li>\n<li><strong>/lost+found：</strong> 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（存放突然关机的一些文件）</li>\n<li>**/media：**linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</li>\n<li>**/mnt：** 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。（我们后面会把一些本地文件挂载在这个目录下）</li>\n<li><mark>**/opt：** 这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。</mark></li>\n<li><strong>/proc：</strong> 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。（不用管）</li>\n<li><mark>**/root：** 该目录为系统管理员，也称作超级权限者的用户主目录。</mark></li>\n<li>**/sbin：**s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</li>\n<li>/srv：该目录存放一些服务启动之后需要提取的数据。/sys：这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</li>\n<li><mark>**/tmp：** 这个目录是用来存放一些临时文件的。用完即丢的文件，可以放在这个目录下，安装包！</mark></li>\n<li><mark>**/usr：<strong>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</strong></mark></li>\n<li><strong>/usr/bin：</strong> 系统用户使用的应用程序。</li>\n<li><strong>/usr/sbin：</strong> 超级用户使用的比较高级的管理程序和系统守护程序。Super</li>\n<li><strong>/usr/src：</strong> 内核源代码默认的放置目录。</li>\n<li><mark>**/var：** 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</mark></li>\n<li>**/run：** 是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li>\n<li><mark>**/www：** 存放服务器网站相关的资源，环境，网站的项目</mark></li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20210115214514601.png\" alt=\"linux图片\"></p>\n<h2 id=\"4-常用基本命令\"><a class=\"markdownIt-Anchor\" href=\"#4-常用基本命令\">#</a> 4、常用基本命令</h2>\n<h3 id=\"41-目录管理\"><a class=\"markdownIt-Anchor\" href=\"#41-目录管理\">#</a> 4.1、目录管理</h3>\n<h4 id=\"411-绝对路径-相对路径\"><a class=\"markdownIt-Anchor\" href=\"#411-绝对路径-相对路径\">#</a> 4.1.1、绝对路径、相对路径</h4>\n<p>绝对路径路径的全称：C:\\ProgramData\\360safe\\xxx.xx</p>\n<p>比如说 360safe 目录下，那这个 xxx.xx 文件，对应我们的相对配置就 /xxx.xx</p>\n<p>cd ： 切换目录命令！<br>\n./ ： 当前目录<br>\n cd … ： 返回上一级目录（cd 英文句号打两个）</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511183802095.png\" alt=\"image-20210511183802095\"></p>\n<h4 id=\"412-ls-列出目录\"><a class=\"markdownIt-Anchor\" href=\"#412-ls-列出目录\">#</a> 4.1.2、ls （列出目录！）</h4>\n<p>在 Linux 中 ls 可能是最常常被使用的！</p>\n<p>-a 参数：all ，查看全部的文件，包括隐藏文件<br>\n - l 参数 列出所有的文件，包含文件的属性和权限，没有隐藏文件<br>\n所有 Linux 可以组合使用！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511204512682.png\" alt=\"image-20210511204512682\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511204524263.png\" alt=\"image-20210511204524263\"></p>\n<h4 id=\"413-cd-命令-切换目录\"><a class=\"markdownIt-Anchor\" href=\"#413-cd-命令-切换目录\">#</a> 4.1.3、cd 命令 切换目录</h4>\n<p>cd 目录名（绝对路径都是以 / 开头，相对路径，对于当前目录该如何寻找 …/…/）</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511205045064.png\" alt=\"image-20210511205045064\"></p>\n<p>大家只要多尝试使用，就会了！</p>\n<blockquote>\n<p>pwd 显示当前用户所在的目录</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511205352362.png\" alt=\"image-20210511205352362\"></p>\n<h4 id=\"414-mkdir-创建目录\"><a class=\"markdownIt-Anchor\" href=\"#414-mkdir-创建目录\">#</a> 4.1.4、mkdir 创建目录</h4>\n<p>mkdir xxx ： 创建目录<br>\n mkdir -p test2/test3/test4： 创建多级目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test1 # 创建目录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>admin  lloam  lloamstudy  test1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd test1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ test1<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ..</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir test2/test3/test4 #创建多级目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>mkdir: cannot create directory ‘test2/test3/test4’: No such <span class=\"token function\">file</span> or directory</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir -p test2/test3/test4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>admin  lloam  lloamstudy  test1  test2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd test2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ test2<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>test3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ test2<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd test3</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ test3<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>test4</pre></td></tr></table></figure><h4 id=\"415-rmdir-删除目录\"><a class=\"markdownIt-Anchor\" href=\"#415-rmdir-删除目录\">#</a> 4.1.5、rmdir 删除目录</h4>\n<p>rmdir xxx ： 删除不为空的目录<br>\n rmdir -p test2/test3/test4 ：强制删除目录</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ test3<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /home</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>admin  lloam  lloamstudy  test1  test2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir test1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>admin  lloam  lloamstudy  test2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir test2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rmdir: failed to remove ‘test2’: Directory not empty</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># rmdir -p test2/test3/test4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>admin  lloam  lloamstudy</pre></td></tr></table></figure><p>rmdir 仅能删除空的目录，如果下面存在文件，需要先删除文件，递归删除多个目录 -p 参数即可</p>\n<h4 id=\"416-cp-复制文件目录\"><a class=\"markdownIt-Anchor\" href=\"#416-cp-复制文件目录\">#</a> 4.1.6、cp 复制文件目录</h4>\n<p>cp 原来的地方 新的地方<br>\n如果文件重复，就选择覆盖（y）或者 放弃（n）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin  lloam  lloamstudy  PAD.png</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># clear</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>admin  lloam  lloamstudy  PAD.png</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp PAD.png lloamstudy # 拷贝文件至目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>admin  lloam  lloamstudy  PAD.png</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd lloamstudy</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>PAD.png</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ..</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp PAD.png lloamstudy # 如果文件重复，就选择覆盖（y）或者放弃（n）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>cp: overwrite ‘lloamstudy/PAD.png’? y</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><h4 id=\"417-rm-移除文件目录\"><a class=\"markdownIt-Anchor\" href=\"#417-rm-移除文件目录\">#</a> 4.1.7、rm 移除文件目录</h4>\n<p>-f 忽略不存在的文件，不会出现警告，强制删除！<br>\n-r 递归删除目录！<br>\n-i 互动，删除询问是否删除</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> -rf / <span class=\"token comment\"># 系统中所有的文件就被删除了，删库跑路就是这么操作的！</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>PAD.png</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># rm -rf PAD.png </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr></table></figure><h4 id=\"418-mv-移动文件或者目录\"><a class=\"markdownIt-Anchor\" href=\"#418-mv-移动文件或者目录\">#</a> 4.1.8、mv 移动文件或者目录</h4>\n<p>还可以重命名文件夹</p>\n<p>-f 强制<br>\n - u 只替换已经更新过的文件<br>\n mv <span class=\"exturl\" data-url=\"aHR0cDovL2luc3RhbGwuc2g=\">install.sh</span> kuangstudy    移动文件<br>\n mv kuangstudy kuangstudy2   重命名文件夹</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin  lloam  lloamstudy  PAD.png</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv PAD.png lloamstudy # 移动文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>admin  lloam  lloamstudy</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd lloamstudy</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>PAD.png</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ lloamstudy<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd ..</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>admin  lloam  lloamstudy</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv lloamstudy lloamstudy2 # 重命名文件夹</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>admin  lloam  lloamstudy2</pre></td></tr></table></figure><h3 id=\"42-基本属性\"><a class=\"markdownIt-Anchor\" href=\"#42-基本属性\">#</a> 4.2、基本属性</h3>\n<p>十个字母 ；1 类型</p>\n<h4 id=\"421-看懂文件属性\"><a class=\"markdownIt-Anchor\" href=\"#421-看懂文件属性\">#</a> 4.2.1、看懂文件属性</h4>\n<p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p>\n<p>在 Linux 中我们可以使用  <code>ll </code> 或者 <code>ls –l</code>  命令来显示一个文件的属性以及文件所属的用户和组，如：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511211750553.png\" alt=\"image-20210511211750553\"></p>\n<p>实例中，root 文件的第一个属性用 &quot;d&quot; 表示。&quot;d&quot; 在 Linux 中代表该文件是一个目录文件。</p>\n<p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等：</p>\n<ul>\n<li>\n<p><mark>当为 [d] 则是目录</mark></p>\n</li>\n<li>\n<p><mark>当为 [-] 则是文件；</mark></p>\n</li>\n<li>\n<p><mark>若是 [l] 则表示为链接文档 ( link file )；</mark></p>\n</li>\n<li>\n<p>若是 [b] 则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</p>\n</li>\n<li>\n<p>若是 [c] 则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</p>\n<p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p>\n</li>\n</ul>\n<p>其中，[r] 代表可读 (read)、[ w ] 代表可写 (write)、[ x ] 代表可执行 (execute)。</p>\n<p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 [-] 而已。</p>\n<p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20210115223324226.png\" alt=\"linux图片\"></p>\n<p>从左至右用 0-9 这些数字来表示。</p>\n<p>第 0 位确定文件类型，第 1-3 位确定属主（该文件的所有者）拥有该文件的权限。第 4-6 位确定属组（所有者的同组用户）拥有该文件的权限，第 7-9 位确定其他用户拥有该文件的权限。</p>\n<p>其中：</p>\n<p>第 1、4、7 位表示读权限，如果用 &quot;r&quot; 字符表示，则有读权限，如果用 &quot;-“字符表示，则没有读权限；<br>\n第 2、5、8 位表示写权限，如果用 &quot;w&quot; 字符表示，则有写权限，如果用”-“字符表示没有写权限；<br>\n第 3、6、9 位表示可执行权限，如果用 &quot;x&quot; 字符表示，则有执行权限，如果用”-&quot; 字符表示，则没有执行权<br>\n限。<br>\n对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p>\n<p>同时，在 Linux 系统中，用户是按组分类的，一个用户属于一个或多个组。</p>\n<p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p>\n<p>因此，Linux 系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p>\n<p>在以上实例中，test 文件是一个目录文件，属主和属组都为 root。</p>\n<h4 id=\"422-修改文件属性\"><a class=\"markdownIt-Anchor\" href=\"#422-修改文件属性\">#</a> 4.2.2、修改文件属性</h4>\n<p><strong>1、chgrp：更改文件属组</strong></p>\n<pre><code>chgrp [-R] 属组名 文件名\n</code></pre>\n<p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上 - R 的参数，那么该目录下的所有文件的属组都会更改。</p>\n<p>2、chown：更改文件属主，也可以同时更改文件属组</p>\n<pre><code>chown [–R] 属主名 文件名\nchown [-R] 属主名：属组名 文件名\n</code></pre>\n<p>3、chmod：更改文件 9 个属性（必须要掌握）</p>\n<p>你没有权限操作此文件！</p>\n<pre><code>chmod [-R] xyz 文件或目录\n</code></pre>\n<p>Linux 文件属性有两种设置方法，一种是数字（常用的是数字），一种是符号。</p>\n<p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。</p>\n<p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p>\n<pre><code>r:4    w:2    x:1\n\n可读可写不可执行 rw-   6\n可读可写不课执行 rwx   7\n\nchomd  777  文件赋予所有用户可读可写可执行！\n</code></pre>\n<p>每种身份 (owner/group/others) 各自的三个权限 (r/w/x) 分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p>\n<p>owner = rwx = 4+2+1 = 7<br>\ngroup = rwx = 4+2+1 = 7<br>\nothers= — = 0+0+0 = 0</p>\n<pre><code>chmod 770 filename\n</code></pre>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511213406298.png\" alt=\"image-20210511213406298\"></p>\n<h4 id=\"423-文件内容查看\"><a class=\"markdownIt-Anchor\" href=\"#423-文件内容查看\">#</a> 4.2.3、文件内容查看</h4>\n<p>我们会经常使用到文件查看！</p>\n<p>Linux 系统中使用以下命令来查看文件的内容：</p>\n<ul>\n<li>\n<p>cat 由第一行开始显示文件内容，用来读文章，或者读取配置文件啊，都使用 cat 命令</p>\n</li>\n<li>\n<p>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511214200930.png\" alt=\"image-20210511214200930\"></p>\n<ul>\n<li>nl 显示的时候，顺道输出行号！ 看代码的时候，希望显示行号！ 常用</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511214354825.png\" alt=\"image-20210511214354825\"></p>\n<ul>\n<li>\n<p>more 一页一页的显示文件内容，带余下内容的（空格代表翻页，enter 代表向下看一行， :f 行号）</p>\n</li>\n<li>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511214600741.png\" alt=\"image-20210511214600741\"></p>\n</li>\n<li>\n<p>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！ （空格下翻页，pageDown，pageUp 键代表翻动页面！退出 q 命令，查找字符串 ：/ 要查询的字符向下查询，向上查询使用：？要查询的字符串，nN 继续搜寻下一个，n 向上寻找！）</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511215159933.png\" alt=\"image-20210511215159933\"></p>\n<ul>\n<li>head 只看头几行 通过 -n 参数来控制显示几行！</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511214941992.png\" alt=\"image-20210511214941992\"></p>\n<ul>\n<li>tail 只看尾巴几行 -n 参数 要查看几行！</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511215023267.png\" alt=\"image-20210511215023267\"></p>\n<p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。</p>\n<p>网络配置目录：cd /etc/sysconfig/network-scripts</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511213842724.png\" alt=\"image-20210511213842724\"></p>\n<p>ifconfig 命令查看网络配置！</p>\n<h4 id=\"424-linux-链接\"><a class=\"markdownIt-Anchor\" href=\"#424-linux-链接\">#</a> 4.2.4、Linux 链接</h4>\n<p><strong>拓展：Linux 链接的概念（了解即可！）</strong></p>\n<p>Linux 的链接分为两种：硬链接、软链接！</p>\n<p>** 硬链接：**A—B，假设 B 是 A 的硬链接，那么他们两个指向了同一个文件！允许一个文件拥有多个路径，用户可以通过这种机制建立硬链接到一些重要文件上，防止误删！</p>\n<p><strong>软链接</strong>： 类似 Window 下的快捷方式，删除的源文件，快捷方式也访问不了！</p>\n<p><code>创建连接 ln 命令！</code></p>\n<p><code>touch</code>  命令创建文件！</p>\n<p><code>echo</code>  输入字符串，也可以输入到文件中！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># touch f1 # 创建一个 f1 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>admin  f1  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ln f1 f2 # 创建一个硬链接 f2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>admin  f1  f2  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ln -s f1 f3 # 创建一个软连接 f3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>admin  f1  f2  f3  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>total <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>drwx------ <span class=\"token number\">3</span> admin admin <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">16</span>:06 admin</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>-rw-r--r-- <span class=\"token number\">2</span> root  root     <span class=\"token number\">0</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:01 f1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>-rw-r--r-- <span class=\"token number\">2</span> root  root     <span class=\"token number\">0</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:01 f2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>lrwxrwxrwx <span class=\"token number\">1</span> root  root     <span class=\"token number\">2</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:02 f3 -<span class=\"token operator\">></span> f1</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root  root  <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">18</span>:26 lloam</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root  root  <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">21</span>:11 lloamstudy2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo \"i lova mao\" >>f1 #给 f1 文件中写入一些字符串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>admin  f1  f2  f3  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># clear</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>total <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>drwx------ <span class=\"token number\">3</span> admin admin <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">16</span>:06 admin</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>-rw-r--r-- <span class=\"token number\">2</span> root  root    <span class=\"token number\">11</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:03 f1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>-rw-r--r-- <span class=\"token number\">2</span> root  root    <span class=\"token number\">11</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:03 f2</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>lrwxrwxrwx <span class=\"token number\">1</span> root  root     <span class=\"token number\">2</span> May <span class=\"token number\">11</span> <span class=\"token number\">22</span>:02 f3 -<span class=\"token operator\">></span> f1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root  root  <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">18</span>:26 lloam</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root  root  <span class=\"token number\">4096</span> May <span class=\"token number\">11</span> <span class=\"token number\">21</span>:11 lloamstudy2</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat f1 # 查看 f1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>i lova mao</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat f2 # 查看 f2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>i lova mao</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat f3 # 查看 f3</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>i lova mao</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>删除 f1 之后，查看 f2 和 f3 的区别</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># rm -rf f1 # 删除 f1 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>admin  f2  f3  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat f2 # f2 硬链接还在</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>i lova mao</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat f3 # f3 （软链接、符号链接）快捷方式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cat: f3: No such <span class=\"token function\">file</span> or directory</pre></td></tr></table></figure><h3 id=\"43-vim-编辑器\"><a class=\"markdownIt-Anchor\" href=\"#43-vim-编辑器\">#</a> 4.3、Vim 编辑器</h3>\n<h4 id=\"431-什么是vim编辑器\"><a class=\"markdownIt-Anchor\" href=\"#431-什么是vim编辑器\">#</a> 4.3.1、什么是 Vim 编辑器</h4>\n<p>vim 通过一些插件可以实现和 IDE 一样的功能！</p>\n<p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。尤其是 Linux 中，必须要会使用 Vim（查看内容，编辑内容，保存内容！）</p>\n<p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p>\n<p>vim 则可以说是程序开发者的一项很好用的工具。</p>\n<p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p>\n<p>连 vim 的官方网站 (<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52aW0ub3Jn\">http://www.vim.org</span>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>\n<p>vim 键盘图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20210116092222874.png\" alt=\"linux图片\"></p>\n<h4 id=\"432-三种使用模式\"><a class=\"markdownIt-Anchor\" href=\"#432-三种使用模式\">#</a> 4.3.2、三种使用模式</h4>\n<p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p>\n<p><strong>命令模式：</strong></p>\n<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511222634174.png\" alt=\"image-20210511222634174\"></p>\n<p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p>\n<p>以下是常用的几个命令：</p>\n<ul>\n<li>i 切换到输入模式，以输入字符。</li>\n<li>x 删除当前光标所在处的字符。</li>\n<li>: 切换到底线命令模式，以在最底一行输入命令。 如果是编辑模式，需要先退出编辑模式！ESC<br>\n 若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</li>\n</ul>\n<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>\n<p>** 输入模式：** 在命令模式下按下 i 就进入了输入模式。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511221521627.png\" alt=\"image-20210511221521627\"></p>\n<p>在输入模式中，可以使用以下按键：</p>\n<p>字符按键以及 Shift 组合，输入字符<br>\n ENTER，回车键，换行<br>\n BACK SPACE，退格键，删除光标前一个字符<br>\n DEL，删除键，删除光标后一个字符<br>\n方向键，在文本中移动光标<br>\n HOME/END，移动光标到行首 / 行尾<br>\n Page Up/Page Down，上 / 下翻页<br>\n Insert，切换光标为输入 / 替换模式，光标将变成竖线 / 下划线<br>\n ESC，退出输入模式，切换到命令模式<br>\n底线命令模式：在命令模式下按下:（英文冒号）就进入了底线命令模式。光标就移动到了最底下，就可以在这里输入一<br>\n些底线命令了！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20210116092848193.png\" alt=\"linux图片\"></p>\n<p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p>\n<p>在底线命令模式中，基本的命令有（已经省略了冒号）：wq</p>\n<p>q 退出程序<br>\n w 保存文件</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/20210116092910342.png\" alt=\"linux图片\"></p>\n<p>按 ESC 键可随时退出底线命令模式。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/image-20210511222258700.png\" alt=\"image-20210511222258700\"></p>\n<p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/linux/919f634aa944b04c0f7929b2ce475715.png\" alt=\"img\"></p>\n<h4 id=\"433-完整的演示说明\"><a class=\"markdownIt-Anchor\" href=\"#433-完整的演示说明\">#</a> 4.3.3、完整的演示说明</h4>\n<p>新建或者编辑文件，按  <code>i </code> 进入编辑模式，编写内容，编写完成后退出编辑模式， <code>esc</code> ，退出之后进入底线命令模式  <code>：</code>   <code>wq </code> 保存退出！</p>\n<h4 id=\"434-vim-按键说明\"><a class=\"markdownIt-Anchor\" href=\"#434-vim-按键说明\">#</a> 4.3.4、Vim 按键说明</h4>\n<p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p>\n<p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">按键</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">h 或向左方向键 (←)</td>\n<td style=\"text-align:center\">游标向左移动一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">j 或向下方向键 (↓)</td>\n<td style=\"text-align:center\">游标向下移动一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">k 或向上方向键 (↑)</td>\n<td style=\"text-align:center\">游标向上移动一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l 或向右方向键 (→)</td>\n<td style=\"text-align:center\">游标向右移动一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>[ctrl]+[f]</mark></td>\n<td style=\"text-align:center\">屏幕向下移动一页，相当于 [Page Down]<strong>（常用）</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>[ctrl]+[b]</mark></td>\n<td style=\"text-align:center\">屏幕向上移动一页，相当于 [Page Up]<strong>（常用）</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ctrl]+[d]</td>\n<td style=\"text-align:center\">屏幕向下移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[ctrl]+[u]</td>\n<td style=\"text-align:center\">屏幕向上移动半页</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数字 +[Space]</td>\n<td style=\"text-align:center\">n 表示数字，按下数字后再按空格键，游标会向右移动到这一行的第 n 个字元。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">功能键 [Home] 或 0</td>\n<td style=\"text-align:center\">游标移动到这一行的第一个字元处</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>功能键 [End] 或 $</mark></td>\n<td style=\"text-align:center\">游标移动到这一行的最后一个字元处 <strong>（常用）</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">H</td>\n<td style=\"text-align:center\">游标移动到这个屏幕最上方那一行的第一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">M</td>\n<td style=\"text-align:center\">游标移动到这个屏幕中央那一行的第一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">L</td>\n<td style=\"text-align:center\">游标移动到这个屏幕最下方那一行的第一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>G</mark></td>\n<td style=\"text-align:center\">游标移动到这个档案的最后一行 <strong>（常用）</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nG</td>\n<td style=\"text-align:center\">n 为数字。游标移动到这个档案的第 n 行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>gg</mark></td>\n<td style=\"text-align:center\">游标移动到这个档案的第一行 <strong>（常用）</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>数字 +[Enter]</mark></td>\n<td style=\"text-align:center\">n 为数字。游标向下移动 n 行 <strong>（常用）</strong></td>\n</tr>\n</tbody>\n</table>\n<p><code>替换搜索\t</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">替换搜索</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">/word</td>\n<td style=\"text-align:center\">向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?word</td>\n<td style=\"text-align:center\">向光标之上寻找一个字符串名称为 word 的字符串。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行？vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">N</td>\n<td style=\"text-align:center\">这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td style=\"text-align:center\">按键</td>\n<td style=\"text-align:center\">说明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">:------------:</td>\n<td style=\"text-align:center\">:----------------------------------------------------------:</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>[Del] 或 x</mark></td>\n<td style=\"text-align:center\">向后删除一个字元 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>X</mark></td>\n<td style=\"text-align:center\">向前删除一个字元 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nx</td>\n<td style=\"text-align:center\">n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>dd</mark></td>\n<td style=\"text-align:center\">删除游标所在的那一行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>ndd</mark></td>\n<td style=\"text-align:center\">n 为数字，删除游标所在的那一行往下数 的 n 个行，例如 20dd 则是删除 20 行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d1G</td>\n<td style=\"text-align:center\">删除游标所在的那行到第一行的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dG</td>\n<td style=\"text-align:center\">删除游标所在的那行到最后一行的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d$</td>\n<td style=\"text-align:center\">删除游标所在处到该行的最后一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">d0</td>\n<td style=\"text-align:center\">是数字 0，删除游标所在处到该行的第一个字元</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>yy</mark></td>\n<td style=\"text-align:center\">复制游标所在的那一行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>nyy</mark></td>\n<td style=\"text-align:center\">n 为数字， 复制游标所在的那一行往下数 n 行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y1G</td>\n<td style=\"text-align:center\">复制游标所在行到第一行的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">yG</td>\n<td style=\"text-align:center\">复制游标所在行到最后一行的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y0</td>\n<td style=\"text-align:center\">复制游标所在的字元到该行行首的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">y$</td>\n<td style=\"text-align:center\">复制游标所在的字元到该行行尾的所有数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>p</mark></td>\n<td style=\"text-align:center\">将已复制的数据粘贴在游标所在的那一行的下一行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>P</mark></td>\n<td style=\"text-align:center\">将已复制的数据粘贴在游标所在的那一行的上一行，原来游标所在的那一行会被推后一行 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">J</td>\n<td style=\"text-align:center\">将游标所在的行与下一行的数据合并为一行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>u</mark></td>\n<td style=\"text-align:center\">复原前一个动作 **（常用）**</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>[ctrl]+r</mark></td>\n<td style=\"text-align:center\">重做上一个被撤销的操作 （常用）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><mark>.</mark></td>\n<td style=\"text-align:center\">这是小数点，表示重复前一个操作 （常用）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">进入输入或取代的编辑模式</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">i, I</td>\n<td style=\"text-align:center\">进入输入模式 (Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a, A</td>\n<td style=\"text-align:center\">进入输入模式 (Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』，A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">o, O</td>\n<td style=\"text-align:center\">进入输入模式 (Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r, R</td>\n<td style=\"text-align:center\">进入取代模式 (Replace mode)：r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">[Esc]</td>\n<td style=\"text-align:center\">退出编辑模式，回到一般模式中 **(常用)**</td>\n</tr>\n</tbody>\n</table>\n<p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><mark>:w</mark></td>\n<td>将编辑的文件写入硬盘 （常用）</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>\n</tr>\n<tr>\n<td><mark>:q</mark></td>\n<td>离开 vi （常用）</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>若曾修改过档案，又不想储存，使用！为强制离开不储存档案。注意一下，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思</td>\n</tr>\n<tr>\n<td><mark>:wq</mark></td>\n<td>文件写入硬盘后（即保存）离开 vi （常用）</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>文件强制写入硬盘后（即保存）离开 vi</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td>大写字母 Z，如果文件没有修改，则直接离开；如果文件被修改，则保存后离开</td>\n</tr>\n<tr>\n<td>:w [filename]</td>\n<td>将当前文件另存为另一个文件，这个新文件的保存路径为当前路径</td>\n</tr>\n<tr>\n<td>:r [filename]</td>\n<td>在当前文件中读入另一个文件的数据，插入到当前游标所在列的后面</td>\n</tr>\n<tr>\n<td>:n1,n2 w [filename]</td>\n<td>将第 n1 行到第 n2 行的数据储存为新的文件</td>\n</tr>\n<tr>\n<td>:! command</td>\n<td>暂时离开 vi 到指令列模式下执行 command 的显示结果。例如『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td>\n</tr>\n<tr>\n<td><mark>:set nu</mark></td>\n<td>设置行号，代码中经常会使用！\t显示行号，设定之后，会在每一行的前缀显示该行的行号<br/>:set nonu\t与 set nu 相反，为取消行号！</td>\n</tr>\n</tbody>\n</table>\n<p>以上标注的掌握熟练即可，其与的了解或者自己测一测即可，我们平时使用 VIM 最多的就是修改下文件内容而已！</p>\n<h3 id=\"44-账号管理\"><a class=\"markdownIt-Anchor\" href=\"#44-账号管理\">#</a> 4.4、账号管理</h3>\n<p>你一般在公司中，用的应该都不是 root 账户！</p>\n<h4 id=\"441-简介\"><a class=\"markdownIt-Anchor\" href=\"#441-简介\">#</a> 4.4.1、简介</h4>\n<p>Linux 系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\n<p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p>\n<p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p>\n<p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p>\n<ul>\n<li>用户账号的添加、删除与修改。</li>\n<li>用户口令的管理。</li>\n<li>用户组的管理。</li>\n</ul>\n<h4 id=\"442-用户账号的管理\"><a class=\"markdownIt-Anchor\" href=\"#442-用户账号的管理\">#</a> 4.4.2、用户账号的管理</h4>\n<p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p>\n<p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录 Shell 等资源。</p>\n<p>属主，属组</p>\n<h4 id=\"443-添加用户useradd\"><a class=\"markdownIt-Anchor\" href=\"#443-添加用户useradd\">#</a> 4.4.3、添加用户 useradd</h4>\n<p>useradd - 选项 用户名</p>\n<p>-m： 自动创建这个用户的主目录 /home/qinjiang</p>\n<p>-G : 给用户分配组！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>admin  lloam  lloamstudy2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># useradd -m mao # 创建一个用户！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>admin  lloam  lloamstudy2  mao</pre></td></tr></table></figure><p>理解一下本质：Linux 中一切皆文件，这里的添加用户说白了就是往某一个文件中写入用户的信息了！</p>\n<p>/etc/passwd</p>\n<h4 id=\"444-删除用户-userdel\"><a class=\"markdownIt-Anchor\" href=\"#444-删除用户-userdel\">#</a> 4.4.4、删除用户 userdel</h4>\n<p>userdel -r qinjiang 删除用户的时候将他的目录页一并删掉！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ /<span class=\"token punctuation\">]</span><span class=\"token comment\"># userdel -r mao # 删除用户</span></pre></td></tr></table></figure><h4 id=\"445-修改用户-usermod\"><a class=\"markdownIt-Anchor\" href=\"#445-修改用户-usermod\">#</a> 4.4.5、修改用户 usermod</h4>\n<p>修改用户 usermod 对应修改的内容 修改那个用户</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@iZ2ze2gq6oy52j4ctfd39hZ home<span class=\"token punctuation\">]</span><span class=\"token comment\"># usermod -d /home/233 mao</span></pre></td></tr></table></figure><p>修改完毕之后查看配置文件即可！</p>\n<h4 id=\"446-切换用户\"><a class=\"markdownIt-Anchor\" href=\"#446-切换用户\">#</a> 4.4.6、切换用户</h4>\n<p>root 用户</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512202914464.png\" alt=\"image-20210512202914464\"></p>\n<p>1. 切换用户的命令为：su username 【username 是你的用户名】</p>\n<p>2. 从普通用户切换到 root 用户，还可以使用命令：sudo su</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512203429156.png\" alt=\"image-20210512203429156\"></p>\n<p>3. 在终端输入 exit 或 logout 或使用快捷方式 ctrl+d，可以退回到原来用户，其实 ctrl+d 也是执行的 exit 命令</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512203524441.png\" alt=\"image-20210512203524441\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam home<span class=\"token punctuation\">]</span><span class=\"token comment\"># su mao</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>mao@lloam home<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam home<span class=\"token punctuation\">]</span><span class=\"token comment\">#</span></pre></td></tr></table></figure><p>4. 在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在 su 和 username 之间加 - ，例如：【su - root】</p>\n<p>$ 表示普通用户<br>\n #表示超级用户，也就是 root 用户<br>\n有的小伙伴在阿里云买完服务器后，主机名是一个随机字符串！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512204127550.png\" alt=\"image-20210512204127550\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">hostname</span> mao <span class=\"token comment\"># 修改主机名</span></pre></td></tr></table></figure><h4 id=\"447-用户的密码设置\"><a class=\"markdownIt-Anchor\" href=\"#447-用户的密码设置\">#</a> 4.4.7、用户的密码设置</h4>\n<p>我们一般通过 root 创建用户的时候！要配置密码！</p>\n<p>Linux 上输入密码是不会显示的，你正常输入就可以了，并不是系统的问题！</p>\n<p>在公司中，你们一般拿不到公司服务器的 root 权限，都是一些分配的账号！</p>\n<p>如果是超级用户的话：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> username：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new password：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>re password：</pre></td></tr></table></figure><p>如果是普通用户：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> UNIX password:   <span class=\"token comment\"># 输当前用用户密码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new password： <span class=\"token comment\"># 密码不能太过于简单！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>re password：</pre></td></tr></table></figure><h4 id=\"448-锁定账户\"><a class=\"markdownIt-Anchor\" href=\"#448-锁定账户\">#</a> 4.4.8、锁定账户</h4>\n<p>root，比如张三辞职了！冻结这个账号，一旦冻结，这个人就登录不上系统了！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> -l mao <span class=\"token comment\"># 锁定之后这个用户就不能登录了！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">passwd</span> -d mao <span class=\"token comment\"># 没有密码也不能登录！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">passwd</span> -u mao <span class=\"token comment\"># 解锁用户</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512205338774.png\" alt=\"image-20210512205338774\"></p>\n<p>在公司中，你一般触及不到 root 用户！作为一个开发一般你拿不到！</p>\n<p>这以上的基本命令，大家必须要掌握！但是自己玩的时候可以使用来学习！Linux 是一个多用户的系统！</p>\n<h3 id=\"45-用户组管理\"><a class=\"markdownIt-Anchor\" href=\"#45-用户组管理\">#</a> 4.5、用户组管理</h3>\n<p>属主、属组</p>\n<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理（开发、测试、运维、root）。不同 Linux 系统对用户组的规定有所不同，如 Linux 下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>\n<p>用户组的管理涉及用户组的添加、删除和修改。<mark><strong>组的增加、删除和修改实际上就是对 /etc/group 文件的更新。</strong></mark></p>\n<h4 id=\"451-创建一个用户组\"><a class=\"markdownIt-Anchor\" href=\"#451-创建一个用户组\">#</a> 4.5.1、创建一个用户组</h4>\n<p><strong>groupadd</strong></p>\n<p>创建完用户组后可以得到一个组的 id，这个 id 是可以指定的！ -g 520， 如果不指定就是自增 1</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512205957120.png\" alt=\"image-20210512205957120\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512210110724.png\" alt=\"image-20210512210110724\"></p>\n<h4 id=\"452-删除用户组\"><a class=\"markdownIt-Anchor\" href=\"#452-删除用户组\">#</a> 4.5.2、删除用户组</h4>\n<p><strong>groupdel</strong></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512210139750.png\" alt=\"image-20210512210139750\"></p>\n<h4 id=\"453-修改用户组\"><a class=\"markdownIt-Anchor\" href=\"#453-修改用户组\">#</a> 4.5.3、修改用户组</h4>\n<p><strong>修改用户组的权限信息和名字 groupmod -g -n</strong></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512210418618.png\" alt=\"image-20210512210418618\"></p>\n<h4 id=\"454-切换用户组\"><a class=\"markdownIt-Anchor\" href=\"#454-切换用户组\">#</a> 4.5.4、切换用户组</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 登录当前用户 qinjiang</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ newgrp root</pre></td></tr></table></figure><h3 id=\"455-文件的查看了解即可\"><a class=\"markdownIt-Anchor\" href=\"#455-文件的查看了解即可\">#</a> 4.5.5、文件的查看 (了解即可)</h3>\n<blockquote>\n<p>/etc/passwd</p>\n</blockquote>\n<pre><code>用户名:口令(登录密码，我们不可见):用户标识号:组标识号:注释性描述:主目录:登录Shell\n这个文件中的每一行都代表这一个用户，我们可以从这里看出这个用户的主目录在哪里，可以看到属于哪一个组！\n</code></pre>\n<p>登录口令：把真正的加密后的用户口令字存放到 **/etc/shadow** 文件中，保证我们密码的安全性！</p>\n<p>用户组的所有信息都存放在 **/etc/group** 文件中。</p>\n<h3 id=\"46-磁盘管理\"><a class=\"markdownIt-Anchor\" href=\"#46-磁盘管理\">#</a> 4.6、磁盘管理</h3>\n<h4 id=\"461-磁盘空间使用量\"><a class=\"markdownIt-Anchor\" href=\"#461-磁盘空间使用量\">#</a> 4.6.1、磁盘空间使用量</h4>\n<p>df （列出文件系统整体的磁盘使用量） du（检查磁盘空间使用量！）</p>\n<p>df<br>\ndf -h</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512211651914.png\" alt=\"image-20210512211651914\"></p>\n<p>du<br>\ndu -a 查看隐藏文件</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512211901487.png\" alt=\"image-20210512211901487\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512212043117.png\" alt=\"image-20210512212043117\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512212222431.png\" alt=\"image-20210512212222431\"></p>\n<h4 id=\"462-挂载磁盘或文件\"><a class=\"markdownIt-Anchor\" href=\"#462-挂载磁盘或文件\">#</a> 4.6.2、挂载磁盘或文件</h4>\n<p>Mac 或者想使用 Linux 挂载我们的一些本地磁盘或者文件！</p>\n<p>挂载：mount</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512212628693.png\" alt=\"image-20210512212628693\"></p>\n<p>卸载：umount -f [挂载位置] 强制卸载</p>\n<p>除了这个之外，以后我们安装了 JDK ，其实可以使用 java 中的一些命令来查看信息！</p>\n<h3 id=\"47-进程管理\"><a class=\"markdownIt-Anchor\" href=\"#47-进程管理\">#</a> 4.7、进程管理</h3>\n<p>Linux 中一切皆文件</p>\n<p>（文件：读写执行（查看，创建，删除，移动，复制，编辑），权限（用户、用户组）。系统：（磁盘，进程））</p>\n<p>对于我们开发人员来说，其实 Linux 更多偏向于使用即可！</p>\n<h4 id=\"471-基本概念\"><a class=\"markdownIt-Anchor\" href=\"#471-基本概念\">#</a> 4.7.1、基本概念</h4>\n<p>1、在 Linux 中，每一个程序都是有自己的一个进程，每一个进程都有一个 id 号！<br>\n2、每一个进程呢，都会有一个父进程！<br>\n3、进程可以有两种存在方式：前台！后台运行！<br>\n4、一般的话服务都是后台运行的，基本的程序都是前台运行的！</p>\n<h4 id=\"472-命令\"><a class=\"markdownIt-Anchor\" href=\"#472-命令\">#</a> 4.7.2、命令</h4>\n<p><strong>ps</strong> 查看当前系统中正在执行的各种进程的信息！</p>\n<p>ps -xx ：</p>\n<ul>\n<li>-a 显示当前终端运行的所有的进程信息（当前的进程一个）</li>\n<li>-u 以用户的信息显示进程</li>\n<li>-x 显示后台运行进程的参数！</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -aux <span class=\"token comment\"># 查看所有的进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> -aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># | 在 Linux 这个叫做管道符 A|B</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token comment\"># 查找文件中符合条件的字符串！</span></pre></td></tr></table></figure><p>对于我们来说，这里目前只需要记住一个命令即可 ps -xx|grep 进程名字！ 过滤进程信息！</p>\n<p>ps -ef：可以查看到父进程的信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> -ef<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql <span class=\"token comment\"># 看父进程我们一般可以通过目录树结构来查看！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 进程树！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pstree -pu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>-p <span class=\"token comment\">#　显示父 id</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-u <span class=\"token comment\"># 显示用户组</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/20210116144718583.png\" alt=\"linux图片\"></p>\n<p>结束进程：杀掉进程，等价于 window 结束任务！</p>\n<p>kill -9 进程的 id</p>\n<p>但是啊，我们平时写的一个 Java 代码死循环了，可以选择结束进程！杀进程</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">kill</span> -9 <span class=\"token comment\"># 进程的 id</span></pre></td></tr></table></figure><p>表示强制结束该进程！</p>\n<p>将 Java 程序打包发布的时候讲解！  <code>nohup</code>  ，代表后台执行程序</p>\n<h2 id=\"5-环境安装\"><a class=\"markdownIt-Anchor\" href=\"#5-环境安装\">#</a> 5、环境安装</h2>\n<p>安装软件一般有三种方式：</p>\n<ul>\n<li>rpm（Jdk：在线发布一个 SringBoot 项目！）\\</li>\n<li>解压缩（tomcat，启动并通过外网访问，发布网站）</li>\n<li>yum 在线安装（docker：直接安装运行跑起来 docker 就可以！）！</li>\n</ul>\n<h3 id=\"51-jdk安装\"><a class=\"markdownIt-Anchor\" href=\"#51-jdk安装\">#</a> 5.1、JDK 安装</h3>\n<p>我们开发 java 程序必须要的环境！<br>\n1、下载 JDK rpm。去 oralce 官网下载即可！<br>\n2、安装 java 环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 检测当前系统是否存在 java 环境！ java -version</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果有的话就需要卸载</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># rpm -qa|grep jdk # 检测 JDK 版本信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># rpm -e --nodeps jdk_</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 卸载完毕后即可安装 jdk</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># rpm -ivh rpm 包  安装 jdk</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 配置环境变量！</span></pre></td></tr></table></figure><p>如果存在可以提前卸载：<br>\n<img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512221347331.png\" alt=\"image-20210512221347331\"></p>\n<p>安装：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210512221048774.png\" alt=\"\"></p>\n<p>配置环境变量： <code> /etc/profile</code>  在文件的最后面增加 java 的配置和 window 安装环境变量一样！</p>\n<p><mark><strong>使用 rpm 安装的 jdk 使不需要配置环境变量的，自动就帮我们配置好了</strong></mark></p>\n<pre><code>JAVA_HOME=/usr/java/jdk1.8.0_221-amd64\nCLASSPATH=%JAVA_HOME%/lib;%JAVA_HOME%/jre/lib\nPATH=$JAVA_HOME/bin;$JAVA_HOME/jre/bin\nexport PATH CLASSPATH JAVA_HOME\n</code></pre>\n<p>让这个配置文件生效！ source /etc/profile 我们来发布一个项目试试！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启防火墙端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">9000</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 重启防火墙</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>systemctl restart firewalld.service</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 查看所有开启的端口，如果是阿里云，需要配置安全组规则！</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>firewall-cmd --list-ports</pre></td></tr></table></figure><h3 id=\"52-tomcat-安装\"><a class=\"markdownIt-Anchor\" href=\"#52-tomcat-安装\">#</a> 5.2、Tomcat 安装</h3>\n<p>ssm war 就需要放到 tomcat 中运行！</p>\n<p>1、下载 tomcat。官网下载即可  <code>apache-tomcat-9.0.45.tar.gz </code></p>\n<p>2、解压这个文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf apache-tomcat-9.0.22.tar.gz</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513203918974.png\" alt=\"image-20210513203918974\"></p>\n<p>3、启动 tomcat 测试！ ./xxx.sh 脚本即可运行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 执行 ./startup.sh</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 停止 ./shotdown.sh</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513204217333.png\" alt=\"image-20210513204217333\"></p>\n<p><mark>如果防火墙 8080 端口开了并且阿里云安全组也开放了这个时候就可以直接访问远程了！</mark></p>\n<p>我买的是轻量级服务器，只需要开启防火墙 8080 端口就可以访问了</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513205513219.png\" alt=\"image-20210513205513219\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看 firewall 服务状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl status firewalld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 开启、重启、关闭、firewalld.service 服务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 开启</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">service</span> firewalld start</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 重启</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">service</span> firewalld restart</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 关闭</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">service</span> firewalld stop</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 查看防火墙规则</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>firewall-cmd --list-all <span class=\"token comment\"># 查看全部信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>firewall-cmd --list-ports <span class=\"token comment\"># 只看端口信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 开启端口</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>开端口命令：firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">8080</span>/tcp --permanent</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>重启防火墙：systemctl restart firewalld.service</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>命令含义：</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>--zone <span class=\"token comment\">#作用域</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>--add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp <span class=\"token comment\">#添加端口，格式为：端口 / 通讯协议</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>--permanent <span class=\"token comment\">#永久生效，没有此参数重启后失效</span></pre></td></tr></table></figure><p>上传完毕的项目直接购买自己的域名，备案解析过去即可！1 年级都会做！</p>\n<p>域名解析后，如果端口是 80 - http 或者 443-https 可以直接访问，如果是 9000 8080，就需要通过 Apcahe 或者 Nginx 做一下反向代理即可，配置文件即可，十分之简单，大家如果想要上线自己的网站，到目前为止，那么你可以如愿以偿了！</p>\n<h3 id=\"53-dockeryum安装\"><a class=\"markdownIt-Anchor\" href=\"#53-dockeryum安装\">#</a> 5.3、Docker（yum 安装）</h3>\n<p>联网的情况下 yum install -y yum 源</p>\n<p>官网安装参考手册：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vaW5zdGFsbC9saW51eC9kb2NrZXItY2UvY2VudG9zLw==\">https://docs.docker.com/install/linux/docker-ce/centos/</span></p>\n<p>我们现在是在 Linux 下执行，一定要联网 ，yum 在线安装！</p>\n<p>将心比心！为什么要做这些事情的一个思想！</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p>1、检测 CentOS 7</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@mao bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/redhat-release</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CentOS Linux release <span class=\"token number\">7.6</span>.1810 <span class=\"token punctuation\">(</span>Core<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>2、安装我们的准备环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum -y <span class=\"token function\">install</span> 包名 <span class=\"token comment\"># yum install 安装命令 -y 所有的提示都为 y</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yum -y <span class=\"token function\">install</span> gcc-c++</pre></td></tr></table></figure><p>3、清楚以前的版本！后面根据官网安装即可，我就不在这里写了！</p>\n<h3 id=\"54-宝塔面板懒人式安装\"><a class=\"markdownIt-Anchor\" href=\"#54-宝塔面板懒人式安装\">#</a> 5.4、宝塔面板（懒人式安装）</h3>\n<p>具体的教程 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTc3NDExSzdiSA==\">https://www.bilibili.com/video/BV177411K7bH</span></p>\n<h2 id=\"6-扩展vmware使用\"><a class=\"markdownIt-Anchor\" href=\"#6-扩展vmware使用\">#</a> 6、扩展：Vmware 使用</h2>\n<p>很多小伙伴，比较吝啬，买不起 70 一年的服务器 ！ Vmware 本地安装包！</p>\n<h3 id=\"61-快照\"><a class=\"markdownIt-Anchor\" href=\"#61-快照\">#</a> 6.1、快照</h3>\n<p>保留当前系统信息为快照，随时可以恢复，以防未来系统被你玩坏，就好比游戏中的归档！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513213152600.png\" alt=\"image-20210513213152600\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/20210116174016866.png\" alt=\"linux图片\"></p>\n<p>平时的话，我们每配置一个东西就可以拍摄一个快照，保留信息！</p>\n<h3 id=\"62-本地网络配置\"><a class=\"markdownIt-Anchor\" href=\"#62-本地网络配置\">#</a> 6.2、本地网络配置</h3>\n<p>大一学的计算机网络原理中有！</p>\n<p>需要保证 Linux 虚拟机和本机处在同一个网段！</p>\n<p>windows</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513213510841.png\" alt=\"image-20210513213510841\"></p>\n<p>Linux 也必须要配置到 对应的网段 10.102.0.110</p>\n<p>/etc/sysconfig/network-scripts/</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513214004656.png\" alt=\"image-20210513214004656\"></p>\n<p>桥接模式 : 192.168.0.110 192.168.0. 160</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/image-20210513214149021.png\" alt=\"image-20210513214149021\"></p>\n<p>一定要桥接到正确的网卡即可！<br>\n静态的话就需要配置 IP 地址，IPADDR=192.168.0.110，以下是静态的网络配置，这两种方式，都可以让虚拟机连接外网从而实现网络开发！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/20210116174200326.png\" alt=\"linux图片\"></p>\n<p>傻瓜式配置，只能在图形界面下有效！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/20210116174215692.png\" alt=\"linux图片\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/mybatis/20210116174222994.png\" alt=\"linux图片\"></p>\n<p>配置完毕即可上网！</p>\n<h2 id=\"操作图文教程\"><a class=\"markdownIt-Anchor\" href=\"#操作图文教程\">#</a> 操作图文教程</h2>\n<p>Ubuntu 系统提示用户不在 sudoers 文件中，此事将被报告。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGludXhydW1lbi5jb20vcm14eC8xODIyLmh0bWw=\">https://www.linuxrumen.com/rmxx/1822.html</span></p>\n<p>linux vim 如何保存退出</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aGlkYW8uYmFpZHUuY29tL3F1ZXN0aW9uLzU4NDMxNjUzNi5odG1s\">https://zhidao.baidu.com/question/584316536.html</span></p>\n<p>管理员和普通用户</p>\n<p>管理员#</p>\n<p>普通用户 $</p>\n<p>命令：su  然后输入密码</p>\n",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://example.com/redis/",
            "url": "http://example.com/redis/",
            "title": "Redis初步学习",
            "date_published": "2021-05-13T08:30:03.000Z",
            "content_html": "<span id=\"more\"></span>\n<blockquote>\n<p>Bilibili 搜索关注：狂神说（所有课程免费） 公众号：狂神说（日更文章）</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVM1NHkxUjdTQj9wPTE=\">bilibili 狂神聊 redis</span></p>\n<h1 id=\"狂神聊redis\"><a class=\"markdownIt-Anchor\" href=\"#狂神聊redis\">#</a> 狂神聊 Redis</h1>\n<p>学习方式：不是为了面试和工作学习！仅仅是为了兴趣！兴趣才是最好的老师！</p>\n<ul>\n<li>基本的理论先学习，然后将知识融汇贯通！</li>\n</ul>\n<p><strong>狂神的 Redis 课程安排：</strong></p>\n<ul>\n<li>nosql 讲解</li>\n<li>阿里巴巴架构演进</li>\n<li>nosql 数据模型</li>\n<li>Nosql 四大分类</li>\n<li>CAP</li>\n<li>BASE</li>\n<li>Redis 入门</li>\n<li>Redis 安装（Window &amp; Linux 服务器）</li>\n<li>五大基本数据类型\n<ul>\n<li>String</li>\n<li>List</li>\n<li>Set</li>\n<li>Hash</li>\n<li>Zset</li>\n</ul>\n</li>\n<li>三种特殊数据类型\n<ul>\n<li>geo</li>\n<li>hyperloglog</li>\n<li>bitmap</li>\n</ul>\n</li>\n<li>Redis 配置详解</li>\n<li>Redis 持久化\n<ul>\n<li>RDB</li>\n<li>AOF</li>\n</ul>\n</li>\n<li>Redis 事务操作</li>\n<li>Redis 实现订阅发布（消息队列）</li>\n<li>Redis 主从复制</li>\n<li>Redis 哨兵模式（现在公司中所有的集群都用哨兵模式）</li>\n<li>缓存穿透及解决方案</li>\n<li>缓存击穿及解决方案</li>\n<li>缓存雪崩及解决方案</li>\n<li>基础 API 之 Jedis 详解</li>\n<li>SpringBoot 集成 Redis 操作</li>\n<li>Redis 的实践分析</li>\n</ul>\n<h1 id=\"nosql概述\"><a class=\"markdownIt-Anchor\" href=\"#nosql概述\">#</a> Nosql 概述</h1>\n<h2 id=\"为什么要用nosql\"><a class=\"markdownIt-Anchor\" href=\"#为什么要用nosql\">#</a> 为什么要用 Nosql</h2>\n<blockquote>\n<p>1 、单机 MySQL 的年代！</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515205042567.png\" alt=\"image-20210515205042567\"></p>\n<p>90 年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！</p>\n<p>那个时候，更多的去使用静态网页 Html ~ 服务器根本没有太大的压力！</p>\n<p>思考一下，这种情况下：整个网站的瓶颈是什么？</p>\n<p>1 、数据量如果太大、一个机器放不下了！</p>\n<p>2 、数据的索引 （B+ Tree），一个机器内存也放不下</p>\n<p>3 、访问量（读写混合），一个服务器承受不了～</p>\n<p>只要你开始出现以上的三种情况之一，那么你就必须要晋级！</p>\n<blockquote>\n<p>2 、Memcached（缓存） + MySQL + 垂直拆分 （读写分离）</p>\n</blockquote>\n<p>网站 80% 的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据的压力，我们可以使用缓存来保证效率！</p>\n<p>发展过程： 优化数据结构和索引–&gt; 文件缓存（IO）—&gt; Memcached（当时最热门的技术！）</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515210046188.png\" alt=\"image-20210515210046188\"></p>\n<blockquote>\n<p>3 、分库分表 + 水平拆分 + MySQL 集群</p>\n</blockquote>\n<p>技术和业务在发展的同时，对人的要求也越来越高！</p>\n<p><mark>本质：数据库（读、写）</mark></p>\n<p>早些年 MyISAM：表锁（100 万 张三–密码），十分影响效率！高并发下就会出现严重的锁问题</p>\n<p>转战 Innodb：行锁（每次查询只锁一行）</p>\n<p>慢慢地就开始使用分库分表来解决写的压力！MySQL 在那个年代推出了表分区！这个并没有多少公司使用！</p>\n<p>MySQL 的集群，很好满足那个年代的所有需求！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515210907927.png\" alt=\"image-20210515210907927\"></p>\n<blockquote>\n<p>4 、如今最近的年代</p>\n</blockquote>\n<p>2010–2020 十年之间，世界已经发生了翻天覆地的变化；（定位，也是一种数据，音乐，热榜！）</p>\n<p>MySQL 等关系型数据库就不够用了！数据量很多，变化很快～！</p>\n<p>MySQL 有的使用它来存储一些比较大的文件，博客，图片！数据库表很大，效率就低了！如果有一种数据库来专门处理这种数据，</p>\n<p>MySQL 压力就变得十分小（研究如何处理这些问题！）大数据的 IO 压力下，表几乎没法更大！</p>\n<blockquote>\n<p>目前一个基本的互联网项目！</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515212827051.png\" alt=\"image-20210515212827051\"></p>\n<blockquote>\n<p>为什么要用 NoSQL！</p>\n</blockquote>\n<p>用户的个人信息、社交网络、地理位置、用户自己产生的数据、用户日志等等爆发式增长！</p>\n<p>这时候我们就需要使用 NoSQL 数据库的，Nosql 可以很好的处理以上的情况！</p>\n<h2 id=\"什么是nosql\"><a class=\"markdownIt-Anchor\" href=\"#什么是nosql\">#</a> 什么是 NoSQL</h2>\n<blockquote>\n<p>NoSQL</p>\n</blockquote>\n<p>NoSQL = Not Only SQL （不仅仅是 SQL）</p>\n<p>关系型数据库：表格 ，行 ，列</p>\n<p>泛指非关系型数据库的，随着 web2.0 互联网的诞生！传统的关系型数据库很难对付 web2.0 时代！尤其是超大规模的高并发的社区！ 暴露出来很多难以克服的问题，NoSQL 在当今大数据环境下发展的十分迅速，Redis 是发展最快的，而且是我们当下必须要掌握的一个技术！</p>\n<p>很多的数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！<br>\n不需要多余的操作就可以横向扩展的 ！ Map&lt;String,Object&gt; 使用键值对来控制！</p>\n<blockquote>\n<p>NoSQL 特点</p>\n</blockquote>\n<p>解耦！</p>\n<p>1 、方便扩展（数据之间没有关系，很好扩展！）</p>\n<p>2 、大数据量高性能（Redis 一秒写 8 万次，读取 11 万，NoSQL 的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p>\n<p>3 、数据类型是多样型的！（不需要事先设计数据库！随取随用！如果是数据量十分大的表，很多人就无法设计了！）</p>\n<p>4 、传统 RDBMS 和 NoSQL</p>\n<pre><code>传统的RDBMS\n- 结构化组织\n- SQL\n- 数据和关系都存在单独的表中 row col\n- 数据操作，数据定义语言\n- 严格的一致性\n- 基础的事务\n- ......\n</code></pre>\n<pre><code>Nosql\n- 不仅仅是数据\n- 没有固定的查询语言\n- 键值对存储，列存储，文档存储，图形数据库（社交关系）\n- 最终一致性\n- CAP定理 和BASE理论（异地多活）初级架构师！（只要学不死，就往死里学）\n- 高性能，高可用，高可扩展\n- ......\n</code></pre>\n<blockquote>\n<p>了解：3V+3 高</p>\n</blockquote>\n<p>大数据时代的 3V：主要是描述问题的</p>\n<ol>\n<li>海量 Volume</li>\n<li>多样 Variety</li>\n<li>实时 Velocity</li>\n</ol>\n<p>大数据时代的 3 高：主要是对程序的要求</p>\n<ol>\n<li>高并发</li>\n<li>高可扩（随时水平拆分，机器不够了，可以扩展机器来解决）</li>\n<li>高性能（保证用户体验和性能！）</li>\n</ol>\n<p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的，阿里巴巴的架构演进！</p>\n<p>技术没有高低之分，就看你如何去使用！（提升内功，思维的提高！）</p>\n<h2 id=\"阿里巴巴演进分析\"><a class=\"markdownIt-Anchor\" href=\"#阿里巴巴演进分析\">#</a> 阿里巴巴演进分析</h2>\n<p>思考问题：这么多东西难道都是在一个数据库中的吗？</p>\n<p>技术急不得，越是慢慢学，才能越扎实！</p>\n<p>开源才是技术的王道！</p>\n<p><mark>任何一家互联网的公司，都不可能只是简简单单让用户能用就好了！</mark></p>\n<p>大量公司做的都是相同的业务；（竞品协议）</p>\n<p>随着这样的竞争，业务是越来越完善，然后对于开发者的要求也是越来越高！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515220434523.png\" alt=\"image-20210515220434523\"></p>\n<p>如果你未来相当一个架构师： 没有什么是加一层解决不了的！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1、商品的基本信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    名称、价格、商家信息：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    关系型数据库就可以解决了！MySQL/Oracle（淘宝早年就去IOE了！-王坚：推荐文章：阿里云的这群分子）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    淘宝内部的 MySQL 不是大家用的 MySQL</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 2、商品的描述、评论（文字比较多）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t文档型数据库中，Redis/MongoDB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3、图片</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t分布式文件系统 FastDFS</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t- 淘宝自己的  TFS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t- Gooale的   GFS</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t- Hadoop    HDFS</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t- 阿里云的    oss</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 4、商品的关键字（搜索）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t- 搜索引擎 solr elasticsearch</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t- ISerach：多隆（多去了解一下这些技术大佬）</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t所有牛逼的人都有一段苦逼的岁月！但是你只要想SB一样的去坚持，终将牛逼！</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 5、商品热门的波段信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t- 内存数据库</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t- Redis  Tair、Memache<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 6、商品的交易，外部的支付接口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t- 三方应用</pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzY1MzUxMQ==\">阿里云的这群疯子</span></p>\n<p>要知道，一个简单的网页背后的技术一定不是大家所想的那么简单！</p>\n<p>大型互联网应用问题：</p>\n<ul>\n<li>数据类型太多了！</li>\n<li>数据源繁多。经常重构！</li>\n<li>数据要改造，大面积改造比较麻烦</li>\n<li>解决问题:</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515222041025.png\" alt=\"image-20210515222041025\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515222408406.png\" alt=\"image-20210515222408406\"></p>\n<p>这里以上都是 NoSQL 入门概述，不仅能够提高大家的知识，还可以帮助大家了解大厂的工作内容！</p>\n<h2 id=\"nosql的四大分类\"><a class=\"markdownIt-Anchor\" href=\"#nosql的四大分类\">#</a> NoSQL 的四大分类</h2>\n<blockquote>\n<p><strong>KV 键值对：</strong></p>\n</blockquote>\n<ul>\n<li>\n<p>新浪： Redis</p>\n</li>\n<li>\n<p>美团：Redis + Tair</p>\n</li>\n<li>\n<p>阿里、百度：Redis + memacache</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>文档型数据库（bson 格式 和 json 一样）：</strong></p>\n</blockquote>\n<ul>\n<li>MongoDB （一般必须要掌握）\n<ul>\n<li>MongoDB 是一个基于分布式文件存储的数据库，C++ 编写，主要用来处理大量的文档！</li>\n<li>MongoDB 是一个介于关系型数据库和非关系型数据中中间的产品！MongoDB 是非关系型数据库中功能最丰富，最像关系型数据库的！</li>\n</ul>\n</li>\n<li>ConthDB</li>\n</ul>\n<blockquote>\n<p><strong>列存储数据库</strong></p>\n</blockquote>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n<blockquote>\n<p><strong>图关系数据库</strong></p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515223344089.png\" alt=\"image-20210515223344089\"></p>\n<ul>\n<li>\n<p>他不是存图形，放的是关系，比如：朋友圈社交网络，广告推荐！</p>\n</li>\n<li>\n<p>Neo4j ，InfoGrid；</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>四者对比！</strong></p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515223913698.png\" alt=\"image-20210515223913698\"></p>\n<p>敬畏之心可以使人进步！宇宙！科幻！</p>\n<p>活着的意义？ 追求幸福（帮助他人，感恩之心），探索未知（努力的学习，不要这个社会抛弃）</p>\n<h1 id=\"redis入门\"><a class=\"markdownIt-Anchor\" href=\"#redis入门\">#</a> Redis 入门</h1>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<blockquote>\n<p>Redis 是什么？</p>\n</blockquote>\n<p>Redis（<mark>Re</mark>mote <mark>Di</mark>ctionary <mark>S</mark>erver )，即远程字典服务！</p>\n<p>是一个开源的使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的 API。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515225216671.png\" alt=\"image-20210515225216671\"></p>\n<p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p>\n<p>redis 会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了<br>\n master-slave (主从) 同步。</p>\n<blockquote>\n<p>Redis 能干嘛？</p>\n</blockquote>\n<p>1 、内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）</p>\n<p>2 、效率高，可以用于高速缓存</p>\n<p>3 、发布订阅系统</p>\n<p>4 、地图信息分析</p>\n<p>5 、计时器、计数器（浏览量！）</p>\n<p>6 、…</p>\n<blockquote>\n<p>特性</p>\n</blockquote>\n<p>1 、多样的数据类型</p>\n<p>2 、持久化</p>\n<p>3 、集群</p>\n<p>4 、事务</p>\n<p>…</p>\n<blockquote>\n<p>学习中需要用到的东西</p>\n</blockquote>\n<p>1 、狂神的公众号：狂神说</p>\n<p>2 、官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWRpcy5pby8=\">https://redis.io/</span></p>\n<p>3 、中文网：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZWRpcy5jbi8=\">http://www.redis.cn/</span></p>\n<p>4 、下载地址：通过官网下载即可！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515225832019.png\" alt=\"image-20210515225832019\"></p>\n<p>注意：Wdinow 在 Github 上下载（停更很久了！）</p>\n<p><mark>Redis 推荐都是在 Linux 服务器上搭建的，我们是基于 Linux 学习！</mark></p>\n<h2 id=\"windows安装\"><a class=\"markdownIt-Anchor\" href=\"#windows安装\">#</a> Windows 安装</h2>\n<p>1 、下载安装包：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RtYWpraWMvcmVkaXMvcmVsZWFzZXM=\">https://github.com/dmajkic/redis/releases</span></p>\n<p>2 、下载完毕得到压缩包：</p>\n<p>3 、解压到自己电脑上的环境目录下的就可以的！Redis 十分的小，只有 5M</p>\n<p>4 、开启 Redis，双击运行服务即可！</p>\n<p>5 、使用 redis 客户单来来连接 redis</p>\n<p>记住一句话，Window 下使用确实简单，但是 Redis 推荐我们使用 Linux 去开发使用！</p>\n<h2 id=\"linux安装\"><a class=\"markdownIt-Anchor\" href=\"#linux安装\">#</a> Linux 安装</h2>\n<p>1 、下载安装包！  <code>redis-5.0.8.tar.gz</code></p>\n<p>2 、解压 Redis 的安装包！ 程序一般放到 /opt 目录下</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mv</span> redis-6.2.3.tar.gz /opt</pre></td></tr></table></figure><p>3 、进入解压后的文件，可以看到我们 redis 的配置文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf redis-6.2.3.tar.gz</pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515231004876.png\" alt=\"image-20210515231004876\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515231111463.png\" alt=\"image-20210515231111463\"></p>\n<p>4 、基本的环境安装</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> gcc-c++</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">make</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515231552495.png\" alt=\"image-20210515231552495\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515231737409.png\" alt=\"image-20210515231737409\"></p>\n<p>5 、redis 的默认安装路径 <code> /usr/local/bin</code></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515231925392.png\" alt=\"image-20210515231925392\"></p>\n<p>6 、将 redis 配置文件。复制到我们当前目录下</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515232123274.png\" alt=\"image-20210515232123274\"></p>\n<p>7 、redis 默认不是后台启动的，修改配置文件！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515232321291.png\" alt=\"image-20210515232321291\"></p>\n<p>8 、启动 Redis 服务！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># redis-server maoconfig/redis.conf</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515232453274.png\" alt=\"image-20210515232453274\"></p>\n<p>9 、使用 redis-cli 进行连接测试！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># redis-cli -p 6379</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515232759601.png\" alt=\"image-20210515232759601\"></p>\n<p>10 、查看 redis 的进程是否开启！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515233041587.png\" alt=\"image-20210515233041587\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ps -ef|grep redis</span></pre></td></tr></table></figure><p>11 、如何关闭 Redis 服务呢？ shutdown</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515233158652.png\" alt=\"image-20210515233158652\"></p>\n<p>12 、再次查看进程是否存在</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515233211116.png\" alt=\"image-20210515233211116\"></p>\n<p>13 、后面我们会使用单机多 Redis 启动集群测试！</p>\n<h2 id=\"测试性能\"><a class=\"markdownIt-Anchor\" href=\"#测试性能\">#</a> 测试性能</h2>\n<p><strong>redis-benchmark</strong> 是一个压力测试工具！</p>\n<p>官方自带的性能测试工具！</p>\n<p>redis-benchmark 命令参数！</p>\n<p>图片来自菜鸟教程：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515233448855.png\" alt=\"image-20210515233448855\"></p>\n<p>我们来简单测试下：</p>\n<p>如何查看这些分析呢？</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 测试： 100 个并发连接 100000 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>redis-benchmark -h localhost -p <span class=\"token number\">6379</span> -c <span class=\"token number\">100</span> -n <span class=\"token number\">100000</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515234105056.png\" alt=\"image-20210515234105056\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515234452037.png\" alt=\"image-20210515234452037\"></p>\n<p>查看这些分析？</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210515234613748.png\" alt=\"image-20210515234613748\"></p>\n<h2 id=\"基础的知识\"><a class=\"markdownIt-Anchor\" href=\"#基础的知识\">#</a> 基础的知识</h2>\n<p>redis 默认有 16 个数据库</p>\n<p><strong>默认使用的是第 0 个</strong></p>\n<p>可以使用 select 进行切换数据库！</p>\n<p>清除当前数据库 flushdb</p>\n<p>清除全部数据库的内容 FLUSHALL</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token keyword\">select</span> <span class=\"token number\">3</span> <span class=\"token comment\"># 切换数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> DBSIZE  <span class=\"token comment\"># 查看 DB 大小！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210516200010388.png\" alt=\"image-20210516200010388\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> keys *  <span class=\"token comment\"># 查看数据库所有的 key</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr></table></figure><p>清除当前的数据库 <code>flushdb</code></p>\n<p>清空全部数据库  <code>flushall</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> flushdb</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> keys *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>empty array<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>思考：为什么 redis 是 6379 ！粉丝效应！（了解一下即可！）</p>\n<blockquote>\n<p>Redis 是单线程的！</p>\n</blockquote>\n<p>明白 Redis 是很快的，官方表示，Redis 是基于内存操作，CPU 不是 Redis 性能瓶颈，Redis 的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现，就使用单线程了！所以就使用了单线程了！</p>\n<p>Redis 是 C 语言写的，官方提供的数据为 100000+ 的 QPS，完全不比同样是使用 key-vale 的 Memecache 差！</p>\n<p><strong>Redis 为什么单线程还这么快？</strong></p>\n<p>1 、误区 1 ：高性能的服务器一定是多线程的？</p>\n<p>2 、误区 2 ：多线程（CPU 上下文会切换！）一定比单线程效率高！</p>\n<p>先去 CPU &gt; 内存 &gt; 硬盘的速度要有所了解！</p>\n<p>核心：redis 是将所有的数据全部放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU 上下文会切换：耗时的操作！！！），对于内存系统来说，如果没有上下文切换效率就是最高<br>\n的！多次读写都是在一个 CPU 上的，在内存情况下，这个就是最佳的方案！</p>\n<h1 id=\"五大数据类型\"><a class=\"markdownIt-Anchor\" href=\"#五大数据类型\">#</a> 五大数据类型</h1>\n<blockquote>\n<p>官网文档</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210516201315950.png\" alt=\"image-20210516201315950\"></p>\n<p><code>全段翻译：</code></p>\n<p>Redis 是一个开源（BSD 许可）的，内存中的数据结构存储系统，它可以用作<mark>数据库、缓存和消息中间件 MQ</mark>。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合<br>\n（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA 脚本（Lua scripting）， LRU 驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis 哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。</p>\n<blockquote>\n<p>移动 key</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> move name <span class=\"token number\">1</span> <span class=\"token comment\"># 将 key 为 name 的 key 移动到 1 号数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> keys *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr></table></figure><blockquote>\n<p>我们现在讲解的所有命令大家一定要全部记住，后面我们使用 SpringBoot。Jedis，所有的方法就是这些命令！</p>\n<p>单点登录</p>\n</blockquote>\n<h2 id=\"redis-key\"><a class=\"markdownIt-Anchor\" href=\"#redis-key\">#</a> Redis-Key</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *  <span class=\"token comment\"># 查看所有的 key</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>empty list or <span class=\"token builtin class-name\">set</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> name kuangshen  <span class=\"token comment\"># set key</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> age <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> EXISTS name  <span class=\"token comment\"># 判断当前的 key 是否存在</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> EXISTS name</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> move name <span class=\"token number\">1</span> <span class=\"token comment\"># 将 key 为 name 的 key 移动到 1 号数据库</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#################################################</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token keyword\">select</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> keys *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> name qinjiang</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token function\">clear</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get name</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token string\">\"qinjiang\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> EXPIRE name <span class=\"token number\">10</span> <span class=\"token comment\"># 设置 key 的过期时间，单位是秒</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name  <span class=\"token comment\"># 查看当前 key 的剩余时间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl name</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> -</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get name</pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">type</span> name  <span class=\"token comment\"># 查看当前 key 的一个类型！</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>string</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">127</span> .0.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">type</span> age</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>string</pre></td></tr></table></figure><p>后面如果遇到不会的命令，可以在官网查看帮助文档！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210516202657996.png\" alt=\"image-20210516202657996\"></p>\n<h2 id=\"string字符串\"><a class=\"markdownIt-Anchor\" href=\"#string字符串\">#</a> String（字符串）</h2>\n<p>90% 的 java 程序员使用 redis 只会使用一个 String 类型！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> key1 v1\t\t<span class=\"token comment\"># 设置值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key1\t\t<span class=\"token comment\"># 获得值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\"v1\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *\t\t\t<span class=\"token comment\"># 获得所有的 key</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"key1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists key1\t\t<span class=\"token comment\"># 判断某一个 key 是否存在</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> append key1 hello  <span class=\"token comment\"># 追加字符串，如果当前 key 不存在，就相当于 set key</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key1</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token string\">\"v1hello\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> strlen key1\t\t<span class=\"token comment\"># 获取字符串的长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> append key1 mao</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> strlen key1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">\"v1hellomao\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># i++</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># 步长 i+=</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> views <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get views</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr views\t\t<span class=\"token comment\"># 自增 1  浏览量为 1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr views</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get views</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decr views\t\t<span class=\"token comment\"># 自减 1   浏览量 - 1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decr views</pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decr views</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> -1</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get views</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token string\">\"-1\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incrby views <span class=\"token number\">10</span>\t\t<span class=\"token comment\">#可以设置步长，指定增量</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decrby views <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\"># 字符串范围 range</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> key1 hello,mao\t\t<span class=\"token comment\"># 设置 key1 的值</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token string\">\"hello,mao\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getrange key1 <span class=\"token number\">0</span> <span class=\"token number\">3</span>\t\t<span class=\"token comment\"># 截取字符串 [0,3]</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token string\">\"hell\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getrange key1 <span class=\"token number\">0</span> -1\t\t<span class=\"token comment\"># 获取全部的字符串 和 get key 是一样的</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token string\">\"hello,mao\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># 替换！</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> key2 abcdefg</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key2</pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token string\">\"abcdefg\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setrange key2 <span class=\"token number\">1</span> XX\t\t<span class=\"token comment\">#替换指定位置开始的字符串</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key2</pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token string\">\"aXXdefg\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\"># setex (set with expire) # 设置过期时间</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># setnx (set if not exist) # 不存在再设置 (在分布式锁中常常使用)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setex key3 <span class=\"token number\">30</span> hello\t\t<span class=\"token comment\"># 设置 key3 的值为 hello，30 秒后过期</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl key3</pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">26</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key3</pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setnx mykey redis\t\t<span class=\"token comment\"># 如果 mykey 不存在，创建 mykey</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"key2\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mykey\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"key1\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl key3</pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> -2</pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setnx mykey MongoDB\t\t<span class=\"token comment\"># 如果 mykey 存在，创建失败</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get mykey</pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token string\">\"redis\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\"># mset</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\"># mget</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mset k1 v1 k2 v2 k3 v3\t\t<span class=\"token comment\">#同时设置多个值</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> keys *</pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k2\"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k3\"</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"k1\"</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mget k1 k2 k3\t\t<span class=\"token comment\"># 同时获取多个值</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"v1\"</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"v2\"</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"v3\"</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> msetnx k1 v1 k4 v4\t\t<span class=\"token comment\"># msetnx 是一个原子性的操作，要么一起成功，要么一起失败</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get k4</pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\"># 对象</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token builtin class-name\">set</span> user:1<span class=\"token punctuation\">&#123;</span>name:zhangsan,age:3<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\"># 设置一个 user：1 对象 值为 json 字符来保存一个对象！</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\"># 这里的 key 是一个巧妙地设计：user:&#123;id&#125;:&#123;filed&#125;, 如此设计在 Redis 中是完全 OK 了！</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mset user:1:name zhangsan user:1:age <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mget user:1:name user:1:age</pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>getset <span class=\"token comment\"># 先 get 然后再 set</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getset db redis\t\t<span class=\"token comment\"># 如果不存在值，则返回 nil</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get db</pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token string\">\"redis\"</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getset db MongoDB\t\t<span class=\"token comment\"># 如果存在值，获取原来的值，并设置新的值</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token string\">\"redis\"</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get db</pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token string\">\"MongoDB\"</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr></table></figure><p>数据结构是相通的！</p>\n<p>String 类似的使用场景：value 除了是我们的字符串还可以是我们的数字！</p>\n<ul>\n<li>计数器</li>\n<li>统计多单位的数量</li>\n<li>粉丝数</li>\n<li>对象缓存存储！</li>\n</ul>\n<h2 id=\"list列表\"><a class=\"markdownIt-Anchor\" href=\"#list列表\">#</a> List（列表）</h2>\n<p>基本的数据类型，列表</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210516211032480.png\" alt=\"image-20210516211032480\"></p>\n<p>在 redis 里面，我们可以把 list 玩成 ，栈、队列、阻塞队列！</p>\n<p>所有的 list 命令都是用 l 开头的，Redis 不区分大小命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list one\t\t<span class=\"token comment\">#将一个值或多个值插入到列表的头部（左）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list two</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list three</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1\t\t<span class=\"token comment\"># 获取 list 中的值！</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> <span class=\"token number\">1</span>\t\t<span class=\"token comment\"># 通过区间获取具体的值！</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush list right\t\t<span class=\"token comment\">#将一个值或多个插入到列表尾部（右）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"right\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>lpop</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>rpop</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"right\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpop list \t\t<span class=\"token comment\"># 移除 list 的第一个元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpop list\t\t<span class=\"token comment\"># 移除 list 的最后一个元素</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token string\">\"right\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Lindex</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lindex list <span class=\"token number\">1</span>\t\t<span class=\"token comment\"># 通过下标获得 list 中的某一个值！</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lindex list <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Llen</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list one</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list two</pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list three</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> llen list\t\t<span class=\"token comment\"># 返回列表的长度</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>移除指定的值！</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>lrem</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrem list <span class=\"token number\">1</span> one\t\t<span class=\"token comment\"># 移除 list 集合中指定个数的 value，精确匹配</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrem list <span class=\"token number\">2</span> three</pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> -1\t<span class=\"token comment\"># 移除 list 集合中指定个数的 value，移除 2 个 three</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>trim 修剪：list 截断</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello</pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello1</pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello2</pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello3</pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ltrim mylist <span class=\"token number\">1</span> <span class=\"token number\">2</span>\t<span class=\"token comment\"># 通过下标截取指定的长度，这个 list 已经被改变了，截断了只剩下截取的元素！</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange mylist <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello1\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello2\"</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>rpoplpush <span class=\"token comment\"># 移除列表的最后一个元素并移动到新的列表当中</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello</pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello1</pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello2</pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpoplpush mylist myotherlist\t <span class=\"token comment\"># 移除列表的最后一个元素，并移动到新的列表当中！</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token string\">\"hello2\"</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange mylist <span class=\"token number\">0</span> -1\t<span class=\"token comment\">#查看原来的列表</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello1\"</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myotherlist <span class=\"token number\">0</span> -1\t<span class=\"token comment\">#查看目标列表中，确实存在该值</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello2\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>lset <span class=\"token comment\"># 将列表中指定下标的值替换为另外一个值，更新操作</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists list\t\t<span class=\"token comment\"># 判断这个列表是否存在</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lset list <span class=\"token number\">0</span> item\t<span class=\"token comment\"># 如果不存在列表我们去更新就会报错</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR no such key</pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpush list value1</pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lset list <span class=\"token number\">0</span> item\t<span class=\"token comment\"># 如果存在，就更新下标的值</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange list <span class=\"token number\">0</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"item\"</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lset list <span class=\"token number\">1</span> other\t<span class=\"token comment\"># 如果存在列表，但不存在值也会报错</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR index out of range</pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>linsert\t<span class=\"token comment\"># 将某个具体的 value 插入到列表中某个元素的前面后者后面</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist hello</pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush mylist world</pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> linsert mylist before world other\t<span class=\"token comment\"># 在 world 前面插入 other</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange mylist <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"other\"</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> linsert mylist after world new\t<span class=\"token comment\"># 在 world 后面插入 new</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange mylist <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"other\"</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"new\"</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr></table></figure><blockquote>\n<p>小结</p>\n</blockquote>\n<ul>\n<li>他实际上是一个链表，before Node after ， 它的 left，right 都可以插入值</li>\n<li>如果 key 不存在，创建新的链表</li>\n<li>如果 key 存在，新增内容</li>\n<li>如果移除了所有值，空链表，也代表不存在！</li>\n<li>在两边插入或者改动值效率最高！如果操作中间元素，相对来说效率会低一点</li>\n</ul>\n<p>消息排队！消息队列 （Lpush，Rpop），栈（Lpush，Lpop）</p>\n<h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> Set（集合）</h2>\n<p>set 中的值是不能重读的！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset hello\t\t<span class=\"token comment\"># set 集合中添加元素</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset mao</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset lovemao</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smembers myset\t\t<span class=\"token comment\"># 查看指定 set 的所有值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SISMEMBER myset hello\t<span class=\"token comment\">#判断某一个值是不是在 set 集合中！，存在返回 1，不存在返回 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SISMEMBER myset world</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SCARD myset\t\t<span class=\"token comment\"># 获取 set 集合中的内容元素个数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset lovemao2</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> scard myset</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>srem</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> srem myset hello\t\t<span class=\"token comment\"># 移除 set 集合中的指定元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> scard myset</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token comment\"># 无序不重复集合。抽随机！</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset\t\t<span class=\"token comment\"># 随机抽选出一个元素</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset</pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset <span class=\"token number\">2</span>\t\t<span class=\"token comment\">#随机抽选出指定个数的元素</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SRANDMEMBER myset <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>删除指定的key：srem，随机删除key：spop！</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> spop myset\t\t<span class=\"token comment\"># 随机删除一些 set 集合中的元素！</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token string\">\"lovemao\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> spop myset</pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset</pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lovemao2\"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># 将一个指定的值移动到另外一个 set 集合中</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset hello</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset</pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR wrong number of arguments <span class=\"token keyword\">for</span> <span class=\"token string\">'sadd'</span> <span class=\"token builtin class-name\">command</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset world</pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset mao</pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd myset2 set2</pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smove myset myset2 mao\t<span class=\"token comment\"># 将一个指定的值，移动到另外一个 set 集合中</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset</pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SMEMBERS myset2</pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"set2\"</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>微博，B站，共同关注！<span class=\"token punctuation\">(</span>并集<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>数字集合类：</pre></td></tr><tr><td data-num=\"92\"></td><td><pre> - 差集 SDIFF</pre></td></tr><tr><td data-num=\"93\"></td><td><pre> - 交集 SINTER</pre></td></tr><tr><td data-num=\"94\"></td><td><pre> - 并集 SUNION</pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd key1 b</pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd key1 c</pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd key2 c</pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd key2 d</pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd key2 e</pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SDIFF key1 key2\t\t<span class=\"token comment\"># 差集</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"a\"</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"b\"</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SINTER key1 key2\t\t<span class=\"token comment\"># 交集   共同好友就可以这样实现</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"c\"</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SUNION key1 key2\t\t<span class=\"token comment\"># 并集</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"c\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"b\"</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"e\"</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"a\"</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"d\"</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr></table></figure><p>微博，A 用户将所有关注的人放在一个 set 集合中！将他的粉丝也放在一个集合中！</p>\n<p>共同关注，共同爱好，二度好友（六度分割理论）</p>\n<h2 id=\"hash哈希\"><a class=\"markdownIt-Anchor\" href=\"#hash哈希\">#</a> Hash（哈希）</h2>\n<p>Map 集合，key-map! 时候这个值是一个 map 集合！ 本质和 String 类型没有太大区别，还是一个简单的 key-value！</p>\n<p>set myhash field mao</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hset myhash field1 mao\t<span class=\"token comment\"># set 一个具体的 key-value</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget myhash field1\t<span class=\"token comment\"># 获取一个字段值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hmset myhash field1 hello field2 world\t<span class=\"token comment\"># set 多个 key-value</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hmget myhash field1 field2\t<span class=\"token comment\"># 获取多个字段值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hgetall myhash\t<span class=\"token comment\"># 获取全部的数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hdel myhash field1\t<span class=\"token comment\"># 删除 hash 指定的 key 字段！对应的 value 值也就消失了！</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hgetall myhash</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>hlen <span class=\"token comment\"># 获取 hash 表的字段数量！</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hmset myhash field1 hello field2 world</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hgetall myhash</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field1\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hlen myhash\t<span class=\"token comment\"># 获取 hash 表的字段数量！</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> HEXISTS myhash field1\t<span class=\"token comment\"># 判断 hash 中指定字段是否存在！</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> HEXISTS myhash field3</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 只获得所有 field</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 只获得所有 value</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hkeys myhash\t<span class=\"token comment\"># 只获得所有 field</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field2\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"field1\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hvals myhash\t<span class=\"token comment\"># 只获得所有 value</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"world\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>incr  decr</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hset myhash field3 <span class=\"token number\">5</span>\t<span class=\"token comment\"># 指定增量</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> HINCRBY myhash field3 <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> HINCRBY myhash field3 -1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hsetnx myhash field4 hello\t<span class=\"token comment\">#如果不存在则可以设置</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hsetnx myhash field4 hello\t<span class=\"token comment\"># 如果存在则不能设置</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr></table></figure><p>hash 变更的数据 user name age，尤其是用户信息之类的，经常变动的信息！hash 更适合于对象的存储，而 string 更加适合字符串的存储！</p>\n<h2 id=\"zset有序集合\"><a class=\"markdownIt-Anchor\" href=\"#zset有序集合\">#</a> Zset（有序集合）</h2>\n<p>在 set 的基础上，增加了一个值，set k1 v1 zset k1 score1 v1</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myset <span class=\"token number\">1</span> one\t\t<span class=\"token comment\">#添加一个值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myset <span class=\"token number\">2</span> two <span class=\"token number\">3</span> three\t<span class=\"token comment\">#添加多个值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ZRANGE myset <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"one\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"two\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"three\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>排序如何实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd salary <span class=\"token number\">2500</span> xiaohong\t<span class=\"token comment\"># 添加三个用户</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd salary <span class=\"token number\">5000</span> zhangsan</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd salary <span class=\"token number\">500</span> mao</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># ZRANGEBYSCORE key min max</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ZRANGEBYSCORE salary -inf +inf\t<span class=\"token comment\">#显示全部的用户 从小到大</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohong\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ZREVRANGE salary <span class=\"token number\">0</span> -1\t<span class=\"token comment\"># 从大到小进行排序</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ZRANGEBYSCORE salary -inf +inf withscores\t<span class=\"token comment\"># 显示全部的用户并且附带成绩</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"500\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohong\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"2500\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ZRANGEBYSCORE salary -inf <span class=\"token number\">2500</span> withscores\t<span class=\"token comment\"># 显示工资小于 2500 员工的升序排列</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"500\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohong\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"2500\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 移除 rem 中的元素</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange salary <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohong\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrem salary xiaohong\t<span class=\"token comment\"># 移除有序集合中的指定的元素</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange salary <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mao\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zcard salary\t\t<span class=\"token comment\"># 获取有序集合中的个数</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myset <span class=\"token number\">1</span> hello</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myset <span class=\"token number\">2</span> world <span class=\"token number\">3</span> mao</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zcount myset <span class=\"token number\">1</span> <span class=\"token number\">3</span>\t<span class=\"token comment\"># 获取指定区间的成员数量</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zcount myset <span class=\"token number\">1</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr></table></figure><p>其余的一些 API，通过我们的学习，剩下的如果工作中又需要，这个时候可以去查看官方文档！</p>\n<p>案例思路：set 排序  存储班级成绩表  工资表排序！</p>\n<p>普通消息，1，重要消息，2，带权重进行判断！</p>\n<p>排行榜应用实现，取 Top 值</p>\n<h1 id=\"三种特殊数据类型\"><a class=\"markdownIt-Anchor\" href=\"#三种特殊数据类型\">#</a> 三种特殊数据类型</h1>\n<h2 id=\"geospatial-地理位置\"><a class=\"markdownIt-Anchor\" href=\"#geospatial-地理位置\">#</a> Geospatial 地理位置</h2>\n<p>朋友的定位，附近的人，打车距离计算？</p>\n<p>Redis 的 Geo 在 Redis3.2 版本就推出了！ 这个功能可以推算地理位置的信息，两地之间的距离，方圆几里的人！</p>\n<p>可以查询一些测试数据：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qaW5nd2VpZHUuYm1jeC5jb20v\">https://jingweidu.bmcx.com/</span></p>\n<p>只有 六个命令：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210517220126455.png\" alt=\"image-20210517220126455\"></p>\n<blockquote>\n<p>geoadd</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210517221324145.png\" alt=\"image-20210517221324145\"></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">##########################################################</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># geoadd 添加地理位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 规则：两级无法直接添加，我们一般会下载城市数据，直接通过 java 程序一次性导入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 参数 key 值（经度，维度，名称）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 由 EPSG：900913 / EPSG：3785 / OSGEO：41001 指定的确切限制如下：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 有效经度为 - 180 至 180 度。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 有效纬度为 - 85.05112878 至 85.05112878 度。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 当用户尝试索引超出指定范围的坐标时，该命令将报告错误。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">34.23</span> <span class=\"token number\">108.93</span> nanchang</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR invalid longitude,latitude pair <span class=\"token number\">34.230000</span>,108.930000</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">116.23</span> <span class=\"token number\">40.22</span> beijing</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">121.48</span> <span class=\"token number\">31.40</span> shanghai</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">106.54</span> <span class=\"token number\">29.40</span> chongqing</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">113.88</span> <span class=\"token number\">22.55</span> shenzhen</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">120.21</span> <span class=\"token number\">30.20</span> hangzhou</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geoadd china:city <span class=\"token number\">108.93</span> <span class=\"token number\">34.23</span> xian</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><blockquote>\n<p>geopos</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEOPOS china:city beijing\t<span class=\"token comment\"># 获取指定的城市的经度和纬度！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"116.23000055551528931\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"40.2200010338739844\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEOPOS china:city chongqing</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"106.54000014066696167\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"29.39999880018641676\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEOPOS china:city beijing chongqing</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"116.23000055551528931\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"40.2200010338739844\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"106.54000014066696167\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"29.39999880018641676\"</span></pre></td></tr></table></figure><blockquote>\n<p>GEODIST</p>\n</blockquote>\n<p>两人之间的距离</p>\n<p>单位：</p>\n<ul>\n<li><strong>m</strong> 表示单位为米。</li>\n<li><strong>km</strong> 表示单位为千米。</li>\n<li><strong>mi</strong> 表示单位为英里。</li>\n<li><strong>ft</strong> 表示单位为英尺。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEODIST china:city beijing shanghai km\t<span class=\"token comment\"># 查看上海到北京的直线距离</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\"1088.7854\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEODIST china:city beijing chongqing km\t<span class=\"token comment\"># 查看重庆到北京的直线距离</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"1491.6716\"</span></pre></td></tr></table></figure><blockquote>\n<p>GEORADIUS 以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。</p>\n</blockquote>\n<p>我附近的人？（获得所有附近的人的地址，定位！) 通过半径来查询！</p>\n<p>获得指定数量的人，200</p>\n<p>所有的数据应该录入：china:city，才会让结果更加清晰！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">1000</span> km\t<span class=\"token comment\"># 以 110，30 这个经纬度为中心，寻找方圆 1000km 内的城市</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shenzhen\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hangzhou\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">500</span> km</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">500</span> km withdist\t<span class=\"token comment\"># 显示到中心距离的位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"340.8679\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"481.1540\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">500</span> km withcoord\t<span class=\"token comment\"># 显示他人的定位信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"106.54000014066696167\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"29.39999880018641676\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"108.92999857664108276\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"34.23000121926852302\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">500</span> km withdist withcoord count <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"340.8679\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"106.54000014066696167\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"29.39999880018641676\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUS china:city <span class=\"token number\">110</span> <span class=\"token number\">30</span> <span class=\"token number\">500</span> km withdist withcoord count <span class=\"token number\">2</span>\t<span class=\"token comment\"># 筛选出指定的结果！</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"340.8679\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"106.54000014066696167\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"29.39999880018641676\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"481.1540\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"108.92999857664108276\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"34.23000121926852302\"</span></pre></td></tr></table></figure><blockquote>\n<p>GEORADIUSBYMEMBER</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 找出位于指定元素周围的其他元素！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUSBYMEMBER china:city beijing <span class=\"token number\">1000</span> km</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"beijing\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> GEORADIUSBYMEMBER china:city shanghai <span class=\"token number\">400</span> km</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hangzhou\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shanghai\"</span></pre></td></tr></table></figure><blockquote>\n<p>GEOHASH  返回一个或多个位置元素的 Geohash 表示。</p>\n</blockquote>\n<p>该命令将返回 11 个字符的 Geohash 字符串</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 将二维的经纬度转换为一维的字符串，如果两个字符串越接近，那么则距离越近！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> geohash china:city beijing chongqing</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wx4sucu47r0\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"wm5z22h53v0\"</span></pre></td></tr></table></figure><blockquote>\n<p>GEO 底层的实现原理其实就是 Zset！我们可以使用 Zset 命令来操作 geo！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange china:city <span class=\"token number\">0</span> -1\t<span class=\"token comment\"># 查看地图中全部的元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shenzhen\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hangzhou\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shanghai\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"beijing\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrem china:city beijing\t\t<span class=\"token comment\"># 移除指定的元素</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange china:city <span class=\"token number\">0</span> -1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"chongqing\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xian\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shenzhen\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hangzhou\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"shanghai\"</span></pre></td></tr></table></figure><h2 id=\"hyperloglog\"><a class=\"markdownIt-Anchor\" href=\"#hyperloglog\">#</a> Hyperloglog</h2>\n<blockquote>\n<p>什么是基数？</p>\n</blockquote>\n<p 1,3,5,7,8,7=\"\">A</p>\n<p 1,3,5,7,8=\"\">B</p>\n<p>基数（不重复的元素） = 5，可以接受误差！</p>\n<blockquote>\n<p>简介</p>\n</blockquote>\n<p>Redis 2.8.9 版本就更新了 Hyperloglog 数据结构！</p>\n<p>Redis Hyperloglog 基数统计的算法！</p>\n<p>找出位于指定元素周围的其他元素！</p>\n<p><strong>优点：占用的内存是固定，2^64 不同的元素的技术，只需要废 12KB 内存！如果要从内存角度来比较的话 Hyperloglog 首选！</strong></p>\n<p><strong>网页的 UV （一个人访问一个网站多次，但是还是算作一个人！）</strong></p>\n<p>传统的方式， set 保存用户的 id，然后就可以统计 set 中的元素数量作为标准判断！</p>\n<p>这个方式如果保存大量的用户 id，就会比较麻烦！我们的目的是为了计数，而不是保存用户 id；</p>\n<p>大概有 0.81% 错误率！ 统计 UV 任务，可以忽略不计的！</p>\n<blockquote>\n<p>测试使用</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> pfadd myset a b c d e f g h i j\t<span class=\"token comment\"># 创建第一组元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> PFCOUNT myset\t<span class=\"token comment\"># 统计 mykey 中元素的基数数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> pfadd myset2 i jj z x c <span class=\"token function\">v</span> b n m\t<span class=\"token comment\">#创建第二组元素 mykey2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> PFCOUNT myset2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> pfmerge mykey3 myset myset2\t<span class=\"token comment\"># 合并两组 mykey mykey2 =》mykey3 并集</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> pfcount mykey3\t<span class=\"token comment\"># 查看并集的数量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">16</span></pre></td></tr></table></figure><p>如果允许容错，那么一定可以使用 Hyperloglog ！</p>\n<p>如果不允许容错，就使用 set 或者自己的数据类型即可！</p>\n<h2 id=\"bitmap\"><a class=\"markdownIt-Anchor\" href=\"#bitmap\">#</a> Bitmap</h2>\n<p>为什么其他教程都不喜欢讲这些？这些在生活中或者开发中，都有十分多的应用场景，学习了，就是多一个思路！技多不压身！</p>\n<blockquote>\n<p>位存储</p>\n</blockquote>\n<p>统计用户信息，活跃，不活跃！ 登录 、 未登录！ 打卡， 365 打卡！ 两个状态的，都可以使用 Bitmaps！</p>\n<p>Bitmap 位图，数据结构！ 都是操作二进制位来进行记录，就只有 0 和 1 两个状态！</p>\n<p>365 天 = 365 bit 1 字节 = 8bit 46 个字节左右！</p>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>使用 bitmap 来记录 周一到周日的打卡！</p>\n<p>周一打卡：1 周二打卡：1…</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210518202441951.png\" alt=\"image-20210518202441951\"></p>\n<p>查看某一天是否打卡！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getbit sign <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> getbit sign <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>统计操作，统计打卡的天数！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> bitcount sign\t<span class=\"token comment\"># 统计这周的打卡天数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">4</span></pre></td></tr></table></figure><h1 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h1>\n<p>Redis 事务本质：一组命令的集合！ 一个事务中的所有命令都会被序列化，在事务执行过程的中，会按照顺序执行！</p>\n<p>一次性、顺序性、排他性！执行一些列的命令！</p>\n<p>Redis 事务没有没有隔离级别的概念！</p>\n<p>所有的命令在事务中，并没有直接被执行！只有发起执行命令的时候才会执行！Exec</p>\n<p><mark>Redis 单条命令是保存原子性的，但是事务不保证原子性！</mark></p>\n<p>redis 的事务：</p>\n<ul>\n<li>开启事务（multi）</li>\n<li>命令入队（…）</li>\n<li>执行事务（exec）</li>\n</ul>\n<blockquote>\n<p>正常执行事务！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi\t\t<span class=\"token comment\"># 开启事务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k1 v1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k2 v2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> get k2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k3 v3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span>\t\t<span class=\"token comment\"># 执行事务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> OK</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> OK</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"v2\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> OK</pre></td></tr></table></figure><blockquote>\n<p>放弃事务！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi\t\t<span class=\"token comment\"># 开启事务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k1 v1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k2 v2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k4 v4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> DISCARD\t\t<span class=\"token comment\"># 取消事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get k4\t\t<span class=\"token comment\"># 事务队列中的命令都不会被执行！</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>编译型异常（代码有问题！命令有错！），事务中所有的命令都不会被执行！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k1 v1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k2 v2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k3 v3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> getset k3\t\t<span class=\"token comment\"># 错误的命令</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR wrong number of arguments <span class=\"token keyword\">for</span> <span class=\"token string\">'getset'</span> <span class=\"token builtin class-name\">command</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k4 v4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k5 v5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span>\t\t<span class=\"token comment\"># 执行事务报错！</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> EXECABORT Transaction discarded because of previous errors.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get k5\t\t<span class=\"token comment\"># 所有的命令都不会被执行！</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>运行时异常（1/0）， 如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛出异常！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> k1 <span class=\"token string\">\"v1\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> incr k1\t\t<span class=\"token comment\"># 执行的时候失败</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k2 v2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> k3 v3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> get k3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span>\t\t<span class=\"token comment\"># 虽然第一天命令报错，但依旧正常执行成功了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR value is not an integer or out of range</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> OK</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> OK</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"v3\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get k2</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token string\">\"v2\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get k3</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">\"v3\"</span></pre></td></tr></table></figure><blockquote>\n<p>监控！Watch（面试常问！）</p>\n</blockquote>\n<p><strong>悲观锁：</strong></p>\n<ul>\n<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>\n</ul>\n<p><strong>乐观锁：</strong></p>\n<ul>\n<li>\n<p>很乐观，认为什么时候都不会出问题，所以不会上锁！ 更新数据的时候去判断一下，在此期间是否有人修改过这个数据，</p>\n</li>\n<li>\n<p>获取 version</p>\n</li>\n<li>\n<p>更新的时候比较 version</p>\n</li>\n</ul>\n<blockquote>\n<p>Redis 测监视测试</p>\n</blockquote>\n<p>正常执行成功！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> money <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> out <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token function\">watch</span> money\t\t<span class=\"token comment\"># 监视 money 对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi\t\t<span class=\"token comment\"># 事务正常结束，数据期间没有发生变动，这个时候就正常执行成功！</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> DECRBY money <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> INCRBY out <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">20</span></pre></td></tr></table></figure><p>测试多线程修改值，使用 watch 可以当做 redis 的乐观锁操作！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token function\">watch</span> money\t\t<span class=\"token comment\"># 监视 money</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> multi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> DECRBY money <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> INCRBY out <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:6379<span class=\"token punctuation\">(</span>TX<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token builtin class-name\">exec</span>\t\t<span class=\"token comment\"># 执行之前另外一个线程修改了这个 money，就会导致事务执行失败！</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>如果修改失败，获取最新的值就好</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210518205812951.png\" alt=\"image-20210518205812951\"></p>\n<h1 id=\"jedis\"><a class=\"markdownIt-Anchor\" href=\"#jedis\">#</a> Jedis</h1>\n<p>我们要使用 Java 来操作 Redis，知其然并知其所以然，授人以渔！ 学习不能急躁，慢慢来会很快！</p>\n<blockquote>\n<p>什么是 Jedis 是 Redis 官方推荐的 java 连接开发工具！ 使用 Java 操作 Redis 中间件！如果你要使用 java 操作 redis，那么一定要对 Jedis 十分的熟悉！</p>\n</blockquote>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>1 、导入对应的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 导入 jedis 的包 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!--fastjson--></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.60<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2 、编码测试：</p>\n<ul>\n<li>\n<p>连接数据库</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestPing</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 1、new Jedis 对象即可</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Jedis</span> jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//jedis 所有的命令就是我们之前学习的所有指令</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>操作命令</p>\n</li>\n<li>\n<p>断开连接！</p>\n</li>\n<li>\n<p>输出：</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210518211611577.png\" alt=\"image-20210518211611577\"></p>\n<h3 id=\"常用的api\"><a class=\"markdownIt-Anchor\" href=\"#常用的api\">#</a> 常用的 API</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbGxvYW1oaC9yZWRpcy1zdHVkeQ==\">代码</span></p>\n<p>String</p>\n<p>List</p>\n<p>Set</p>\n<p>Hash</p>\n<p>Zset</p>\n<blockquote>\n<p>所有的 api 命令，就是我们对应的上面学习的指令，一个都没有变化！</p>\n</blockquote>\n<h3 id=\"事务-2\"><a class=\"markdownIt-Anchor\" href=\"#事务-2\">#</a> 事务</h3>\n<h1 id=\"springboot整合\"><a class=\"markdownIt-Anchor\" href=\"#springboot整合\">#</a> SpringBoot 整合</h1>\n<p>SpringBoot 操作数据：spring-data jpa jdbc mongodb redis！</p>\n<p>SpringData 也是和 SpringBoot 齐名的项目！</p>\n<p>说明： 在 SpringBoot2.x 之后，原来使用的 jedis 被替换为了 lettuce?</p>\n<p>jedis : 采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全的，使用 jedis pool 连接池！ 更像 BIO 模式</p>\n<p>lettuce : 采用 netty，实例可以再多个线程中进行共享，不存在线程不安全的情况！可以减少线程数据了，更像 NIO 模式</p>\n<p>源码分析：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"redisTemplate\"</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 我们可以自己定义一个 redisTemplate 来替换这个默认的！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@ConditionalOnSingleCandidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 默认的 RedisTemplate 没有过多的设置，redis 对象都是需要序列化！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 两个泛型都是 Object，Object 的类型，我们要使用需要强制转换 &lt;String, Object></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ttemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span>\t<span class=\"token comment\">// 由于 String 是 redis 中最常用使用的类型，所以说单独提出来了一个 bean！</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token annotation punctuation\">@ConditionalOnSingleCandidate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">StringRedisTemplate</span> <span class=\"token function\">stringRedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> redisConnectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">StringRedisTemplate</span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\ttemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>redisConnectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>整合测试一下</p>\n</blockquote>\n<p>1 、导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>2 、配置连接</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Springboot 所有的配置类，都有一个自动配置类 RedisAutoConfiguration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 自动配置类都会绑定一个 properties 配置文件 RedisProperties</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 配置 redis</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 127.0.0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr></table></figure><p>3 、测试！</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Redis02SpringbootApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">//redisTemplate 操作不同的数据类型，api 和我们的指令是一样的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token comment\">//opsForValue 操作字符串 类似 String</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token comment\">//opsForList 操作 List 类型 List</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// opsForSet</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// opsForHash</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// opsForZSet</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// opsForGeo</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// opsForHyperLogLog</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 除了基本的操作，我们常用的方法都可以直接通过 redisTemplate 操作，比如事务，和基本的 crud</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">/* 获取 redis 的连接对象</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tRedisConnection connection = redisTemplate.getConnectionFactory ().getConnection ();</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tconnection.flushDb ();</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tconnection.flushAll ();*/</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mykey\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"关注狂神说公众号\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mykey\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210519205527214.png\" alt=\"image-20210519205527214\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210519205732105.png\" alt=\"image-20210519205732105\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210519210859444.png\" alt=\"image-20210519210859444\"></p>\n<p>我们来编写一个自己的 RedisTemplate</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//RedisTemplate 序列化配置 -- >  注意要使用 @Qualifier (\"redisTemplate\") 避免歧义（测试类中有使用案例）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"all\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> factory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// Json 序列化配置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ObjectMapper</span> om <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyAccessor</span><span class=\"token punctuation\">.</span>ALL<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JsonAutoDetect<span class=\"token punctuation\">.</span>Visibility</span><span class=\"token punctuation\">.</span>ANY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        om<span class=\"token punctuation\">.</span><span class=\"token function\">enableDefaultTyping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper<span class=\"token punctuation\">.</span>DefaultTyping</span><span class=\"token punctuation\">.</span>NON_FINAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        jackson2JsonRedisSerializer<span class=\"token punctuation\">.</span><span class=\"token function\">setObjectMapper</span><span class=\"token punctuation\">(</span>om<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// String 的序列化</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">StringRedisSerializer</span> stringRedisSerializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//key 采用 String 的序列化方式</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//hash 的 key 也采用 String 的序列化方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span>stringRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//value 序列化方式采用 jackson</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">//hash 的 value 序列化方式采用 jackson</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jackson2JsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所有的 redis 操作，其实对于 java 开发人员来说，十分的简单，更重要的是要去理解 redis 的思想和每一种数据结构的用处和作用场景！</p>\n<h1 id=\"redisconf详解\"><a class=\"markdownIt-Anchor\" href=\"#redisconf详解\">#</a> Redis.conf 详解</h1>\n<p>启动的时候，就通过配置文件来启动！</p>\n<p>工作中，一些小小的配置，可以让你脱颖而出！</p>\n<p><mark>行家有没有，出手就知道</mark></p>\n<blockquote>\n<p>单位</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210519214335523.png\" alt=\"image-20210519214335523\"></p>\n<p>1、配置文件 unit 单位对大小写不敏感！</p>\n<blockquote>\n<p>包含</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210519214516731.png\" alt=\"image-20210519214516731\"></p>\n<p>就是好比我们学习 Spring、Import、include 可以将多个配置文件包含</p>\n<blockquote>\n<p>网络</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">bind</span> <span class=\"token number\">127.0</span>.0.1 -::1 <span class=\"token comment\"># 绑定的 ip</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>protected-mode <span class=\"token function\">yes</span>\t<span class=\"token comment\"># 保护模式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>port <span class=\"token number\">6379</span>\t<span class=\"token comment\"># 端口设置</span></pre></td></tr></table></figure><blockquote>\n<p>通用 GENERAL</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>daemonize <span class=\"token function\">yes</span>\t<span class=\"token comment\"># 以守护进程的方式运行，默认是 no，我们需要自己开启为 yes！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pidfile /var/run/redis_6379.pid\t<span class=\"token comment\"># 如果以后台的方式运行，我们就需要指定一个 pid 文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 日志</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># Specify the server verbosity level.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># This can be one of:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># debug (a lot of information, useful for development/testing)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># notice (moderately verbose, what you want in production probably) 生产环境适用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># warning (only very important / critical messages are logged)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>loglevel notice</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>logfile <span class=\"token string\">\"\"</span>\t<span class=\"token comment\"># 日志的文件位置名</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>databases <span class=\"token number\">16</span>\t<span class=\"token comment\"># 数据库的数量，默认是 16 个数据库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>always-show-logo no\t<span class=\"token comment\"># 是否总是显示 logo</span></pre></td></tr></table></figure><blockquote>\n<p>快照 SNAPSHOTTING</p>\n</blockquote>\n<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb .aof</p>\n<p>redis 是内存数据库，如果没有持久化，那么数据断电即失</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果 3600 秒内，如果至少有一个 key 进行了修改，我们就进行持久化操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>save <span class=\"token number\">3600</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果 300 秒内，如果至少有 10 个 key 进行了修改，我们就进行持久化操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>save <span class=\"token number\">300</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 如果 60 秒内，如果至少有 10000 个 key 进行了修改，我们就进行持久化操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>save <span class=\"token number\">60</span> <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 我们之后学习持久化，会自己定义这个设置！</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>stop-writes-on-bgsave-error <span class=\"token function\">yes</span>\t<span class=\"token comment\"># 持久化如果出错，是否还需要继续工作！</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>rdbcompression <span class=\"token function\">yes</span>\t<span class=\"token comment\"># 是否压缩 rdb 文件，需要消耗一些 cpu 资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rdbchecksum <span class=\"token function\">yes</span>\t<span class=\"token comment\"># 保存 rdb 的时候，进行错误的检查校验！</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">dir</span> ./\t<span class=\"token comment\"># rdb 文件保存的目录！</span></pre></td></tr></table></figure><blockquote>\n<p>REPLICATION 主从复制，我们后面讲解主从复制的时候再进行讲解</p>\n</blockquote>\n<blockquote>\n<p>SECURITY 安全</p>\n</blockquote>\n<p>可以在这里设置 redis 的密码，默认是没有密码！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> config get requirepass\t<span class=\"token comment\"># 获取 redis 的密码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"requirepass\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> config <span class=\"token builtin class-name\">set</span> requirepass <span class=\"token string\">\"lloam\"</span>\t<span class=\"token comment\"># 设置 redis 的密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> config get requirepass</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"requirepass\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"lloam\"</span></pre></td></tr></table></figure><blockquote>\n<p>CLIENTS 限制</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>maxclients <span class=\"token number\">10000</span>\t<span class=\"token comment\"># 设置能连接上 redis 的最大客户端的数量！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>maxmemory <span class=\"token operator\">&lt;</span>bytes<span class=\"token operator\">></span>\t<span class=\"token comment\"># redis 配置最大的内存容量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>maxmemory-policy noeviction\t<span class=\"token comment\"># 内存达到上限之后的处理策略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\"># 移除一些过期的 key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\"># 报错</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\"># ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">1</span> 、volatile-lru：只对设置了过期时间的key进行LRU（默认值）</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">2</span> 、allkeys-lru ： 删除lru算法的key</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">3</span> 、volatile-random：随机删除即将过期key</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">4</span> 、allkeys-random：随机删除</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">5</span> 、volatile-ttl ： 删除即将过期的</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">6</span> 、noeviction ： 永不过期，返回错误</pre></td></tr></table></figure><blockquote>\n<p>APPEND ONLY MODE 模式 aof 配置</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>appendonly no\t<span class=\"token comment\"># 默认是不开启 aof 模式的，默认是使用 rdb 方式持久化的，在大部分所有的情况下，rdb 完全够用！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>appendfilename <span class=\"token string\">\"appendonly.aof\"</span>\t<span class=\"token comment\"># 持久化的文件的名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># appendfsync always\t# 每次修改都会同步数据，消耗性能</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>appendfsync everysec\t<span class=\"token comment\"># 每秒执行一次 也就是每秒同步一次 sync，可能会丢失这 1s 的数据！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># appendfsync no\t# 不执行同步，这个时候操作系统自己同步数据，速度最快！</span></pre></td></tr></table></figure><p>具体的配置，我们在 Redis 持久化中去给大家详细讲解！</p>\n<h1 id=\"redis持久化\"><a class=\"markdownIt-Anchor\" href=\"#redis持久化\">#</a> Redis 持久化</h1>\n<p>面试和工作，持久化都是重点！</p>\n<p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能！</p>\n<h2 id=\"rdbredis-database\"><a class=\"markdownIt-Anchor\" href=\"#rdbredis-database\">#</a> RDB（Redis DataBase）</h2>\n<blockquote>\n<p>什么是 RDB</p>\n</blockquote>\n<p>在主从复制中，rdb 就是备用了！从机上面！</p>\n<p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 Snapshot 快照，它恢复时是将快照文件直接读到内存里。Redis 会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 IO 操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB 方式要比 AOF 方式更加的高效。RDB 的缺点是最后一次持久化后的数据可能丢失。我们默认的就是 RDB，一般情况下不需要修改这个配置！</p>\n<p>有时候在生产环境我们会将这个文件进行备份！</p>\n<p><mark>rdb 保存的文件是 dump.rdb</mark></p>\n<p>都是在我们的配置文件中快照中进行配置的！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520195804095.png\" alt=\"image-20210520195804095\"></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520200107454.png\" alt=\"image-20210520200107454\"></p>\n<blockquote>\n<p>触发机制</p>\n</blockquote>\n<p>1 、save 的规则满足的情况下，会自动触发 rdb 规则</p>\n<p>2 、执行 flushall 命令，也会触发我们的 rdb 规则！</p>\n<p>3 、退出 redis，也会产生 rdb 文件！</p>\n<p>备份就自动生成一个 dump.rdb</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520200658389.png\" alt=\"image-20210520200658389\"></p>\n<blockquote>\n<p>如何恢复 rdb 文件！</p>\n</blockquote>\n<p>1 、只需要将 rdb 文件放在我们 redis 启动目录就可以，redis 启动的时候会自动检查 dump.rdb 恢复其中的数据！</p>\n<p>2 、查看需要存在的位置</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> config get <span class=\"token function\">dir</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"dir\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"/usr/local/bin\"</span>\t<span class=\"token comment\"># 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</span></pre></td></tr></table></figure><blockquote>\n<p>几乎就他自己默认的配置就够用了，但是我们还是需要去学习！</p>\n</blockquote>\n<p>优点：</p>\n<p>1 、适合大规模的数据恢复！</p>\n<p>2 、对数据的完整性要不高！</p>\n<p>缺点：</p>\n<p>1 、需要一定的时间间隔进程操作！如果 redis 意外宕机了，这个最后一次修改数据就没有的了！</p>\n<p>2 、fork 进程的时候，会占用一定的内存空间！！</p>\n<h2 id=\"aofappend-only-file\"><a class=\"markdownIt-Anchor\" href=\"#aofappend-only-file\">#</a> AOF（Append Only File）</h2>\n<p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p>\n<blockquote>\n<p>是什么</p>\n</blockquote>\n<p>以日志的形式来记录每个写操作，将 Redis 执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>\n<p>Aof 保存的是 appendonly.aof 文件</p>\n<blockquote>\n<p>append</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520201705996.png\" alt=\"image-20210520201705996\"></p>\n<p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为 yes 就开启了 aof！</p>\n<p>重启，redis 就可以生效了！</p>\n<p>如果这个 aof 文件有错误，这时候 redis 是启动不起来的吗，我们需要修复这个 aof 文件</p>\n<p>redis 给我们提供了一个工具 <code> redis-check-aof --fix</code></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520202444654.png\" alt=\"image-20210520202444654\"></p>\n<p>如果文件正常，重启就可以直接恢复了！</p>\n<blockquote>\n<p>重写规则说明</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520203003627.png\" alt=\"image-20210520203003627\"></p>\n<p>aof 默认就是文件的无限追加，文件会越来越大！</p>\n<p>如果 aof 文件大于 64m，太大了！ 就会 fork 一个新的进程来将我们的文件进行重写！</p>\n<blockquote>\n<p>优点和缺点！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>appendonly no\t<span class=\"token comment\"># 默认是不开启 aof 模式的，默认是使用 rdb 方式持久化的，在大部分所有的情况下，rdb 完全够用！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>appendfilename <span class=\"token string\">\"appendonly.aof\"</span>\t<span class=\"token comment\"># 持久化的文件的名字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># appendfsync always\t# 每次修改都会同步数据，消耗性能</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>appendfsync everysec\t<span class=\"token comment\"># 每秒执行一次 也就是每秒同步一次 sync，可能会丢失这 1s 的数据！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># appendfsync no\t# 不执行同步，这个时候操作系统自己同步数据，速度最快！</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># rewrite</span></pre></td></tr></table></figure><p>优点：</p>\n<p>1 、每一次修改都同步，文件的完整会更加好！</p>\n<p>2 、每秒同步一次，可能会丢失一秒的数据</p>\n<p>3 、从不同步，效率最高的！</p>\n<p>缺点：</p>\n<p>1 、相对于数据文件来说，aof 远远大于 rdb，修复的速度也比 rdb 慢！</p>\n<p>2 、Aof 运行效率也要比 rdb 慢，所以我们 redis 默认的配置就是 rdb 持久化！</p>\n<h4 id=\"扩展\"><a class=\"markdownIt-Anchor\" href=\"#扩展\">#</a> 扩展：</h4>\n<p>1 、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>\n<p>2 、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF 命令以 Redis 协议追加保存每次写的操作到文件末尾，Redis 还能对 AOF 文件进行后台重写，使得 AOF 文件的体积不至于过大。</p>\n<p>3 、<mark>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</mark></p>\n<p>4 、同时开启两种持久化方式</p>\n<ul>\n<li>在这种情况下，当 redis 重启的时候会优先载入 AOF 文件来恢复原始的数据，因为在通常情况下 AOF 文件保存的数据集要比 RDB 文件保存的数据集要完整。</li>\n<li>RDB 的数据不实时，同时使用两者时服务器重启也只会找 AOF 文件，那要不要只使用 AOF 呢？作者建议不要，因为 RDB 更适合用于备份数据库（AOF 在不断变化不好备份），快速重启，而且不会有 AOF 可能潜在的 Bug，留着作为一个万一的手段。</li>\n</ul>\n<p>5 、性能建议</p>\n<ul>\n<li>因为 RDB 文件只用作后备用途，建议只在 Slave 上持久化 RDB 文件，而且只要 15 分钟备份一次就够了，只保留 save 900 1 这条规则。</li>\n<li>如果 Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只 load 自己的 AOF 文件就可以了，代价一是带来了持续的 IO，二是 AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite 的频率，AOF 重写的基础大小默认值 64M 太小了，可以设到 5G 以上，默认超过原大小 100% 大小重写可以改到适当的数值。</li>\n<li>如果不 Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔 IO，也减少了 rewrite 时带来的系统波动。代价是如果 Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB 文件，载入较新的那个，微博就是这种架构。</li>\n</ul>\n<h1 id=\"redis发布订阅\"><a class=\"markdownIt-Anchor\" href=\"#redis发布订阅\">#</a> Redis 发布订阅</h1>\n<p>Redis 发布订阅 (pub/sub) 是一种<mark>消息通信模式</mark>：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。微信、微博、关注系统！</p>\n<p>Redis 客户端可以订阅任意数量的频道。</p>\n<p>订阅 / 发布消息图：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520205008926.png\" alt=\"image-20210520205008926\"></p>\n<p>第一个：消息发送者， 第二个：频道， 第三个：消息订阅者！</p>\n<p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520205141004.png\" alt=\"image-20210520205141004\"></p>\n<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户<br>\n端：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520205209640.png\" alt=\"image-20210520205209640\"></p>\n<blockquote>\n<p>命令</p>\n</blockquote>\n<p>这些命令被广泛用于构建即时通信应用，比如网络聊天室 (chatroom) 和实时广播、实时提醒等。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520205303771.png\" alt=\"image-20210520205303771\"></p>\n<blockquote>\n<p>测试</p>\n</blockquote>\n<p>订阅端：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> SUBSCRIBE kuangshenshuo\t<span class=\"token comment\">#订阅一个频道 kuangshenshuo</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Reading messages<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">(</span>press Ctrl-C to quit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"subscribe\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"kuangshenshuo\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 等待读取推送的信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span>\t\t<span class=\"token comment\">#消息</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"kuangshenshuo\"</span>\t\t<span class=\"token comment\">#哪个频道的消息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello,kuangshen\"</span>\t\t<span class=\"token comment\"># 消息的具体内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"message\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"kuangshenshuo\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hello,redis\"</span></pre></td></tr></table></figure><p>发送端：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> PUBLISH kuangshenshuo <span class=\"token string\">\"hello,kuangshen\"</span>\t<span class=\"token comment\"># 发布者发送消息到频道！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> PUBLISH kuangshenshuo <span class=\"token string\">\"hello,redis\"</span>\t<span class=\"token comment\"># 发布者发送消息到频道！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><blockquote>\n<p>原理</p>\n</blockquote>\n<p>Redis 是使用 C 实现的，通过分析 Redis 源码里的 pubsub.c 文件，了解发布和订阅机制的底层实现，籍此加深对 Redis 的理解。</p>\n<p>Redis 通过 PUBLISH 、SUBSCRIBE 和 PSUBSCRIBE 等命令实现发布和订阅功能。</p>\n<p>微信：</p>\n<p>通过 SUBSCRIBE 命令订阅某频道后，redis-server 里维护了一个字典，字典的键就是一个个 频道！而字典的值则是一个链表，链表中保存了所有订阅这个 channel 的客户端。SUBSCRIBE 命令的关键，就是将客户端添加到给定 channel 的订阅链表中。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520210737723.png\" alt=\"image-20210520210737723\"></p>\n<p>通过 PUBLISH 命令向订阅者发送消息，redis-server 会使用给定的频道作为键，在它所维护的 channel 字典中查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520210838355.png\" alt=\"image-20210520210838355\"></p>\n<p>Pub/Sub 从字面上理解就是发布（Publish）与订阅（Subscribe），在 Redis 中，你可以设定对某一个 key 值进行消息发布及消息订阅，当一个 key 值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>\n<p><strong>使用场景：</strong></p>\n<p>1 、实时消息系统！</p>\n<p>2 、事实聊天！（频道当做聊天室，将信息回显给所有人即可！）</p>\n<p>3 、订阅，关注系统都是可以的！</p>\n<p>稍微复杂的场景我们就会使用 消息中间件 MQ</p>\n<h1 id=\"redis主从复制\"><a class=\"markdownIt-Anchor\" href=\"#redis主从复制\">#</a> Redis 主从复制</h1>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>主从复制，是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点<br>\n (master/leader)，后者称为从节点 (slave/follower)；== 数据的复制是单向的，只能由主节点到从节点。==Master 以写为主，Slave 以读为主。</p>\n<p><mark>默认情况下，每台 Redis 服务器都是主节点；</mark></p>\n<p>且一个主节点可以有多个从节点 (或没有从节点)，但一个从节点只能有一个主节点。（）</p>\n<p><strong>主从复制的作用主要包括：</strong></p>\n<p>1 、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p>\n<p>2 、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</p>\n<p>3 、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务 ==（即写 Redis 数据时应用连接主节点，读 Redis 数据时应用连接从节点）==，分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。</p>\n<p>4 、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p>\n<p>一般来说，要将 Redis 运用于工程项目中，只使用一台 Redis 是万万不能的（会宕机，一般一主二从），原因如下：</p>\n<p>1 、从结构上，单个 Redis 服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</p>\n<p>2 、从容量上，单个 Redis 服务器内存容量有限，就算一台 Redis 服务器内存容量为 256G，也不能将所有内存用作 Redis 存储内存，一般来说，<mark>单台 Redis 最大使用内存不应该超过 20G。</mark></p>\n<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是 &quot;多读少写&quot;。</p>\n<p>对于这种场景，我们可以使如下这种架构：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520211238731.png\" alt=\"image-20210520211238731\"></p>\n<p>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！</p>\n<p>只要在公司中，主从复制就是必须要使用的，因为在真实的项目中不可能单机使用 Redis！</p>\n<h2 id=\"环境配置\"><a class=\"markdownIt-Anchor\" href=\"#环境配置\">#</a> 环境配置</h2>\n<p>只配置从库，不用配置主库！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> info replication\t\t<span class=\"token comment\">#查看当前库的信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Replication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>role:master\t\t<span class=\"token comment\"># 角色  master</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>connected_slaves:0\t\t<span class=\"token comment\"># 没有从机</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>master_failover_state:no-failover</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>master_replid:30a335d3ec84363d738343b2e57607f0ef6cca90</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>master_replid2:0000000000000000000000000000000000000000</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>master_repl_offset:0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>second_repl_offset:-1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>repl_backlog_active:0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>repl_backlog_size:1048576</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>repl_backlog_first_byte_offset:0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>repl_backlog_histlen:0</pre></td></tr></table></figure><p>复制 3 个配置文件，然后修改对应的信息</p>\n<p>1 、端口</p>\n<p>2 、pid 名字</p>\n<p>3 、log 文件名字</p>\n<p>4 、dump.rdb 名字</p>\n<p>修改完毕之后，启动我们的 3 个 redis 服务器，可以通过进程信息查看！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520213559496.png\" alt=\"image-20210520213559496\"></p>\n<h3 id=\"一主二从\"><a class=\"markdownIt-Anchor\" href=\"#一主二从\">#</a> 一主二从</h3>\n<p><mark>默认情况下，每台 Redis 服务器都是主节点；</mark> 我们一般情况下只用配置从机就好了！</p>\n<p>认老大！ 一主 （ 79 ）二从（ 80 ， 81 ）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> SLAVEOF <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span>\t\t<span class=\"token comment\"># SLAVEOF host 6379 找谁当自己的老大！</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:638<span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>></span> info replication</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Replication</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>role:slave\t\t<span class=\"token comment\"># 当前角色是从机</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>master_host:127.0.0.1\t\t<span class=\"token comment\"># 可以看到主机的信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>master_port:6379</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>master_link_status:up</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>master_last_io_seconds_ago:6</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>master_sync_in_progress:0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>slave_repl_offset:0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>slave_priority:100</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>slave_read_only:1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>replica_announced:1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>connected_slaves:0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>master_failover_state:no-failover</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>master_replid:6c48ecaf27edad5631781b5432548f10acde2cec</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>master_replid2:0000000000000000000000000000000000000000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>master_repl_offset:0</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>second_repl_offset:-1</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>repl_backlog_active:1</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>repl_backlog_size:1048576</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>repl_backlog_first_byte_offset:1</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>repl_backlog_histlen:0</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">###############################################################</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 在主机中查看！</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> info replication</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># Replication</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>role:master</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>connected_slaves:1\t\t<span class=\"token comment\"># 多了从机的配置</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>slave0:ip<span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1,port<span class=\"token operator\">=</span><span class=\"token number\">6380</span>,state<span class=\"token operator\">=</span>online,offset<span class=\"token operator\">=</span><span class=\"token number\">28</span>,lag<span class=\"token operator\">=</span><span class=\"token number\">1</span>\t\t<span class=\"token comment\"># 多了从机的配置</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>master_failover_state:no-failover</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>master_replid:6c48ecaf27edad5631781b5432548f10acde2cec</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>master_replid2:0000000000000000000000000000000000000000</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>master_repl_offset:28</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>second_repl_offset:-1</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>repl_backlog_active:1</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>repl_backlog_size:1048576</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>repl_backlog_first_byte_offset:1</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>repl_backlog_histlen:28</pre></td></tr></table></figure><p>如果两个都配置完了，就是有两个从机的</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520214352916.png\" alt=\"image-20210520214352916\"></p>\n<p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的！关闭 redis 服务后再重启就没有了。</p>\n<blockquote>\n<p>细节</p>\n</blockquote>\n<p>== 主机可以写，从机不能写只能读！== 主机中的所有信息和数据，都会自动被从机保存！</p>\n<p>主机写：</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520214917078.png\" alt=\"image-20210520214917078\"></p>\n<p>从机只能读取内容！</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520214957623.png\" alt=\"image-20210520214957623\"></p>\n<p>测试：主机断开连接，从机依旧连接到主机的，但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p>\n<p>如果是使用命令行，来配置的主从，这个时候如果重启了，就会变回主机！只要变为从机，立马就会从主机中获取值！</p>\n<blockquote>\n<p>复制原理</p>\n</blockquote>\n<p>Slave 启动成功连接到 master 后会发送一个 sync 同步命令</p>\n<p>Master 接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集的命令，在后台进程执行完毕之后，master 将传送整个数据文件到 slave，并完成一次完全同步。</p>\n<p><mark>全量复制</mark>：而 slave 服务在接收到数据库文件数据后，将其存盘并加载到内存中。</p>\n<p><mark>增量复制</mark>：Master 继续将新的所有收集到的修改命令依次传给 slave，完成同步</p>\n<p>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！ 我们的数据一定可以在从机中看到！</p>\n<blockquote>\n<p>层层链路</p>\n</blockquote>\n<p><strong>上一个 M 链接下一个 S！</strong></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520220346763.png\" alt=\"image-20210520220346763\"></p>\n<p>这时候也可以完成我们的主从复制！</p>\n<blockquote>\n<p>如果没有老大了，这个时候能不能选择一个老大出来呢？ 没有哨兵模式情况下需要手动配置！</p>\n</blockquote>\n<p><strong><mark>谋朝篡位</mark></strong></p>\n<p>如果主机断开了连接，我们可以使用  <code>SLAVEOF no one </code> 让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手动）！如果这个时候老大修复了，那就重新连接！</p>\n<h2 id=\"哨兵模式\"><a class=\"markdownIt-Anchor\" href=\"#哨兵模式\">#</a> 哨兵模式</h2>\n<p>（自动选举老大的模式）</p>\n<p>概述</p>\n<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis 从 2.8 开始正式提供了 Sentinel（哨兵） 架构来解决这个问题。</p>\n<p>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p>\n<p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是 <strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例。</strong></p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520221658955.png\" alt=\"image-20210520221658955\"></p>\n<p>这里的哨兵有两个作用</p>\n<ul>\n<li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器。</li>\n<li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过 发布订阅模式 通知其他的从服务器，修改配置文件，让它们切换主机。</li>\n</ul>\n<p>然而一个哨兵进程对 Redis 服务器进行监控，可能会出现问题（哨兵宕机），为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520221919792.png\" alt=\"image-20210520221919792\"></p>\n<p>假设主服务器宕机，哨兵 1 先检测到这个结果，系统并不会马上进行 failover 选举过程，仅仅是哨兵 1 主观的认为主服务器不可用，这个现象成为 <strong>主观下线</strong> 。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover [故障转移] 操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong> 。</p>\n<blockquote>\n<p>测试！</p>\n</blockquote>\n<p>我们目前的状态是 一主二从！</p>\n<p>1 、配置哨兵配置文件 sentinel.conf</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># sentinel monitor 被监控的名称 host port 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sentinel monitor myredis <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><mark>后面的这个数字 1 ，表示至少要多少个 sentinel 哨兵一致认为主机挂掉了，那么才会触发 failover【故障转移】操作</mark>，我们这里因为只有一个 sentinel 哨兵，假设有三个哨兵，那么这个数字就可以设置为 2。哨兵投票看让谁接替成为主机，票数最多的，就会成为主机！</p>\n<p>2 、启动哨兵！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@lloam bin<span class=\"token punctuation\">]</span><span class=\"token comment\"># redis-sentinel maoconfig/sentinel.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.879 <span class=\"token comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.879 <span class=\"token comment\"># Redis version=6.2.3, bits=64, commit=00000000, modified=0, pid=19968, just started</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.879 <span class=\"token comment\"># Configuration loaded</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.879 * monotonic clock: POSIX clock_gettime</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                _._                                                  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>           _.-`<span class=\"token variable\"><span class=\"token variable\">`</span>__ <span class=\"token string\">''</span>-._                                             </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      _.-<span class=\"token variable\">`</span></span><span class=\"token variable\"><span class=\"token variable\">`</span>    <span class=\"token variable\">`</span></span><span class=\"token builtin class-name\">.</span>  <span class=\"token variable\"><span class=\"token variable\">`</span>_.  <span class=\"token string\">''</span>-._           Redis <span class=\"token number\">6.2</span>.3 <span class=\"token punctuation\">(</span>00000000/0<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span> bit</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  .-<span class=\"token variable\">`</span></span><span class=\"token variable\"><span class=\"token variable\">`</span> .-<span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token builtin class-name\">.</span>  <span class=\"token variable\">`</span></span>`<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token punctuation\">\\</span>/    _.,_ <span class=\"token string\">''</span>-._                                  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">(</span>    '      ,       .-<span class=\"token variable\">`</span></span>  <span class=\"token operator\">|</span> <span class=\"token variable\"><span class=\"token variable\">`</span>,    <span class=\"token punctuation\">)</span>     Running <span class=\"token keyword\">in</span> sentinel mode</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-<span class=\"token punctuation\">..</span>.-<span class=\"token variable\">`</span></span> __<span class=\"token punctuation\">..</span>.-.`<span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token operator\">|</span>'<span class=\"token variable\">`</span></span> _.-<span class=\"token string\">'|     Port: 26379</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> |    <span class=\"token variable\"><span class=\"token variable\">`</span>-._   <span class=\"token variable\">`</span></span>._    /     _.-'</span>    <span class=\"token operator\">|</span>     PID: <span class=\"token number\">19968</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._  <span class=\"token variable\"><span class=\"token variable\">`</span>-./  _.-<span class=\"token string\">'    _.-'</span>                                   </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-.__.-<span class=\"token string\">'    _.-'</span>_.-<span class=\"token string\">'|                                  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> |    <span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token variable\">`</span></span>-._        _.-'</span>_.-<span class=\"token string\">'    |           https://redis.io       </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'_.-'</span>    _.-'                                   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">|</span><span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-.__.-'</span>    _.-<span class=\"token string\">'_.-'</span><span class=\"token operator\">|</span>                                  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token operator\">|</span>    <span class=\"token variable\"><span class=\"token variable\">`</span>-._<span class=\"token variable\">`</span></span>-._        _.-<span class=\"token string\">'_.-'</span>    <span class=\"token operator\">|</span>                                  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token variable\"><span class=\"token variable\">`</span>-._    <span class=\"token variable\">`</span></span>-._<span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'_.-'</span>    _.-'                                   </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token variable\">`</span></span>-._    <span class=\"token variable\"><span class=\"token variable\">`</span>-.__.-<span class=\"token string\">'    _.-'</span>                                       </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token variable\">`</span></span>-._        _.-'                                           </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>              `-.__.-'                                               </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.880 <span class=\"token comment\"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.882 <span class=\"token comment\"># Sentinel ID is 3555ee07f208305027d0e90ca9a47de93b3c99f3</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.882 <span class=\"token comment\"># +monitor master myredis 127.0.0.1 6379 quorum 1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.883 * +slave slave <span class=\"token number\">127.0</span>.0.1:6380 <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6380</span> @ myredis <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token number\">19968</span>:X <span class=\"token number\">20</span> May <span class=\"token number\">2021</span> <span class=\"token number\">22</span>:35:51.885 * +slave slave <span class=\"token number\">127.0</span>.0.1:6381 <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6381</span> @ myredis <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6379</span></pre></td></tr></table></figure><p>如果 Master 节点断开了，这个时候就会从从机中随机选择一个服务器！ （这里面有一个投票算法！）</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520224201764.png\" alt=\"image-20210520224201764\"></p>\n<blockquote>\n<p>哨兵日志！</p>\n</blockquote>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210520224334799.png\" alt=\"image-20210520224334799\"></p>\n<p>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</p>\n<blockquote>\n<p>哨兵模式</p>\n</blockquote>\n<p>优点：</p>\n<p>1 、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</p>\n<p>2 、 主从可以切换，故障可以转移，系统的可用性就会更好</p>\n<p>3 、哨兵模式就是主从模式的升级，手动到自动，更加健壮！</p>\n<p>缺点：</p>\n<p>1 、Redis 不好在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦！</p>\n<p>2 、实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</p>\n<blockquote>\n<p>哨兵模式的全部配置！</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Example sentinel.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 哨兵 sentinel 实例运行的端口 默认 26379</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>port <span class=\"token number\">26379</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 哨兵 sentinel 的工作目录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">dir</span> /tmp</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 哨兵 sentinel 监控的 redis 主节点的 ip port</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># master-name 可以自己命名的主节点名字 只能由字母 A-z、数字 0-9 、这三个字符 \".-_\" 组成。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># quorum 配置多少个 sentinel 哨兵统一认为 master 主节点失联 那么这时客观上认为主节点失联了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sentinel monitor mymaster <span class=\"token number\">127</span> .0.0.1 <span class=\"token number\">6379</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 当在 Redis 实例中开启了 requirepass foobared 授权密码 这样所有连接 Redis 实例的客户端都要提供</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>密码</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 设置哨兵 sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># sentinel auth-pass &lt;master-name> &lt;password></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 指定多少毫秒之后 主节点没有应答哨兵 sentinel 此时 哨兵主观上认为主节点下线 默认 30 秒</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>sentinel down-after-milliseconds mymaster <span class=\"token number\">30000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 这个配置项指定了在发生 failover 主备切换时最多可以有多少个 slave 同时对新的 master 进行 同步，</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>这个数字越小，完成failover所需的时间就越长，</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>可以通过将这个值设为 <span class=\"token number\">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>sentinel parallel-syncs mymaster <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面：</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">#1. 同一个 sentinel 对同一个 master 两次 failover 之间的间隔时间。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">#2. 当一个 slave 从一个错误的 master 那里同步数据开始计算时间。直到 slave 被纠正为向正确的 master 那</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>里同步数据时。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">#3. 当想要取消一个正在进行的 failover 所需要的时间。</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">#4. 当进行 failover 时，配置所有 slaves 指向新的 master 所需的最大时间。不过，即使过了这个超时，</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># 默认三分钟</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>sentinel failover-timeout mymaster <span class=\"token number\">180000</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\"># SCRIPTS EXECUTION</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>相关人员。</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">#对于脚本的运行结果有以下规则：</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">#若脚本执行后返回 1 ，那么该脚本稍后将会被再次执行，重复次数目前默认为 10</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">#若脚本执行后返回 2 ，或者比 2 更高的一个返回值，脚本将不会重复执行。</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为 1 时的行为相同。</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">#一个脚本的最大执行时间为 60s，如果超过这个时间，脚本将会被一个 SIGKILL 信号终止，之后重新执行。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#通知型脚本：当 sentinel 有任何警告级别的事件发生时（比如说 redis 实例的主观失效和客观失效等等），</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>法正常启动成功。</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">#通知脚本</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\"># shell 编程</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\"># sentinel notification-script &lt;master-name> &lt;script-path></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>sentinel notification-script mymaster /var/redis/notify.sh</pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># 客户端重新配置主节点参数脚本</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># 当一个 master 由于 failover 而发生改变时，这个脚本将会被调用，通知相关的客户端关于 master 地址已</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>经发生改变的信息。</pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\"># 以下参数将会在调用脚本时传给脚本:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># 目前 & lt;state > 总是 “failover”,</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># &lt;role > 是 “leader” 或者 “observer” 中的一个。</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\"># 参数 from-ip, from-port, to-ip, to-port 是用来和旧的 master 和新的 master (即旧的 slave) 通</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>信的</pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class=\"token comment\"># 一般都是由运维来配置！</span></pre></td></tr></table></figure><p><mark>社会目前程序员饱和（初级和中级）、高级程序员重金难求！（提升自己！）</mark></p>\n<h1 id=\"redis缓存穿透和雪崩\"><a class=\"markdownIt-Anchor\" href=\"#redis缓存穿透和雪崩\">#</a> Redis 缓存穿透和雪崩</h1>\n<blockquote>\n<p>服务的高可用问题！</p>\n</blockquote>\n<p>在这里我们不会详细的区分析解决方案的底层！</p>\n<p>Redis 缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>\n<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210521204551606.png\" alt=\"image-20210521204551606\"></p>\n<h2 id=\"缓存穿透查不到\"><a class=\"markdownIt-Anchor\" href=\"#缓存穿透查不到\">#</a> 缓存穿透（查不到）</h2>\n<blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存穿透的概念很简单，用户想要查询一个数据，发现 redis 内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<h4 id=\"布隆过滤器\"><a class=\"markdownIt-Anchor\" href=\"#布隆过滤器\">#</a> 布隆过滤器</h4>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以 hash 形式存储，在控制层先进行校验，不符合则丢弃，从而避免了对底层存储系统的查询压力；</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210521205047971.png\" alt=\"image-20210521205047971\"></p>\n<h4 id=\"缓存空对象\"><a class=\"markdownIt-Anchor\" href=\"#缓存空对象\">#</a> 缓存空对象</h4>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>\n<p>但是这种方法会存在两个问题：</p>\n<p>1 、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</p>\n<p>2 、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p>\n<h2 id=\"缓存击穿量太大缓存过期\"><a class=\"markdownIt-Anchor\" href=\"#缓存击穿量太大缓存过期\">#</a> 缓存击穿（量太大，缓存过期！）</h2>\n<blockquote>\n<p>概述</p>\n</blockquote>\n<p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个 key 非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个 key 在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>\n<p>当某个 key 在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>设置热点数据永不过期</strong></p>\n<p>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</p>\n<p><strong>加互斥锁</strong></p>\n<p>分布式锁：使用分布式锁，保证对于每个 key 同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210521210320816.png\" alt=\"image-20210521210320816\"></p>\n<h2 id=\"缓存雪崩\"><a class=\"markdownIt-Anchor\" href=\"#缓存雪崩\">#</a> 缓存雪崩</h2>\n<blockquote>\n<p>概念</p>\n</blockquote>\n<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis 宕机！</p>\n<p>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>\n<p><img data-src=\"https://gitee.com/lloamhh/spring-img/raw/master/img/redis/image-20210521210743763.png\" alt=\"image-20210521210743763\"></p>\n<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>\n<blockquote>\n<p>解决方案</p>\n</blockquote>\n<p><strong>redis 高可用</strong></p>\n<p>这个思想的含义是，既然 redis 有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p>\n<p><strong>限流降级（在 SpringCloud 讲解过！）</strong></p>\n<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个 key 只允许一个线程查询数据和写缓存，其他线程等待。</p>\n<p><strong>数据预热</strong></p>\n<p>数据预热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的 key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p>\n<blockquote>\n<p>小结</p>\n</blockquote>\n<p>关注公众号：狂神说，每日更新动态！</p>\n<p>所有看我视频学习的小伙伴，分享或者写笔记的时候，可以带上我的视频连接，表示尊重！</p>\n<p>后面的课程安排：bilibili 免费直播，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vOTUyNTY0NDk=\">https://space.bilibili.com/95256449</span></p>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "http://example.com/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/",
            "title": "RabbitMQ 入门及使用",
            "date_published": "2021-05-10T00:39:18.000Z",
            "content_html": "<span id=\"more\"></span>\n<h1 id=\"1-rabbitmq入门及安装\"><a class=\"markdownIt-Anchor\" href=\"#1-rabbitmq入门及安装\">#</a> 1. RabbitMQ 入门及安装</h1>\n<h2 id=\"11-概述\"><a class=\"markdownIt-Anchor\" href=\"#11-概述\">#</a> 1.1 概述</h2>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tLw==\">https://www.rabbitmq.com/</span><br>\n 什么是 RabbitMQ, 官方给出来这样的解释：</p>\n<blockquote>\n<p>RabbitMQ is the most widely deployed open source message broker.<br>\nWith tens of thousands of users, RabbitMQ is one of the most popular open source message brokers. From T-Mobile to Runtastic, RabbitMQ is used worldwide at small startups and large enterprises.<br>\nRabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.<br>\nRabbitMQ runs on many operating systems and cloud environments, and provides a wide range of developer tools for most popular languages.<br>\n<strong> 翻译以后：</strong><br>\nRabbitMQ 是部署最广泛的开源消息代理。<br>\nRabbitMQ 拥有成千上万的用户，是最受欢迎的开源消息代理之一。从 T-Mobile 到 Runtastic，RabbitMQ 在全球范围内的小型初创企业和大型企业中都得到使用。<br>\nRabbitMQ 轻巧，易于在内部和云中部署。它支持多种消息传递协议。RabbitMQ 可以部署在分布式和联合配置中，以满足大规模，高可用性的要求。<br>\nRabbitMQ 可在许多操作系统和云环境上运行，并为大多数流行语言提供了广泛的开发人员工具。</p>\n</blockquote>\n<p>简单概述：<br>\n<strong>RabbitMQ 是一个开源的遵循 AMQP 协议实现的基于 Erlang 语言编写，支持多种客户端（语言）。用于在分布式系统中存储消息，转发消息，具有高可用，高可扩性，易用性等特征。</strong></p>\n<h2 id=\"12-安装rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#12-安装rabbitmq\">#</a> 1.2 安装 RabbitMQ</h2>\n<p>1：下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Rvd25sb2FkLmh0bWw=\">https://www.rabbitmq.com/download.html</span><br>\n2：环境准备：CentOS7.x+ / Erlang<br>\nRabbitMQ 是采用 Erlang 语言开发的，所以系统环境必须提供 Erlang 环境，<strong>第一步就是安装 Erlang。</strong></p>\n<blockquote>\n<p>erlang 和 RabbitMQ 版本的按照比较: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL3doaWNoLWVybGFuZy5odG1s\">https://www.rabbitmq.com/which-erlang.html</span></p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/810.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/810.png\" class=\"\"></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y erlang <span class=\"token comment\">#安装 erlang</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum <span class=\"token function\">install</span> -y socat <span class=\"token comment\">#安装 socat</span></pre></td></tr></table></figure><p>3. 安装 rabbitmq</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2Rvd25sb2FkLmh0bWw=\">https://www.rabbitmq.com/download.html</span></p>\n<p>yum 下载</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> rabbitmq-server -y</pre></td></tr></table></figure><p>启动 rabbitmq 服务</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start rabbitmq-server <span class=\"token comment\"># 启动服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status rabbitmq-server <span class=\"token comment\"># 查看服务状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl stop rabbitmq-server <span class=\"token comment\"># 停止服务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> rabbitmq-server <span class=\"token comment\"># 开机启动服务</span></pre></td></tr></table></figure><p>4.RabbitMQ 的配置</p>\n<p>RabbitMQ 默认情况下有一个配置文件，定义了 RabbitMQ 的相关配置信息，默认情况下能够满足日常的开发需求。如果需要修改需要，需要自己创建一个配置文件进行覆盖。</p>\n<blockquote>\n<p>参考官网：<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2RvY3VtZW50YXRpb24uaHRtbA==\">https://www.rabbitmq.com/documentation.html</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpZ3VyZS5odG1s\">https://www.rabbitmq.com/configure.html</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2NvbmZpZ3VyZS5odG1sI2NvbmZpZy1pdGVtcw==\">https://www.rabbitmq.com/configure.html#config-items</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JhYmJpdG1xL3JhYmJpdG1xLXNlcnZlci9ibG9iL2FkZC1kZWJ1Zy1tZXNzYWdlcy10by1xdW9ydW1fcXVldWVfU1VJVEUvZG9jcy9yYWJiaXRtcS5jb25mLmV4YW1wbGU=\">https://github.com/rabbitmq/rabbitmq-server/blob/add-debug-messages-to-quorum_queue_SUITE/docs/rabbitmq.conf.example</span></p>\n</blockquote>\n<p>5. 相关端口</p>\n<p><strong>5672</strong>: RabbitMQ 的通讯端口<br>\n<strong> 25672</strong>: RabbitMQ 的节点间的 CLI 通讯端口是<br>\n<strong> 15672</strong>: RabbitMQ HTTP_API 的端口，管理员用户才能访问，用于管理 RabbitMQ, 需要启动 Management 插件。<br>\n<strong>1883，8883</strong>：MQTT 插件启动时的端口。<br>\n<strong>61613、61614</strong>：STOMP 客户端插件启用的时候的端口。<br>\n<strong>15674、15675</strong>：基于 webscoket 的 STOMP 端口和 MOTT 端口</p>\n<h2 id=\"13-开启rabbitmq的web管理界面\"><a class=\"markdownIt-Anchor\" href=\"#13-开启rabbitmq的web管理界面\">#</a> 1.3 开启 RabbitMQ 的 WEB 管理界面</h2>\n<p>默认情况下，rabbitmq 是没有安装 web 端的客户端插件，需要安装才可以生效。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmq-plugins <span class=\"token builtin class-name\">enable</span> rabbitmq_management</pre></td></tr></table></figure><p>安装完毕以后，重启服务即可。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart rabbitmq-server</pre></td></tr></table></figure><blockquote>\n<p>一定要记住，防火墙要开放 <code>15672</code>  端口，如果服务器是 (阿里云，腾讯云等)，则在安全组中开放 <code>15672</code>  的端口。</p>\n<p>Centos7 防火墙相关命令：</p>\n<p>firewall-cmd --permanent --zone=public --list-ports #查询当前有哪些端口开放</p>\n<p>firewall-cmd --permanent --add-port=15672/tcp #开放端口 这里是 15672 端口</p>\n<p>firewall-cmd --reload #重新加载防火墙配置</p>\n</blockquote>\n<h2 id=\"14-新增远程用户和授权\"><a class=\"markdownIt-Anchor\" href=\"#14-新增远程用户和授权\">#</a> 1.4 新增远程用户和授权</h2>\n<p>rabbitmq 有一个默认账号和密码是： <code>guest</code>  默认情况只能在 localhost 本机下访问，所以需要添加一个远程登录的用户。</p>\n<p>1、新增用户</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl add_user admin admin</pre></td></tr></table></figure><p>2、设置用户分配操作权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl set_user_tags admin administrator</pre></td></tr></table></figure><blockquote>\n<p>用户级别说明：</p>\n<p>1、administrator 可以登录控制台、查看所有信息、可以对 rabbitmq 进行管理</p>\n<p>2、monitoring 监控者 登录控制台，查看所有信息</p>\n<p>3、policymaker 策略制定者 登录控制台，指定策略</p>\n<p>4、managment 普通管理员 登录控制台</p>\n</blockquote>\n<p>3、为用户添加资源权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rabbitmqctl.bat set_permissions -p / admin <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span> <span class=\"token string\">\".*\"</span></pre></td></tr></table></figure><p>4、访问 rabbitmq web 管理界面</p>\n<p>设置成功后在浏览器中访问 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOjE1NjcyLw==\">http://ip:15672/</span> ，用户名密码都是 <code>admin</code></p>\n<h1 id=\"2-rabbitmq之docker安装\"><a class=\"markdownIt-Anchor\" href=\"#2-rabbitmq之docker安装\">#</a> 2. RabbitMQ 之 Docker 安装</h1>\n<h2 id=\"21安装docker\"><a class=\"markdownIt-Anchor\" href=\"#21安装docker\">#</a> 2.1 安装 Docker</h2>\n<p>1、yum 包更新到最新</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum update</pre></td></tr></table></figure><p>2、安装需要的软件包：yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖的</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> -y yum-utils device-mapper-persistent-data lvm2</pre></td></tr></table></figure><p>3、设置 yum 源为阿里云</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</pre></td></tr></table></figure><p>4、安装 docker</p>\n<pre><code>yum install docker-ce -y\n</code></pre>\n<p>5、安装后查看 docker 版本</p>\n<pre><code>docker -v\n</code></pre>\n<p>6、安装加速镜像</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> -p /etc/docker</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/docker/daemon.json <span class=\"token operator\">&lt;&lt;-</span><span class=\"token string\">'EOF'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\"registry-mirrors\": [\"https://0wrdwnn6.mirror.aliyuncs.com\"]</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> systemctl daemon-reload</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart docker</pre></td></tr></table></figure><h2 id=\"22-docker的相关命令\"><a class=\"markdownIt-Anchor\" href=\"#22-docker的相关命令\">#</a> 2.2 Docker 的相关命令</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 docker：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl start docker</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 停止 docker：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl stop docker</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 重启 docker：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>systemctl restart docker</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看 docker 状态：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>systemctl status docker</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 开机启动：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> dockersystemctl unenable docker</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查看 docker 概要信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>docker info</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 查看 docker 帮助文档</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>docker --help</pre></td></tr></table></figure><h2 id=\"23-安装rabbitmq\"><a class=\"markdownIt-Anchor\" href=\"#23-安装rabbitmq\">#</a> 2.3 安装 RabbitMQ</h2>\n<ul>\n<li>获取 rabbitmq 镜像</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker pull rabbitmq:management</pre></td></tr></table></figure><ul>\n<li>创建并运行容器</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -di --name<span class=\"token operator\">=</span>myrabbit -p <span class=\"token number\">15672</span>:15672 rabbitmq:management</pre></td></tr></table></figure><p>—hostname：指定容器主机名称<br>\n —name: 指定容器名称<br>\n - p: 将 mq 端口号映射到本地<br>\n或者运行时设置用户和密码</p>\n<p><strong>运行时设置用户名和密码，并开启 web 管理界面。【推荐使用这个命令运行容器】</strong></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -id --name myrabbit -e <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_USER</span><span class=\"token operator\">=</span>admin -e <span class=\"token assign-left variable\">RABBITMQ_DEFAULT_PASS</span><span class=\"token operator\">=</span>admin -p <span class=\"token number\">15672</span>:15672 -p <span class=\"token number\">5672</span>:5672 -p <span class=\"token number\">25672</span>:25672 -p <span class=\"token number\">1883</span>:1883 rabbitmq:management</pre></td></tr></table></figure><ul>\n<li>查看日志</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker logs -f myrabbit</pre></td></tr></table></figure><ul>\n<li>容器运行正常</li>\n</ul>\n<p>使用  <code>http://你的IP地址:15672</code>  访问 rabbit 控制台</p>\n<ul>\n<li>额外 Linux 相关排查命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">more</span> xxx.log <span class=\"token comment\">#查看日志信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">netstat</span> -naop <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">5672</span> <span class=\"token comment\">#查看端口是否被占用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">ps</span> -ef <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">5672</span> <span class=\"token comment\">#查看进程信息</span></pre></td></tr></table></figure><h1 id=\"3-rabbitmq的角色分类\"><a class=\"markdownIt-Anchor\" href=\"#3-rabbitmq的角色分类\">#</a> 3. RabbitMQ 的角色分类</h1>\n<h2 id=\"1none\"><a class=\"markdownIt-Anchor\" href=\"#1none\">#</a> 1：none：</h2>\n<ul>\n<li>不能访问 management plugin</li>\n</ul>\n<h2 id=\"2management查看自己相关节点信息\"><a class=\"markdownIt-Anchor\" href=\"#2management查看自己相关节点信息\">#</a> 2：management：查看自己相关节点信息</h2>\n<ul>\n<li>列出自己可以通过 AMQP 登入的虚拟机</li>\n<li>查看自己的虚拟机节点 virtual hosts 的 queues,exchanges 和 bindings 信息</li>\n<li>查看和关闭自己的 channels 和 connections</li>\n<li>查看有关自己的虚拟机节点 virtual hosts 的统计信息。包括其他用户在这个节点 virtual hosts 中的活动信息。</li>\n</ul>\n<h2 id=\"3policymaker\"><a class=\"markdownIt-Anchor\" href=\"#3policymaker\">#</a> 3：Policymaker</h2>\n<ul>\n<li>包含 management 所有权限</li>\n<li>查看和创建和删除自己的 virtual hosts 所属的 policies 和 parameters 信息。</li>\n</ul>\n<h2 id=\"4monitoring\"><a class=\"markdownIt-Anchor\" href=\"#4monitoring\">#</a> 4：Monitoring</h2>\n<ul>\n<li>包含 management 所有权限</li>\n<li>罗列出所有的 virtual hosts，包括不能登录的 virtual hosts。</li>\n<li>查看其他用户的 connections 和 channels 信息</li>\n<li>查看节点级别的数据如 clustering 和 memory 使用情况</li>\n<li>查看所有的 virtual hosts 的全局统计信息。</li>\n</ul>\n<h2 id=\"5administrator\"><a class=\"markdownIt-Anchor\" href=\"#5administrator\">#</a> 5：Administrator</h2>\n<ul>\n<li>最高权限</li>\n<li>可以创建和删除 virtual hosts</li>\n<li>可以查看，创建和删除 users</li>\n<li>查看创建 permisssions</li>\n<li>关闭所有用户的 connections</li>\n</ul>\n<h1 id=\"4-rabbitmq入门案例-simple-简单模式\"><a class=\"markdownIt-Anchor\" href=\"#4-rabbitmq入门案例-simple-简单模式\">#</a> 4. RabbitMQ 入门案例 - Simple 简单模式</h1>\n<h2 id=\"41-实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#41-实现步骤\">#</a> 4.1 实现步骤</h2>\n<ol>\n<li>jdk1.8。</li>\n<li>构建一个 maven 工程。</li>\n<li>导入 rabbitmq 的 maven 依赖。</li>\n<li>启动 rabbitmq-server 服务。</li>\n<li>定义生产者。</li>\n<li>定义消费者。</li>\n<li>观察消息的在 rabbitmq-server 服务中的过程。</li>\n</ol>\n<h2 id=\"42-构建一个maven工程\"><a class=\"markdownIt-Anchor\" href=\"#42-构建一个maven工程\">#</a> 4.2 构建一个 maven 工程</h2>\n<p>项目名称任意</p>\n<p>导入以下依赖</p>\n<ul>\n<li>Java 原生依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.rabbitmq<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>amqp-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.10.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>Spring 依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.5.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-rabbit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.5.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>SpringBoot 依赖</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上面根据自己的项目环境进行选择即可。这里选择 Java 原生进行演示。</p>\n<blockquote>\n<p>番外：rabbitmq 和 spring 同属一个公司开放的产品，所以他们的支持也是非常完善，这也是为什么推荐使用 rabbitmq 的一个原因。</p>\n</blockquote>\n<h2 id=\"43-启动rabbitmq-server服务\"><a class=\"markdownIt-Anchor\" href=\"#43-启动rabbitmq-server服务\">#</a> 4.3 启动 rabbitmq-server 服务</h2>\n<p><code>systemctl start rabbitmq-server</code>  或者 <code>docker start myrabbit</code></p>\n<h2 id=\"44-定义生产者\"><a class=\"markdownIt-Anchor\" href=\"#44-定义生产者\">#</a> 4.4 定义生产者</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 简单队列生产者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/11 15:20</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 6： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello_有毒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 7: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> queueName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>  <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 8: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"45-定义消费者\"><a class=\"markdownIt-Anchor\" href=\"#45-定义消费者\">#</a> 4.5 定义消费者</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 消费者 简单模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/11 15:33</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 5: 消费的队列名称</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// 6: 监听消息中间件指定的队列</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliverCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Delivery</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到的消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> consumerTag<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收失败了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"关闭失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>执行发送，这个时候可以在 web 控制台查看到这个队列 queue 的信息</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/811.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/811.png\" class=\"\"></p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/812.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/812.png\" class=\"\"></p>\n<p>我们可以进行对队列的消息进行预览和测试如下：</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/813.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/813.png\" class=\"\"></p>\n<p>进行预览和获取消息进行测试</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/814.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/814.png\" class=\"\"></p>\n<h1 id=\"5什么是amqp\"><a class=\"markdownIt-Anchor\" href=\"#5什么是amqp\">#</a> 5. 什么是 AMQP</h1>\n<p>AMQP 全称：Advanced Message Queuing Protocol (高级消息队列协议)。是应用层协议的一个开发标准，为面向消息的中间件设计。</p>\n<h2 id=\"51-amqp生产者流转过程\"><a class=\"markdownIt-Anchor\" href=\"#51-amqp生产者流转过程\">#</a> 5.1 AMQP 生产者流转过程</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/815.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/815.png\" class=\"\"></p>\n<h2 id=\"52-amqp消费者流转过程\"><a class=\"markdownIt-Anchor\" href=\"#52-amqp消费者流转过程\">#</a> 5.2 AMQP 消费者流转过程</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/816.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/816.png\" class=\"\"></p>\n<h1 id=\"6-rabbitmq的核心组成部分\"><a class=\"markdownIt-Anchor\" href=\"#6-rabbitmq的核心组成部分\">#</a> 6. RabbitMQ 的核心组成部分</h1>\n<h2 id=\"61-rabbitmq的核心组成部分\"><a class=\"markdownIt-Anchor\" href=\"#61-rabbitmq的核心组成部分\">#</a> 6.1 RabbitMQ 的核心组成部分</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/817.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/817.png\" class=\"\"></p>\n<p><strong>核心概念：</strong><br>\n<strong>Server</strong>：又称 Broker , 接受客户端的连接，实现 AMQP 实体服务。 安装 rabbitmq-server<br>\n<strong>Connection</strong>：连接，应用程序与 Broker 的网络连接 TCP/IP/ 三次握手和四次挥手<br>\n<strong> Channel</strong>：网络信道，几乎所有的操作都在 Channel 中进行，Channel 是进行消息读写的通道，客户端可以建立对各 Channel，每个 Channel 代表一个会话任务。<br>\n<strong>Message</strong> : 消息：服务与应用程序之间传送的数据，由 Properties 和 body 组成，Properties 可是对消息进行修饰，比如消息的优先级，延迟等高级特性，Body 则就是消息体的内容。<br>\n<strong>Virtual Host</strong> 虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机理由可以有若干个 Exhange 和 Queueu，同一个虚拟主机里面不能有相同名字的 Exchange<br>\n<strong>Exchange</strong>：交换机，接受消息，根据路由键发送消息到绑定的队列。(不具备消息存储的能力)<br>\n<strong>Bindings</strong>：Exchange 和 Queue 之间的虚拟连接，binding 中可以保护多个 routing key.<br>\n<strong>Routing key</strong>：是一个路由规则，虚拟机可以用它来确定如何路由一个特定消息。<br>\n<strong>Queue</strong>：队列：也成为 Message Queue, 消息队列，保存消息并将它们转发给消费者。</p>\n<h2 id=\"62-rabbitmq整体架构是什么样子的\"><a class=\"markdownIt-Anchor\" href=\"#62-rabbitmq整体架构是什么样子的\">#</a> 6.2 RabbitMQ 整体架构是什么样子的？</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/818.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/818.png\" class=\"\"></p>\n<h2 id=\"63-rabbitmq的运行流程\"><a class=\"markdownIt-Anchor\" href=\"#63-rabbitmq的运行流程\">#</a> 6.3 RabbitMQ 的运行流程</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/819.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/819.png\" class=\"\"></p>\n<h2 id=\"64-rabbitmq支持消息的模式\"><a class=\"markdownIt-Anchor\" href=\"#64-rabbitmq支持消息的模式\">#</a> 6.4 RabbitMQ 支持消息的模式</h2>\n<h3 id=\"1-简单模式-simple\"><a class=\"markdownIt-Anchor\" href=\"#1-简单模式-simple\">#</a> 1、简单模式 Simple</h3>\n<ul>\n<li>参考第 12 章节</li>\n</ul>\n<h3 id=\"2-工作模式-work\"><a class=\"markdownIt-Anchor\" href=\"#2-工作模式-work\">#</a> 2、工作模式 Work</h3>\n<ul>\n<li>web 操作查看视频</li>\n<li>类型：无</li>\n<li>特点：分发机制</li>\n</ul>\n<h3 id=\"3-发布订阅模式\"><a class=\"markdownIt-Anchor\" href=\"#3-发布订阅模式\">#</a> 3、发布订阅模式</h3>\n<ul>\n<li>web 操作查看视频</li>\n<li>类型：fanout</li>\n<li>特点：Fanout— 发布与订阅模式，是一种广播机制，它是没有路由 key 的模式。</li>\n</ul>\n<h3 id=\"4-路由模式\"><a class=\"markdownIt-Anchor\" href=\"#4-路由模式\">#</a> 4、路由模式</h3>\n<ul>\n<li>web 操作查看视频</li>\n<li>类型：direct</li>\n<li>特点：有 routing-key 的匹配模式</li>\n</ul>\n<h3 id=\"5-主题topic模式\"><a class=\"markdownIt-Anchor\" href=\"#5-主题topic模式\">#</a> 5、主题 Topic 模式</h3>\n<ul>\n<li>web 操作查看视频</li>\n<li>类型：topic</li>\n<li>特点：模糊的 routing-key 的匹配模式</li>\n</ul>\n<h3 id=\"6-参数模式\"><a class=\"markdownIt-Anchor\" href=\"#6-参数模式\">#</a> 6、参数模式</h3>\n<ul>\n<li>web 操作查看视频</li>\n<li>类型：headers</li>\n<li>特点：参数匹配模式</li>\n</ul>\n<h2 id=\"65-小结\"><a class=\"markdownIt-Anchor\" href=\"#65-小结\">#</a> 6.5 小结</h2>\n<ul>\n<li>rabbitmq 发送消息一定有一个交换机</li>\n<li>如果队列没有指定交换机会默认绑定一个交换机</li>\n<li><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/820.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/820.png\" class=\"\"></li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/821.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/821.png\" class=\"\"></p>\n<h1 id=\"7-rabbitmq入门案例-fanout模式\"><a class=\"markdownIt-Anchor\" href=\"#7-rabbitmq入门案例-fanout模式\">#</a> 7. RabbitMQ 入门案例 - fanout 模式</h1>\n<p>RabbitMQ 支持消息的模式 参考官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFiYml0bXEuY29tL2dldHN0YXJ0ZWQuaHRtbA==\">https://www.rabbitmq.com/getstarted.html</span></p>\n<p>RabbitMQ 的 fanout 广播模式是一种发布订阅模式</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/822.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/822.png\" class=\"\"></p>\n<p>发布订阅模式具体实现</p>\n<ul>\n<li>类型：fanout</li>\n<li>特点：Fanout— 发布与订阅模式，是一种广播机制，<strong>它是没有路由 key 的模式</strong>。</li>\n</ul>\n<p>生产者代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Fanout— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:27</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，极客！！！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span>  exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"fanout-exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 6: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者，为了模拟多个消费者，使用线程的方式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Fanout— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:28</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取队列的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 启动三个线程去执行</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"8-rabbitmq入门案例-direct模式\"><a class=\"markdownIt-Anchor\" href=\"#8-rabbitmq入门案例-direct模式\">#</a> 8. RabbitMQ 入门案例 - Direct 模式</h1>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/823.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/823.png\" class=\"\"></p>\n<ul>\n<li>类型：direct</li>\n<li>特点：<strong>Direct 模式是 fanout 模式上的一种叠加，增加了路由 RoutingKey 的模式。</strong></li>\n</ul>\n<p>发布订阅之 Direct 模式具体实现</p>\n<p>生产者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Direct— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:27</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 6： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，direct-exchange！！！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span>  exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"direct-exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 7: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Direct— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:28</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取队列的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 启动三个线程去执行</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"9-rabbitmq入门案例-topic模式\"><a class=\"markdownIt-Anchor\" href=\"#9-rabbitmq入门案例-topic模式\">#</a> 9. RabbitMQ 入门案例 - Topic 模式</h1>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/824.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/824.png\" class=\"\"></p>\n<ul>\n<li>类型：topic</li>\n<li>特点：<strong>Topic 模式是 direct 模式上的一种叠加，增加了模糊路由 RoutingKey 的模式。</strong></li>\n</ul>\n<p>发布订阅之<strong> Topic 模式</strong>具体实现：</p>\n<p>生产者代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Topic— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:27</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，topic-exchange！！！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span>  exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"topic-exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"com.order.user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 6: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description Topic— 发布与订阅模式</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 10:28</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取队列的名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 启动三个线程去执行</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"10-完整的声明创建方式\"><a class=\"markdownIt-Anchor\" href=\"#10-完整的声明创建方式\">#</a> 10. 完整的声明创建方式</h1>\n<ul>\n<li>声明交换机，所谓的持久化就是指，交换机 会不会随着服务器重启造成丢失， 如果是 true 代表不丢失，false 代表重启后丢失</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> exchangeType<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>声明队列</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue5\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>绑定队列</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue5\"</span><span class=\"token punctuation\">,</span> exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>生产者</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Data 2021/5/12 10:27</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 6： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好，学相伴！！！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"direct_message_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span> exchangeType <span class=\"token operator\">=</span> <span class=\"token string\">\"direct\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 声明交换机，所谓的持久化就是指，交换机 会不会随着服务器重启造成丢失， 如果是 true 代表不丢失，false 代表重启后丢失</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">exchangeDeclare</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> exchangeType<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 声明队列</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue5\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue6\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueDeclare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue7\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 绑定队列</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue5\"</span><span class=\"token punctuation\">,</span> exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue6\"</span><span class=\"token punctuation\">,</span> exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">queueBind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue7\"</span><span class=\"token punctuation\">,</span> exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 7: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routingKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Data 2021/5/12 10:28</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Runnable</span> runnable <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取队列的名称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> queueName <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span>queueName<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    s <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收失败！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queueName <span class=\"token operator\">+</span> <span class=\"token string\">\"：开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 启动三个线程去执行</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"11-rabbitmq入门案例-work模式\"><a class=\"markdownIt-Anchor\" href=\"#11-rabbitmq入门案例-work模式\">#</a> 11. RabbitMQ 入门案例 - Work 模式</h1>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/825.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/825.png\" class=\"\"></p>\n<p>当有多个消费者时，我们的消息会被哪个消费者消费呢，我们又该如何均衡消费者消费信息的多少呢？<br>\n 主要有<strong>两种模式</strong>：<br>\n1、轮询分发：一个消费者一条，<strong>按均分配</strong>；<br>\n2、公平分发：根据消费者的消费能力进行公平分发，处理快的处理的多，处理慢的处理的少；<strong>按劳分配</strong>；</p>\n<h2 id=\"11-1-work模式-轮询模式round-robin\"><a class=\"markdownIt-Anchor\" href=\"#11-1-work模式-轮询模式round-robin\">#</a> 11. 1 Work 模式 - 轮询模式（Round-Robin）</h2>\n<ul>\n<li>类型：无</li>\n<li>特点：该模式接收消息是当有多个消费者接入时，消息的分配模式是一个消费者分配一条，直至消息消费完成；</li>\n</ul>\n<p>生产者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 工作模式之 轮询</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 15:19</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 6： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//===============================end topic 模式 ==================================</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 消息的内容</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"极客:\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 7: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Consumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 工作模式之 轮询</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 15:20</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Work1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-Work1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//            channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 同一时刻，服务器只会推送一条消息给消费者</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">Channel</span> finalChannel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//            finalChannel.basicQos(1);</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliverCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Delivery</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work1-收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work1-开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Work2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 工作模式之 轮询</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 15:21</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Work2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-Work2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, true, false, null);</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 同一时刻，服务器只会推送一条消息给消费者</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//channel.basicQos(1);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Channel</span> finalChannel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\">//            finalChannel.basicQos(1);</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliverCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Delivery</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work2-收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work2-开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>得出结论： <code>work1</code>  和 <code>work2</code>  的消息处理能力不同，但是最后处理的消息条数相同，是 “<strong>按均分配</strong>”。</p>\n<h2 id=\"11-2-work模式-公平分发fair-dispatch\"><a class=\"markdownIt-Anchor\" href=\"#11-2-work模式-公平分发fair-dispatch\">#</a> 11. 2 Work 模式 - 公平分发（Fair Dispatch）</h2>\n<ul>\n<li>类型：无</li>\n<li>特点：由于消息接收者处理消息的能力不同，存在处理快慢的问题，我们就需要能者多劳，处理快的多处理，处理慢的少处理；</li>\n</ul>\n<p>生产者代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Producer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 工作模式 之 公平分发</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 15:38</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产者\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 6： 准备发送消息的内容</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//===============================end topic 模式 ==================================</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 消息的内容</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"极客:\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 7: 发送消息给中间件 rabbitmq-server</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// @params1: 交换机 exchange</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token comment\">// @params2: 队列名称 /routingkey</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">// @params3: 属性配置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// @params4: 发送消息的内容</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicPublish</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送成功!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者代码：</p>\n<p>1、需要将 ** 自动应答 ** 改为 <strong>手动应答</strong></p>\n<p>2、设置 Qos（每次从队列中获取几条），Qos 设置多大，要根据服务器的内存状况和磁盘空间。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName Work1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 工作模式 之 公平分发</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/12 15:38</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Work1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-Work1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//            channel.queueDeclare(\"queue1\", false, false, false, null);</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 同一时刻，服务器只会推送一条消息给消费者</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">Channel</span> finalChannel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliverCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Delivery</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work1-收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//                        Thread.sleep(2000);</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                        finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvelope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                        ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work1-开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@ClassName</span> <span class=\"token class-name\">Work2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Description</span> 工作模式 之 公平分发</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Author</span> zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Data</span> <span class=\"token number\">2021</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">/</span><span class=\"token number\">12</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">38</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">*</span> <span class=\"token annotation punctuation\">@Version</span> <span class=\"token number\">1.0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Work2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1: 创建连接工厂</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ConnectionFactory</span> connectionFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2: 设置连接属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10.1.53.166\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPort</span><span class=\"token punctuation\">(</span><span class=\"token number\">5672</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setVirtualHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setUsername</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Connection</span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 3: 从连接工厂中获取连接</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            connection <span class=\"token operator\">=</span> connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newConnection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者-Work2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 4: 从连接中获取通道 channel</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            channel <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">createChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 5: 申明队列 queue 存储消息</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             *  如果队列不存在，则会创建</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>             *  Rabbitmq 不允许创建两个相同的队列名称，否则会报错。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>             *</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>             *  @params1： queue 队列的名称</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>             *  @params2： durable 队列是否持久化</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             *  @params3： exclusive 是否排他，即是否私有的，如果为 true, 会对当前队列加锁，其他的通道不能访问，并且连接自动关闭</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             *  @params4： autoDelete 是否自动删除，当最后一个消费者断开连接之后是否自动删除消息。</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>             *  @params5： arguments 可以设置队列附加参数，设置队列的有效期，消息的最大长度，队列的消息生命周期等等。</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>             * */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 这里如果 queue 已经被创建过一次了，可以不需要定义</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">//channel.queueDeclare(\"queue1\", false, true, false, null);</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 同一时刻，服务器只会推送一条消息给消费者</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">//channel.basicQos(1);</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 6： 定义接受消息的回调</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Channel</span> finalChannel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicQos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicConsume</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"queue1\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliverCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Delivery</span> delivery<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work2-收到消息是：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">//                        Thread.sleep(200);</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                        finalChannel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>delivery<span class=\"token punctuation\">.</span><span class=\"token function\">getEnvelope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Work2-开始接受消息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送消息出现异常...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token comment\">// 7: 释放连接关闭通道</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>channel <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"113-小结\"><a class=\"markdownIt-Anchor\" href=\"#113-小结\">#</a> 11.3 小结</h2>\n<p>从结果可以看到，消费者 1 在相同时间内，处理了更多的消息；以上代码我们实现了公平分发模式；</p>\n<ul>\n<li>消费者一次接收一条消息，代码 channel.BasicQos (0, 1, false);</li>\n<li>公平分发需要消费者开启手动应答，关闭自动应答</li>\n<li>关闭自动应答代码 channel.BasicConsume (“queue_test”, false, consumer);</li>\n<li>消费者开启手动应答代码：channel.BasicAck (ea.DeliveryTag, false);</li>\n</ul>\n<h2 id=\"114-总结\"><a class=\"markdownIt-Anchor\" href=\"#114-总结\">#</a> 11.4 总结</h2>\n<p>（1）当队列里消息较多时，我们通常会开启多个消费者处理消息；公平分发和轮询分发都是我们经常使用的模式。<br>\n（2）<strong>轮询分发</strong>的主要思想是 “<strong>按均分配</strong>”，不考虑消费者的处理能力，所有消费者均分；这种情况下，处理能力弱的服务器，一直都在处理消息，而处理能力强的服务器，在处理完消息后，处于空闲状态；<br>\n（3） <strong>公平分发</strong>的主要思想是 **” 能者多劳，按需分配”**，能力强的干的多。</p>\n<h1 id=\"12-rabbitmq使用场景\"><a class=\"markdownIt-Anchor\" href=\"#12-rabbitmq使用场景\">#</a> 12. RabbitMQ 使用场景</h1>\n<blockquote>\n<p>为什么使用 RabbitMQ？</p>\n<p>其实呢，我是 2016 年 xx 时候加入 xx 公司的，刚开始进入公司的时候呢，我们公司的架构还是比较单一，采用的是单体结构，而单体结构呢是把所有的业务堆积在一个项目里面。但是，随着我们公司业务的不断发展，不断推进，我们公司在第二年的时候，公司的项目负责人接下来把我们的项目开始进行一些分裂，就是变成了一个分布式架构，对系统进行了拆分，在拆分的过程中，我们接下来就要考虑到一个问题，比如我们在拆分的过程中，我们做了 xxx 系统的某一个模块和另一个模块进行互相沟通和协同，那么这个时候呢，我们公司采用了消息队列的方式，在选择消息队列的时候呢，就在思考用什么消息队列，后面我们决定用了 RabbitMQ，自己使用 RabbitMQ 的感受最重要的一个点就是异步，因为它是一个多线程，分发的机制，可以让我们的系统的性能得以提升，因为异步，可以让我们处理数据的能力变得高效、稳健。</p>\n</blockquote>\n<h2 id=\"121-解耦-削峰-异步\"><a class=\"markdownIt-Anchor\" href=\"#121-解耦-削峰-异步\">#</a> 12.1 解耦、削峰、异步</h2>\n<ul>\n<li>同步异步的问题（串行）</li>\n</ul>\n<p>串行方式：将订单信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户端</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/826.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/826.png\" class=\"\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1 : 保存订单 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">saveOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 2： 发送短信服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    messageService<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1-2 s</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 3： 发送 email 服务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    emailService<span class=\"token punctuation\">.</span><span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1-2 s</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 4： 发送 APP 服务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    appService<span class=\"token punctuation\">.</span><span class=\"token function\">sendApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>并行方式 异步线程池</li>\n</ul>\n<p>并行方式：将订单信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。</p>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/827.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/827.png\" class=\"\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1 : 保存订单 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">saveOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 相关发送</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">relationMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">relationMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 异步</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     theadpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token comment\">// 2： 发送短信服务  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             messageService<span class=\"token punctuation\">.</span><span class=\"token function\">sendSMS</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 异步</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     theadpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token comment\">// 3： 发送 email 服务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            emailService<span class=\"token punctuation\">.</span><span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 异步</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     theadpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             <span class=\"token comment\">// 4： 发送短信服务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             appService<span class=\"token punctuation\">.</span><span class=\"token function\">sendApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// 异步</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         theadpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             <span class=\"token comment\">// 4： 发送短信服务</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>             appService<span class=\"token punctuation\">.</span><span class=\"token function\">sendApp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>存在问题：</strong><br>\n<strong>1：耦合度高</strong><br>\n<strong> 2：需要自己写线程池自己维护成本太高</strong><br>\n<strong> 3：出现了消息可能会丢失，需要你自己做消息补偿</strong><br>\n<strong> 4：如何保证消息的可靠性你自己写</strong><br>\n<strong> 5：如果服务器承载不了，你需要自己去写高可用</strong></p>\n<ul>\n<li>异步消息队列的方式</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/828.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/828.png\" class=\"\"></p>\n<p><strong>好处</strong><br>\n 1：完全解耦，用 MQ 建立桥接<br>\n 2：有独立的线程池和运行模型<br>\n 3：出现了消息可能会丢失，MQ 有持久化功能<br>\n 4：如何保证消息的可靠性，死信队列和消息转移的等<br>\n 5：如果服务器承载不了，你需要自己去写高可用，HA 镜像模型高可用。<br>\n按照以上约定，用户的响应时间相当于是订单信息写入数据库的时间，也就是 50 毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是 50 毫秒。因此架构改变后，系统的吞吐量提高到每秒 20 QPS。比串行提高了 3 倍，比并行提高了两倍</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1 : 保存订单 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    orderService<span class=\"token punctuation\">.</span><span class=\"token function\">saveOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"消息内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"122-高内聚低耦合\"><a class=\"markdownIt-Anchor\" href=\"#122-高内聚低耦合\">#</a> 12.2 高内聚，低耦合</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/829.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/829.png\" class=\"\"></p>\n<h2 id=\"123-流量的削峰\"><a class=\"markdownIt-Anchor\" href=\"#123-流量的削峰\">#</a> 12.3 流量的削峰</h2>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/830.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/830.png\" class=\"\"></p>\n<p>还有如下应用场景：</p>\n<p>4、分布式事务的可靠消费和可靠生产<br>\n 5、索引、缓存、静态化处理的数据同步<br>\n 6、流量监控<br>\n 7、日志监控（ELK）<br>\n8、下单、订单分发、抢票</p>\n<h1 id=\"13-springboot案例-fanout模式\"><a class=\"markdownIt-Anchor\" href=\"#13-springboot案例-fanout模式\">#</a> 13. SpringBoot 案例 -fanout 模式</h1>\n<ul>\n<li>整体核心</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/831.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/831.png\" class=\"\"></p>\n<ul>\n<li>案例：使用 SpringBoot 完成 RabbitMQ 的消费模式 - Fanout</li>\n</ul>\n<p><img data-src=\"RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/832.png\" alt=\"\"><img data-src=\"/RabbitMQ-%E5%85%A5%E9%97%A8%E5%8F%8A%E4%BD%BF%E7%94%A8/832.png\" class=\"\"></p>\n<ul>\n<li>实现步骤：</li>\n</ul>\n<p>1：创建生产者工程：springboot-rabbitmq-fanout-producer</p>\n<p>application.yml 配置文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 服务端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 配置 rabbitmq 服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 10.1.53.166</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr></table></figure><p>2：创建消费者工程： <code>springboot-rabbitmq-fanout-consumer</code></p>\n<p>application.yml 配置文件：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 服务端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 配置 rabbitmq 服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">rabbitmq</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> admin</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">virtual-host</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 10.1.53.166</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5672</span></pre></td></tr></table></figure><p>3：在 pom.xml 中引入 spring-boot-rabbitmq 的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-amqp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>4：进行消息的分发和测试<br>\n 5：查看和观察 web 控制台的状况</p>\n<ul>\n<li>生产者代码</li>\n</ul>\n<p>创建交换机，队列，并进行绑定。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName RabbitMQConfiguration</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description rabbitmq 配置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:17</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 声明注册 fanout 模式的交换机</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return FanoutExchange</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FanoutExchange</span> <span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fanout_order_exchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 声明三个队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">smsQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sms.fanout.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">emailQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email.fanout.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">wxQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wx.fanout.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 完成绑定关系（队列和交换机）</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">smsBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">smsQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">emailBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">emailQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">wxBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">wxQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">fanoutExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>发送消息到交换机 <code>fanout_order_exchange</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName OrderService</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description 订单业务</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:12</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RabbitTemplate</span> rabbitTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 定义交换机</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"fanout_order_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 定义 路由 Key</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> routeKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 1： 模拟用户下单</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">String</span> orderNumber <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 2: 根据商品 id productId 去查询商品的库存</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// int numstore = productSerivce.getProductNum(productId);</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 3: 判断库存是否充足</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//if (num>  numstore )&#123; return  \"商品库存不足...\"; &#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 4: 下单逻辑</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// orderService.saveOrder(order);</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 5: 下单成功要扣减库存</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 6: 下单完成以后</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\",订单编号是：\"</span> <span class=\"token operator\">+</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 发送订单信息给 RabbitMQ fanout</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> routeKey<span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>消费者：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName FanoutSmsConsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description rabbitmq 消费者 连接 指定队列，进行消费处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:22</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sms.fanout.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FanoutEmailConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始邮箱发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName FanoutSmsConsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description rabbitmq 消费者 连接 指定队列，进行消费处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:22</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sms.fanout.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FanoutSmsConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始短信发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName FanoutSmsConsumer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description rabbitmq 消费者 连接 指定队列，进行消费处理</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:22</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sms.fanout.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FanoutWxConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始微信推送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>生产者写测试方法调用下单接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrder</span><span class=\"token punctuation\">(</span><span class=\"token number\">111L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">222L</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"14-springboot案例-direct模式\"><a class=\"markdownIt-Anchor\" href=\"#14-springboot案例-direct模式\">#</a> 14. SpringBoot 案例 -Direct 模式</h1>\n<p>生产者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @ClassName RabbitMQDirectConfiguration</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description rabbitmq 配置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author zzm</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Data 2021/5/13 10:17</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version 1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RabbitMQDirectConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 声明注册 direct 模式的交换机</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return FanoutExchange</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DirectExchange</span> <span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DirectExchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"direct_order_exchange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 声明三个队列</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">smsQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sms.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">emailQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Queue</span> <span class=\"token function\">wxQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wx.direct.queue\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 完成绑定关系（队列和交换机）, 使用 with 指定该队列的路由 Key</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">smsBindingDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">smsQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">emailBindingDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">emailQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Binding</span> <span class=\"token function\">wxBindingDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BindingBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token function\">wxQueueDirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">(</span><span class=\"token function\">directExchange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">with</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>OrderService</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrderDirect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 定义交换机</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"direct_order_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 1： 模拟用户下单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> orderNumber <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 2: 根据商品 id productId 去查询商品的库存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// int numstore = productSerivce.getProductNum(productId);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 3: 判断库存是否充足</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//if (num>  numstore )&#123; return  \"商品库存不足...\"; &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 4: 下单逻辑</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// orderService.saveOrder(order);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 5: 下单成功要扣减库存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 6: 下单完成以后</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\",订单编号是：\"</span> <span class=\"token operator\">+</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 发送订单信息给 RabbitMQ fanout</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"sms\"</span><span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"wx\"</span><span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>消费者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"email.direct.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectEmailConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Direct模式 开始邮箱发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"sms.direct.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectSmsConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Direct模式 开始短信发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"wx.direct.queue\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectWxConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Direct模式 开始微信推送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"15-springboot案例-topic模式\"><a class=\"markdownIt-Anchor\" href=\"#15-springboot案例-topic模式\">#</a> 15. SpringBoot 案例 -Topic 模式</h1>\n<p>使用注解的模式来配置交换机和队列，以及绑定。 <code>@RabbitListener(bindings = @QueueBinding(value = @Queue(), exchange = @Exchange(), key = &quot;&quot;))</code></p>\n<p>消费者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"email.topic.queue\"</span><span class=\"token punctuation\">,</span> durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> autoDelete <span class=\"token operator\">=</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_order_exchange\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span>TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        key <span class=\"token operator\">=</span> <span class=\"token string\">\"*.email.#\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TopicEmailConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic模式，开始邮箱发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"sms.topic.queue\"</span><span class=\"token punctuation\">,</span> durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> autoDelete <span class=\"token operator\">=</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_order_exchange\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span>TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        key <span class=\"token operator\">=</span> <span class=\"token string\">\"#.sms.#\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TopicSmsConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic模式，开始短信发送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>bindings <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@QueueBinding</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        value <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Queue</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"wx.topic.queue\"</span><span class=\"token punctuation\">,</span> durable <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> autoDelete <span class=\"token operator\">=</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        exchange <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@Exchange</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_order_exchange\"</span><span class=\"token punctuation\">,</span> type <span class=\"token operator\">=</span> <span class=\"token class-name\">ExchangeTypes</span><span class=\"token punctuation\">.</span>TOPIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        key <span class=\"token operator\">=</span> <span class=\"token string\">\"com.#\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TopicWxConsumer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveMsg</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"topic模式，开始微信推送服务：\"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>生产者：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeOrderTopic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> userId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 定义交换机</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span> exchangeName <span class=\"token operator\">=</span> <span class=\"token string\">\"topic_order_exchange\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 1： 模拟用户下单</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> orderNumber <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 2: 根据商品 id productId 去查询商品的库存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// int numstore = productSerivce.getProductNum(productId);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 3: 判断库存是否充足</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//if (num>  numstore )&#123; return  \"商品库存不足...\"; &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 4: 下单逻辑</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// orderService.saveOrder(order);</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 5: 下单成功要扣减库存</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 6: 下单完成以后</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户 \"</span> <span class=\"token operator\">+</span> userId <span class=\"token operator\">+</span> <span class=\"token string\">\",订单编号是：\"</span> <span class=\"token operator\">+</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> routingKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 发送订单信息给 RabbitMQ fanout</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span>exchangeName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> orderNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "RabbitMQ"
            ]
        }
    ]
}