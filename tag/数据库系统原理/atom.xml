<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xinyao_idiot.gitee.io/zxy</id>
    <title>失心耀的博客 • Posts by &#34;数据库系统原理&#34; tag</title>
    <link href="https://xinyao_idiot.gitee.io/zxy" />
    <updated>2021-08-09T06:14:00.000Z</updated>
    <category term="ElasticSearch" />
    <category term="Hexo" />
    <category term="Java" />
    <category term="SpringCloud" />
    <category term="Springboot" />
    <category term="驾照" />
    <category term="Git" />
    <category term="Nginx" />
    <category term="数据库系统原理" />
    <category term="linux" />
    <category term="RabbitMQ" />
    <category term="操作系统概论" />
    <category term="SpringBoot" />
    <category term="Redis" />
    <entry>
        <id>https://xinyao_idiot.gitee.io/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/</id>
        <title>数据库系统原理</title>
        <link rel="alternate" href="https://xinyao_idiot.gitee.io/zxy/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
        <content type="html">&lt;h1 id=&#34;数据库系统原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据库系统原理&#34;&gt;#&lt;/a&gt; 数据库系统原理&lt;/h1&gt;
&lt;h2 id=&#34;第一章-数据库系统概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一章-数据库系统概念&#34;&gt;#&lt;/a&gt; 第一章、数据库系统概念&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库基本概念&#34;&gt;#&lt;/a&gt; 第一节：数据库基本概念&lt;/h3&gt;
&lt;h4 id=&#34;一数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据&#34;&gt;#&lt;/a&gt; 一。数据：&lt;/h4&gt;
&lt;p&gt;​		数据（Data）是描述事物的符号记录，是只用无里符号记录下来的、可以鉴别的信息。&lt;/p&gt;
&lt;h4 id=&#34;二数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库&#34;&gt;#&lt;/a&gt; 二。数据库&lt;/h4&gt;
&lt;p&gt;​		数据库（Database，DB）通俗地被称为存储数据的仓库，知识这个仓库是存储在计算机存储设备上的，并且其所存储的数据是按一定的格式进行存储的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点：具有较小的冗余度、较高的数据独立性，系统易于扩展，并可以被多个用户共享。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 三个基本特点：** 具有永久存储、有组织和可共享三个基本特点&lt;/p&gt;
&lt;h4 id=&#34;三数据库管理系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库管理系统&#34;&gt;#&lt;/a&gt; 三。数据库管理系统&lt;/h4&gt;
&lt;p&gt;数据库管理系统（Database Managenment System，DBMS）是专门用于建立和管理数据库的一套软件，介于应用程序和操作系统之间。负责&lt;strong&gt;科学有效的组织和存储数据&lt;/strong&gt;，并帮助数据库的使用者从大量的数据中快速地获取所需数据，以及提供必要的&lt;strong&gt;安全性&lt;/strong&gt;和&lt;strong&gt;完整性&lt;/strong&gt;等统一控制机制，实现对数据有效的管理与维护。&lt;/p&gt;
&lt;h4 id=&#34;四数据库的主要功能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四数据库的主要功能&#34;&gt;#&lt;/a&gt; 四。数据库的主要功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据定义功能&lt;/li&gt;
&lt;li&gt;数据操纵功能&lt;/li&gt;
&lt;li&gt;数据库的运行管理功能&lt;/li&gt;
&lt;li&gt;数据库的建立和维护功能&lt;/li&gt;
&lt;li&gt;数据组织、存储和管理功能&lt;/li&gt;
&lt;li&gt;其他功能（主要包括与其他软件&lt;strong&gt;网络通信&lt;/strong&gt;、不同数据库系统之间的&lt;strong&gt;数据传输和相互访问&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;五数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库系统&#34;&gt;#&lt;/a&gt; 五。数据库系统&lt;/h4&gt;
&lt;p&gt;数据库系统（DBS）是指在计算机中引入数据库技术之后的系统&lt;/p&gt;
&lt;p&gt;数据库管理员（DBA）是专门负责对数据库进行维护的专业人员&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节数据管理技的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据管理技的发展&#34;&gt;#&lt;/a&gt; 第二节：数据管理技的发展&lt;/h3&gt;
&lt;h4 id=&#34;数据管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据管理&#34;&gt;#&lt;/a&gt; 数据管理：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;针对组织业务的管理&lt;/strong&gt;，负责指定并执行郑个组织中关于数据的定义、组织、保护与有效使用的策略、过程和计划&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依靠技术&lt;/strong&gt;，负责实现数据作为一个资源的集中控制管理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 数据组织：** 用便于处理的某种方式收集数据，并将记录在纸介文件上的数据转换成计算机可处理的形式；然后将手机的数据进行适当的构造&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑组织：用户或应用程序所使用的数据结构形式&lt;/li&gt;
&lt;li&gt;物理组织：数据在无里存储设备上的结构形式&lt;/li&gt;
&lt;li&gt;检索：为了向用户提供信息，存储的数据要能够方便地选择提取&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;随着计算机技术的发展及应用，数据挂你了技术共经历了&lt;strong&gt;人工管理&lt;/strong&gt;、&lt;strong&gt;文件系统&lt;/strong&gt;和&lt;strong&gt;数据库系统&lt;/strong&gt;三个阶段&lt;/p&gt;
&lt;h4 id=&#34;一人工管理阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一人工管理阶段&#34;&gt;#&lt;/a&gt; 一。人工管理阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 50 年代中期以前&lt;/strong&gt;，所设计的数据处理基本依靠&lt;strong&gt;手工方式&lt;/strong&gt;进行，具有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据不保存（&lt;strong&gt;存储容量有限，价格昂贵&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;应用程序管理数据（&lt;strong&gt;即没有专门的数据管理软件&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据与面向应用（&lt;strong&gt;即一组数据面对一个应用程序&lt;/strong&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二文件系统阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二文件系统阶段&#34;&gt;#&lt;/a&gt; 二。文件系统阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 20 年代后期到 60 年代中期&lt;/strong&gt;，计算机硬件和软件发展到了一定阶段，配备了专门的数据管理软件，即&lt;strong&gt;文件系统&lt;/strong&gt;。文件系统将数据的&lt;strong&gt;逻辑结构&lt;/strong&gt;和&lt;strong&gt;物理结构&lt;/strong&gt;分离，当物理结构发生改变的时候，不会导致应用程序的修改（&lt;strong&gt;数据的物理独立结构&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据的管理者：文件系统，数据可长期保存（&lt;strong&gt;有硬盘和专门的文件系统&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据面向的对象：某一应用程序&lt;/li&gt;
&lt;li&gt;数据的共享程度：&lt;strong&gt;共享性差、冗余度大&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据的结构化：记录有结构，整体无结构 (&lt;strong&gt;不能&lt;/strong&gt;实现数据的普通共享，&lt;strong&gt;只能&lt;/strong&gt;实现文件级的共享）&lt;/li&gt;
&lt;li&gt;数据的独立性：独立性差，提供了物理数据独立性（&lt;strong&gt;使数据共享成为可能&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;数据控制能力：应用程序自己控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三数据库系统阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库系统阶段&#34;&gt;#&lt;/a&gt; 三。数据库系统阶段：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;20 世纪 60 年代后期以来&lt;/strong&gt;，&lt;strong&gt;解决了数据的冗余&lt;/strong&gt;；数据变更时，能节省对多个数据副本的变更操作，&lt;strong&gt;大大缩小计算机运算时间开销&lt;/strong&gt;，还要求数据具有更高的独立性，不但&lt;strong&gt;具有物理独立性&lt;/strong&gt;，而且&lt;strong&gt;具有逻辑独立性&lt;/strong&gt;，从而&lt;strong&gt;节省应用程序开发的维护和代价&lt;/strong&gt;数据库系统孕育而生。&lt;/p&gt;
&lt;p&gt;特点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据集成
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据的集成是数据库管理系统的主要目的&lt;/strong&gt;，可&lt;strong&gt;使数据得到最大程度的共享，且冗余最小&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据共享性高
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一个数据可以为多个不同的用户共同使用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据冗余小&lt;/li&gt;
&lt;li&gt;数据一致性
&lt;ul&gt;
&lt;li&gt;通过消除或控制数据冗余，可以在一定范围内避免数据的不一致性。&lt;strong&gt;引起不一致的根源是数据冗余&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据独立性高
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;数据定义&lt;/strong&gt;与&lt;strong&gt;使用数据的应用程序分离&lt;/strong&gt;被称为&lt;strong&gt;数据独立&lt;/strong&gt;（数据或应用程序的修改不会彼此引起另一方的修改，两层数据独立）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实施统一管理与控制
&lt;ul&gt;
&lt;li&gt;主要包括数据&lt;strong&gt;安全性&lt;/strong&gt;、&lt;strong&gt;完整性&lt;/strong&gt;、&lt;strong&gt;并发控制&lt;/strong&gt;、&lt;strong&gt;故障恢复&lt;/strong&gt;等，即&lt;strong&gt;数据库保护&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据的安全性：&lt;strong&gt;保护数据&lt;/strong&gt;，放置不合法的使用造成数据泄密和破坏&lt;/li&gt;
&lt;li&gt;数据的完整性：对数据的&lt;strong&gt;正确性&lt;/strong&gt;、&lt;strong&gt;有效性&lt;/strong&gt;和&lt;strong&gt;相容性&lt;/strong&gt;要求&lt;/li&gt;
&lt;li&gt;并发控制：规避多线程并发造成的安全问题&lt;/li&gt;
&lt;li&gt;故障恢复：在出现问题时，数据库系统（DBMS）必须具有将数据库从错误状态恢复到某一已知的正确状态的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少应用程序开发与维护的工作量
&lt;ul&gt;
&lt;li&gt;由于数据库&lt;strong&gt;数据具有共享性、独立性&lt;/strong&gt;，在开发与维护新的应用&lt;strong&gt;所花费的代价和时间大大减少&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节数据库系统的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节数据库系统的结构&#34;&gt;#&lt;/a&gt; 第三节：数据库系统的结构&lt;/h3&gt;
&lt;h4 id=&#34;一三级模式结构的两层映像与数据独立性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一三级模式结构的两层映像与数据独立性&#34;&gt;#&lt;/a&gt; 一。三级模式结构的两层映像与数据独立性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;外模式 / 模式映像&lt;/strong&gt;（逻辑独立性）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模式 / 内模式映像&lt;/strong&gt;（物理独立性）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据库系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部系统结构（采用三级模式结构）
&lt;ul&gt;
&lt;li&gt;模式
&lt;ul&gt;
&lt;li&gt;模式也被称为&lt;strong&gt;概念模式&lt;/strong&gt;或&lt;strong&gt;逻辑模式&lt;/strong&gt;（实际上时数据库数据在逻辑级上的视图）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外模式
&lt;ul&gt;
&lt;li&gt;外模式也被称为&lt;strong&gt;子模式&lt;/strong&gt;或&lt;strong&gt;用户模式&lt;/strong&gt;（数据库用户能够看到和使用的局部数据）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内模式
&lt;ul&gt;
&lt;li&gt;内模式也被称为存储模式（对数据库中数据物理结构和存储方式 id 描述）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部系统结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【单选题】数据库系统的数据独立性是指（不会因为系统数据库存储结构与数据逻辑结构的变化而影响应用程序）&lt;/p&gt;
&lt;h4 id=&#34;二数据库系统的运行与应用结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库系统的运行与应用结构&#34;&gt;#&lt;/a&gt; 二。数据库系统的运行与应用结构&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;客户 / 服务器（&lt;strong&gt;Client/Server，C/S&lt;/strong&gt;）模式
&lt;ul&gt;
&lt;li&gt;QQ、桌面客户端游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器 / 服务器（&lt;strong&gt;Browser/Server，B/S&lt;/strong&gt;）模式
&lt;ul&gt;
&lt;li&gt;网站、在线 web 游戏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第四节数据模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节数据模型&#34;&gt;#&lt;/a&gt; 第四节：数据模型&lt;/h3&gt;
&lt;h4 id=&#34;一数据特征与数据模型组成要素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据特征与数据模型组成要素&#34;&gt;#&lt;/a&gt; 一。数据特征与数据模型组成要素&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据结构&lt;/p&gt;
&lt;p&gt;数据结构描述的是系统的&lt;strong&gt;静态特性&lt;/strong&gt;，即数据对象的数据类型、内容、属性以及书对象之间的联系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据操作&lt;/p&gt;
&lt;p&gt;数据操作描述的是系统的&lt;strong&gt;动态特性&lt;/strong&gt;，是对各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据的约束条件&lt;/p&gt;
&lt;p&gt;数据约束描述数据结构中数据见的语法和语义关联，包括相互制约与依存关系以及数据动态变化规则，以保证数据的&lt;strong&gt;正确性、有效性与相容性&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据模型的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据模型的分类&#34;&gt;#&lt;/a&gt; 二。数据模型的分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念层数据模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;信息世界中的基本概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实体（Entity）&lt;/p&gt;
&lt;p&gt;客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性（Attribute）&lt;/p&gt;
&lt;p&gt;实体所具有的某一特征称为属性。一个实体可以由若干个属性来刻画。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;码（Key）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;唯一&lt;/strong&gt;表示实体的&lt;strong&gt;属性集&lt;/strong&gt;称为码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;域（Domain）&lt;/p&gt;
&lt;p&gt;属性的&lt;strong&gt;取值范围&lt;/strong&gt;称为该属性的域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实体型（Entity Type）&lt;/p&gt;
&lt;p&gt;用实体名及&lt;strong&gt;其属性&lt;/strong&gt;名集合来抽象和刻画。同类实体称为&lt;strong&gt;实体型&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实体集（Entity Set）&lt;/p&gt;
&lt;p&gt;同型实体的集合称为实体集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联系（Relationship）&lt;/p&gt;
&lt;p&gt;显示世界中事物内部以及事物之间的联系在信息世界中反应为实体内部的联系和实体之间的联系。&lt;/p&gt;
&lt;p&gt;实体型间联系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一对多	1：N&lt;/li&gt;
&lt;li&gt;一对一    1：1&lt;/li&gt;
&lt;li&gt;多对多    N：M&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念模型（对应外模式）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;概念模型：用来描述现实世界的事物，与具体的计算机系统无关&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/E-R%E5%9B%BE.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/E-R%E5%9B%BE.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逻辑层数据模型（对应模式）&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;层次模型；&lt;/li&gt;
&lt;li&gt;网状模型；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关系模型；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;面向对象模型；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;物理层数据模型（对应内模式）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物理层数据模型，也称为数据的&lt;strong&gt;物理模型&lt;/strong&gt;（Physical Model），其描述数据在&lt;strong&gt;存储介质&lt;/strong&gt;上的组织结构，是逻辑模型的物理实现，即每一种逻辑模型在实现时都有与其对应的物理模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第二章-关系数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二章-关系数据库&#34;&gt;#&lt;/a&gt; 第二章、关系数据库&lt;/h2&gt;
&lt;h3 id=&#34;第一节关系数据库概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节关系数据库概述&#34;&gt;#&lt;/a&gt; 第一节：关系数据库概述&lt;/h3&gt;
&lt;h4 id=&#34;一基本简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一基本简介&#34;&gt;#&lt;/a&gt; 一。基本简介&lt;/h4&gt;
&lt;p&gt;系统而严格提出关系模型的是&lt;strong&gt;美国 IBM 公司的 E.F.Codd&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1970 年&lt;/strong&gt;提出&lt;strong&gt;关系数据模型&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;1970 年&lt;strong&gt; E.F.Codd&lt;/strong&gt; 发表了《Communication of the ACM》&lt;/li&gt;
&lt;li&gt;之后提出了，&lt;strong&gt;关系代数和关系演算的概念&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1972 年&lt;/strong&gt;提出了关系的&lt;strong&gt;第一、第二、第三范式&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1974 年&lt;/strong&gt;提出了关系的&lt;strong&gt; BC 范式&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系数据库应用&lt;strong&gt;数学方法&lt;/strong&gt;来&lt;strong&gt;处理数据库的数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;80 年代后，关系数据库系统成为最重要、最流行的数据库系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;典型的实验系统：
&lt;ul&gt;
&lt;li&gt;System R&lt;/li&gt;
&lt;li&gt;University INGRES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;典型商用系统
&lt;ul&gt;
&lt;li&gt;ORACLE&lt;/li&gt;
&lt;li&gt;SYBASE&lt;/li&gt;
&lt;li&gt;INFORMIX&lt;/li&gt;
&lt;li&gt;IBM DB2&lt;/li&gt;
&lt;li&gt;SQL service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关系模型的数据结构（类似于 Excel）&lt;/p&gt;
&lt;h4 id=&#34;二基本术语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二基本术语&#34;&gt;#&lt;/a&gt; 二。基本术语&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;表（Table）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系（Relation）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列（Column）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也被称为&lt;strong&gt;字段&lt;/strong&gt;或者&lt;strong&gt;属性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;属性（Attribute）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数据表中，&lt;strong&gt;一列即为一个属性&lt;/strong&gt;，给每一个属性起一个名称即为属性名。与之同义的术语是”&lt;strong&gt; 列&lt;/strong&gt; “。表中的&lt;strong&gt;属性的个数称为关系的元或度&lt;/strong&gt;。&lt;strong&gt;列的值称为属性值&lt;/strong&gt;；&lt;strong&gt;属性值的取值范围称为值域&lt;/strong&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行（Row）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中行（Row），也称作元组（Tuple）或记录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;元组（Tuple）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表中的一行即为一个元组（一条数据即为一个元组）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分量（Component）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元组中的一个属性值，称为分量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;码或键（Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在一个关系中，存在这样的属性（或属性组），使得在该关系的任何一个关系状态中的两个元组，在该属性（或属性组）上值的组合都不相同，即这些属性（或属性组）的值都能用来唯一标识该关系的元组，称此属性（或属性组）为该关系的码或键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超码或超键（Super Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在关系的一个码中移去某个属性，它仍然是这个关系的码，则称这样的码或键为该关系的超码或超键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;候选码或候选键（Candidate Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果在关系的一个码或键中，不能从中移去任何一个属性，否则它就不是这个关系的码或键，则称这样的码或键为该关系的候选码或候选键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主码或主键（Primary Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一个关系的若干个候选码或候选键中指定一个用来唯一标识关系的元组，则称这个被指定的候选码或候选键为该关系的主码或主键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全码或全键（All-Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个关系模式的所有属性集合是这个关系的主码或主键，则称这样的主码或主键为全码或全键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;列&lt;/th&gt;
&lt;th&gt;列的值被称为属性值&lt;/th&gt;
&lt;th&gt;属性的个数称为元或度&lt;/th&gt;
&lt;th&gt;属性值的取值范围叫做值域&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;行&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;行被称为元组或记录&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;元组的一个属性值称为分量&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A0%81.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A0%81.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主属性（Primary Attribute）和非主属性（Nonprimary Attribute）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在候选码中的属性称为主属性或码属性；&lt;/p&gt;
&lt;p&gt;不在候选码中的属性称为非主属性或非码属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;外码或外键（Foreign Key）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该表的某个属性是其他表的主键，则是这个关系的外码或外键&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;参照关系（Referencing Relation）和被参照关系（Referenced Relation）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以外键为主键的表称为被参照关系；外键所在的表为参照关系。被参照关系和参照关系是通过外键相联系的，这种联系通常是一对多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;域（Domain）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表示属性的取值范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据类型（Data Type）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每个字段名都有相对应的数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系模式（Relation Schema）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库存在 “型” 和 “值” 之分，关系数据库中，关系模式是型，关系是值；关系模式是静态的，关系是动态的。关系模式是对关系的描述.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关系数据库（Relation Datebase）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关系数据库是以关系模式为数据的逻辑模型，并采用关系作为数据组织方式的一类数据库，其数据库建立在关系代数上&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节关系数据库模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节关系数据库模型&#34;&gt;#&lt;/a&gt; 第二节：关系数据库模型&lt;/h3&gt;
&lt;h4 id=&#34;一基本的关系集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一基本的关系集合&#34;&gt;#&lt;/a&gt; 一。基本的关系集合&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关系数据语言的分类
&lt;ul&gt;
&lt;li&gt;关系操作的能力用两种方式表示：&lt;strong&gt;代数方式&lt;/strong&gt;和&lt;strong&gt;逻辑方式&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;代数方式主要有关系代数，通过对关系的操作来达到查询&lt;/li&gt;
&lt;li&gt;逻辑方式主要有关系演算，通过使用位于来表达查询要求的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二关系的完整性约束&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二关系的完整性约束&#34;&gt;#&lt;/a&gt; 二。关系的完整性约束&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;关系的完整约束
&lt;ul&gt;
&lt;li&gt;主键不能为空&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;参照完整性约束
&lt;ul&gt;
&lt;li&gt;外键需要一一对应&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户定义完整性约束
&lt;ul&gt;
&lt;li&gt;对数据进行的约束；例：数据类型，数据长度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系模型完整性约束的检验
&lt;ol&gt;
&lt;li&gt;执行插入操作&lt;/li&gt;
&lt;li&gt;执行删除操作&lt;/li&gt;
&lt;li&gt;执行更新操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节关系数据库的规范化理论重点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节关系数据库的规范化理论重点&#34;&gt;#&lt;/a&gt; 第三节：关系数据库的规范化理论（重点）&lt;/h3&gt;
&lt;h4 id=&#34;一关系模型中可能存在的冗余和异常问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一关系模型中可能存在的冗余和异常问题&#34;&gt;#&lt;/a&gt; 一。关系模型中可能存在的冗余和异常问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据冗余&lt;/li&gt;
&lt;li&gt;更新异常&lt;/li&gt;
&lt;li&gt;插入异常&lt;/li&gt;
&lt;li&gt;删除异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二函数依赖的关键字&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二函数依赖的关键字&#34;&gt;#&lt;/a&gt; 二。函数依赖的关键字&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;完全函数依赖&lt;/p&gt;
&lt;p&gt;$ X \to Y$ 但是 x 真子集不能依赖 Y, 则 Y 完全依赖于 X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部分函数依赖&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, 但是 X 真子集可以依赖 Y，则 Y 部分依赖于 X&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递函数依赖&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，且&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;¬&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y \neg\to X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;¬&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y → Z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，则&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Z&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Z&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;Z&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键字&lt;/p&gt;
&lt;p&gt;当&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;→&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X → Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;→&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 时，则 X 为 Y 的候选关键字&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三范式与关系规范化过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三范式与关系规范化过程&#34;&gt;#&lt;/a&gt; 三。范式与关系规范化过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一范式：行和列不可再分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式：不可冗余&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式、BC 范式：保证主键唯一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关系规范化理论的应用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第三章数据库设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三章数据库设计&#34;&gt;#&lt;/a&gt; 第三章：数据库设计&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库设计概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库设计概述&#34;&gt;#&lt;/a&gt; 第一节：数据库设计概述&lt;/h3&gt;
&lt;h4 id=&#34;一生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一生命周期&#34;&gt;#&lt;/a&gt; 一。生命周期&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据库分析与设计阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求分析&lt;/li&gt;
&lt;li&gt;概念设计&lt;/li&gt;
&lt;li&gt;逻辑设计&lt;/li&gt;
&lt;li&gt;物理设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库实现与操作阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库的实现&lt;/li&gt;
&lt;li&gt;操作与监督&lt;/li&gt;
&lt;li&gt;修改与调整&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据库设计的目标&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据库设计的目标&#34;&gt;#&lt;/a&gt; 二。数据库设计的目标&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;满足应用功能需求&lt;/li&gt;
&lt;li&gt;良好的数据库性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三数据库设计的内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三数据库设计的内容&#34;&gt;#&lt;/a&gt; 三。数据库设计的内容&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据库结构设计&lt;/li&gt;
&lt;li&gt;数据库行为设计&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;四数据库设计的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四数据库设计的方法&#34;&gt;#&lt;/a&gt; 四。数据库设计的方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;直观设计法（不可取）&lt;/li&gt;
&lt;li&gt;规范设计法
&lt;ol&gt;
&lt;li&gt;新奥尔良设计方法&lt;/li&gt;
&lt;li&gt;基于 E-R 模型的数据库设计方法&lt;/li&gt;
&lt;li&gt;基于第三范式的设计方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;计算机辅助设计法&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;五数据库设计的过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库设计的过程&#34;&gt;#&lt;/a&gt; 五。数据库设计的过程&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二节数据库设计的基本步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据库设计的基本步骤&#34;&gt;#&lt;/a&gt; 第二节：数据库设计的基本步骤&lt;/h3&gt;
&lt;h4 id=&#34;一需求分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一需求分析&#34;&gt;#&lt;/a&gt; 一。需求分析&lt;/h4&gt;
&lt;p&gt;​		数据库设计中最重要的一个阶段，即确定数据库应支持哪些功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;应用过程分析&lt;/p&gt;
&lt;p&gt;指了解并分析数据与数据处理间的关系。在数据库范围确定后，设计人员应逐次廖尔吉每个功能需要用到哪些数据、数据使用的顺序、对数据做何处理的策略以及处理的结果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收集与分析数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;静态结构&lt;/p&gt;
&lt;p&gt;指不是加应用操作于其上时数据的原始状况，可通过数据分类表和数据元素表进行说明&lt;/p&gt;
&lt;p&gt;例：公司表中部门名称这一字段名基本不变&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态结构&lt;/p&gt;
&lt;p&gt;指应用操作施加于数据之上后数据的状况，可通过任务分类表和数据操作特征表进行说明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据约束&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写需求分析&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据库的应用功能目标
&lt;ul&gt;
&lt;li&gt;功能要求&lt;/li&gt;
&lt;li&gt;性能要求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标明不同用户视图范围&lt;/li&gt;
&lt;li&gt;应用处理过程需求说明&lt;/li&gt;
&lt;li&gt;数据字典&lt;/li&gt;
&lt;li&gt;数据量&lt;/li&gt;
&lt;li&gt;数据约束&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二概念结构设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二概念结构设计&#34;&gt;#&lt;/a&gt; 二。概念结构设计&lt;/h4&gt;
&lt;p&gt;​		在需求分析的基础按照特定的方法设计满足应用需求的用户信息结构，该信息结构通常称为概念模型。其中 E-R 图为概念模型的描述工具。&lt;/p&gt;
&lt;h4 id=&#34;三逻辑结构设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三逻辑结构设计&#34;&gt;#&lt;/a&gt; 三。逻辑结构设计&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png&#34; alt=&#34;&#34;&gt;&lt;img data-src=&#34;/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1.png&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;四物理设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四物理设计&#34;&gt;#&lt;/a&gt; 四。物理设计&lt;/h4&gt;
&lt;p&gt;​		指对于一个给定的数据逻辑结构，研究并构造物理结构的过程。主要任务时确定数据库在存储设别上的存储结构及存取方法。&lt;/p&gt;
&lt;h4 id=&#34;五数据库实施&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五数据库实施&#34;&gt;#&lt;/a&gt; 五。数据库实施&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;加载数据&lt;/li&gt;
&lt;li&gt;应用程序设计&lt;/li&gt;
&lt;li&gt;数据库试运行&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;六数据库运行和维护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六数据库运行和维护&#34;&gt;#&lt;/a&gt; 六。数据库运行和维护&lt;/h4&gt;
&lt;p&gt;当数据库投入到实际生产中标志这设计和应用开发基本完成，但不代表设计和应用开发工作的终止。系统维护最困难的工作时数据库重组和重构。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三节关系数据库设计方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节关系数据库设计方法&#34;&gt;#&lt;/a&gt; 第三节：关系数据库设计方法&lt;/h3&gt;
&lt;h4 id=&#34;一关系数据库设计过程于各级模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一关系数据库设计过程于各级模式&#34;&gt;#&lt;/a&gt; 一。关系数据库设计过程于各级模式&lt;/h4&gt;
&lt;h4 id=&#34;二概念结构设计方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二概念结构设计方法&#34;&gt;#&lt;/a&gt; 二。概念结构设计方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;E-R 图的表示方法&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;实体类型，用矩形表示，框内写明实体的名称&lt;/li&gt;
&lt;li&gt;属性，用椭圆表示，将与之相应的实体连接起来&lt;/li&gt;
&lt;li&gt;联系，用菱形表示，框内写明联系的名称，同时在旁边表上联系的类型（1：1、1：N 或者 M：N）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部信息结构设计&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;确定局部范围&lt;/strong&gt;：主要依据需求分析报告中标明的用户视图范围来确定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择实体&lt;/strong&gt;：在确认局部范围内选择一些合适的信息单位作为局部信息结构的基本实体&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择实体关键字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定实体间联系&lt;/strong&gt;：数据间的联系必须在概念设计时确定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;确定实体的属性&lt;/strong&gt;：分为标识属性和说明属性两类。
&lt;ul&gt;
&lt;li&gt;标识属性用作实体的关键字&lt;/li&gt;
&lt;li&gt;说明属性用作描述实体的一般特征&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局信息结构设计&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;属性冲突&lt;/li&gt;
&lt;li&gt;命名冲突&lt;/li&gt;
&lt;li&gt;结构冲突&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第四章sql与关系数据库基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四章sql与关系数据库基本操作&#34;&gt;#&lt;/a&gt; 第四章：SQL 与关系数据库基本操作&lt;/h2&gt;
&lt;h3 id=&#34;第一节sql概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节sql概述&#34;&gt;#&lt;/a&gt; 第一节：SQL 概述&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的发展&#34;&gt;#&lt;/a&gt; SQL 的发展&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1974 年&lt;/strong&gt;由&lt;strong&gt; Boyce&lt;/strong&gt; 和&lt;strong&gt; Chamberlin&lt;/strong&gt; 提出的&lt;/p&gt;
&lt;p&gt;20 世纪 80 年代以来，SQL 一直是数据库管理系统的标准语言。&lt;/p&gt;
&lt;p&gt;至今 SQL 成为了一个通用的、功能极强的关系数据库语言&lt;/p&gt;
&lt;p&gt;SQL 是一个&lt;strong&gt;综合的&lt;/strong&gt;、&lt;strong&gt;功能强大的&lt;/strong&gt;且&lt;strong&gt;简洁易懂&lt;/strong&gt;的语言；&lt;/p&gt;
&lt;p&gt;SQL 的目的就是要能够很好的提供一种从数据库中读取数据的简单而有效的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的特点&#34;&gt;#&lt;/a&gt; SQL 的特点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;SQL 不是某个特定数据库供应商专有的语言&lt;/li&gt;
&lt;li&gt;SQL 简单易学&lt;/li&gt;
&lt;li&gt;SQL 看上去简单，但实际上是一种强有力的语言，灵活使用可以进行非常复杂和高级的数据库操作，并且不区分大小写&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;sql的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql的组成&#34;&gt;#&lt;/a&gt; SQL 的组成&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据定义语言（DDL）&lt;/li&gt;
&lt;li&gt;数据操纵语言（DML）&lt;/li&gt;
&lt;li&gt;数据控制语言（DCL）&lt;/li&gt;
&lt;li&gt;嵌入式和动态 SQL 规则&lt;/li&gt;
&lt;li&gt;SQL 条用和会话规则&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二节mysql预备知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节mysql预备知识&#34;&gt;#&lt;/a&gt; 第二节：Mysql 预备知识&lt;/h3&gt;
&lt;h4 id=&#34;一mysql使用基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一mysql使用基础&#34;&gt;#&lt;/a&gt; 一.MySQL 使用基础&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;LAMP（Linux+Apache+Mysql+PHP/Perl+Python）&lt;/li&gt;
&lt;li&gt;WAMP（Windows+Apache+Mysql+PHP/Perl/Python）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二mysql中的sql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二mysql中的sql&#34;&gt;#&lt;/a&gt; 二.MySQL 中的 SQL&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;常量
&lt;ol&gt;
&lt;li&gt;字符串常量&lt;/li&gt;
&lt;li&gt;数值常量
&lt;ul&gt;
&lt;li&gt;整数常量&lt;/li&gt;
&lt;li&gt;浮点数常量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六进制常量（转换时使用，cast (…as unsigned)）&lt;/li&gt;
&lt;li&gt;日期时间常量
&lt;ul&gt;
&lt;li&gt;包括年、月、日，数据类型为 DATE&lt;/li&gt;
&lt;li&gt;包括小时数、分钟数、秒数及微秒数，数据类型为 TIME&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;位字段值（了解）&lt;/li&gt;
&lt;li&gt;布尔值&lt;/li&gt;
&lt;li&gt;NUll 值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;变量
&lt;ol&gt;
&lt;li&gt;用户变量：用户在表达式中使用自己定义的变量，用户变量前加 @用来区分列名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;运算符
&lt;ol&gt;
&lt;li&gt;算术运算符：+、-、*、/&lt;/li&gt;
&lt;li&gt;位运算符：&amp;amp;（与）、|（位）、^（位异或）、~（位取反）、&amp;gt;&amp;gt;（位右移，除以 2）、&amp;lt;&amp;lt;（位左移，乘以 2）&lt;br&gt;
3. 比较运算符： 逻辑非、逻辑与、逻辑或、逻辑异或&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;表达式&lt;/li&gt;
&lt;li&gt;内置函数
&lt;ul&gt;
&lt;li&gt;数学函数：ABS（）—— 绝对值、SORT（）—— 去开&lt;/li&gt;
&lt;li&gt;聚合函数：COUNT（）—— 计数&lt;/li&gt;
&lt;li&gt;字符串函数：ASCII（）—— 转换成 ASCII 码、CHAR（）—— 转换城字符串&lt;/li&gt;
&lt;li&gt;日期和时间函数：NOW（）—— 截取当前是时间值、Year（）—— 截取当前年份&lt;/li&gt;
&lt;li&gt;加密函数：encode（）、encrypt（）&lt;/li&gt;
&lt;li&gt;类型转换：cast（）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三节数据定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节数据定义&#34;&gt;#&lt;/a&gt; 第三节：数据定义&lt;/h3&gt;
&lt;h4 id=&#34;一数据库模式定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一数据库模式定义&#34;&gt;#&lt;/a&gt; 一。数据库模式定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;新建数据库：create database 数据库名&lt;/li&gt;
&lt;li&gt;选择数据库：use 数据库名&lt;/li&gt;
&lt;li&gt;修改数据库：alter database 数据库名&lt;/li&gt;
&lt;li&gt;删除数据库：drop database [if exists] 数据库名 （括号的可加可不加）&lt;/li&gt;
&lt;li&gt;查看数据库：show database&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二表定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二表定义&#34;&gt;#&lt;/a&gt; 二。表定义&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;创建表：create [temporary] table 表名（增加了括号的关键字，只是临时表）&lt;/li&gt;
&lt;li&gt;更新表：alter table 数据库名。表名
&lt;ol&gt;
&lt;li&gt;添加字段：add column 字段名 数据类型 是否为空 default  after 字段名（after 在哪个字段后面增加）&lt;/li&gt;
&lt;li&gt;修改字段：change column | alter | modify 现在的字段名 更改的字段名 数据类型 是否为空 default’ ’
&lt;ul&gt;
&lt;li&gt;alter 只能修改和删除默认值&lt;/li&gt;
&lt;li&gt;change 可以修改表中字段名，类型，默认值&lt;/li&gt;
&lt;li&gt;modify 只可以修改现有字段的类型和默认值等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除字段名：alter table 表名 drop column 字段名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;重命名数据表：
&lt;ul&gt;
&lt;li&gt;alter table 原表名 rename 新表名；&lt;/li&gt;
&lt;li&gt;alter table 原表名 to 新表名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除表：drop table [if exists] 表名&lt;/li&gt;
&lt;li&gt;查看表：show columns from 表名；(desc)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三索引定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三索引定义&#34;&gt;#&lt;/a&gt; 三。索引定义&lt;/h4&gt;
&lt;p&gt;索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用途索引
&lt;ul&gt;
&lt;li&gt;普通索引（index）&lt;/li&gt;
&lt;li&gt;唯一性索引（unique）&lt;/li&gt;
&lt;li&gt;主键（primary key）&lt;/li&gt;
&lt;li&gt;全文索引（fulltext）[引擎 Myisam]&lt;/li&gt;
&lt;li&gt;聚簇索引 [引擎 InnoDB]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;列级索引
&lt;ul&gt;
&lt;li&gt;单列索引&lt;/li&gt;
&lt;li&gt;组合索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;添加方法：create [unique] index 索引名 on 表名 （创建索引的列名 [(length)] [ASC|DESC]）&lt;/li&gt;
&lt;li&gt;查看索引：show index from 数据库名。表名&lt;/li&gt;
&lt;li&gt;删除索引：drop index 索引名 on 表名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四节数据更新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节数据更新&#34;&gt;#&lt;/a&gt; 第四节：数据更新&lt;/h3&gt;
&lt;h4 id=&#34;一插入数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一插入数据&#34;&gt;#&lt;/a&gt; 一。插入数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;insert into 表名（字段名）values (数据),(数据)&lt;/li&gt;
&lt;li&gt;insert 表名 set 字段名 = {}&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二删除数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二删除数据&#34;&gt;#&lt;/a&gt; 二。删除数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;delete from 表名 where&lt;/li&gt;
&lt;li&gt;truncate 表名 ——（全部清空）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三修改数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三修改数据&#34;&gt;#&lt;/a&gt; 三。修改数据&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;update 表名 set 字段名 = 数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第五节数据查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五节数据查询&#34;&gt;#&lt;/a&gt; 第五节：数据查询&lt;/h3&gt;
&lt;h4 id=&#34;一selecet语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一selecet语句&#34;&gt;#&lt;/a&gt; 一.selecet 语句&lt;/h4&gt;
&lt;h4 id=&#34;二列的选择与指定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二列的选择与指定&#34;&gt;#&lt;/a&gt; 二。列的选择与指定&lt;/h4&gt;
&lt;h4 id=&#34;三from子句与多表连接查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三from子句与多表连接查询&#34;&gt;#&lt;/a&gt; 三.from 子句与多表连接查询&lt;/h4&gt;
&lt;h3 id=&#34;第六节视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六节视图&#34;&gt;#&lt;/a&gt; 第六节：视图&lt;/h3&gt;
&lt;h4 id=&#34;一创建视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一创建视图&#34;&gt;#&lt;/a&gt; 一。创建视图&lt;/h4&gt;
&lt;h4 id=&#34;二删除视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二删除视图&#34;&gt;#&lt;/a&gt; 二。删除视图&lt;/h4&gt;
&lt;h4 id=&#34;三修改视图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三修改视图&#34;&gt;#&lt;/a&gt; 三。修改视图&lt;/h4&gt;
&lt;h4 id=&#34;四查看视图定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四查看视图定义&#34;&gt;#&lt;/a&gt; 四。查看视图定义&lt;/h4&gt;
&lt;h4 id=&#34;五更新视图数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五更新视图数据&#34;&gt;#&lt;/a&gt; 五。更新视图数据&lt;/h4&gt;
&lt;h4 id=&#34;六查询视图数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六查询视图数据&#34;&gt;#&lt;/a&gt; 六。查询视图数据&lt;/h4&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第五章数据库编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五章数据库编程&#34;&gt;#&lt;/a&gt; 第五章：数据库编程&lt;/h2&gt;
&lt;h3 id=&#34;第一节存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节存储过程&#34;&gt;#&lt;/a&gt; 第一节：存储过程&lt;/h3&gt;
&lt;h4 id=&#34;一存储过程的基本概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一存储过程的基本概念&#34;&gt;#&lt;/a&gt; 一。存储过程的基本概念&lt;/h4&gt;
&lt;p&gt;就是一组为了完成某项特定功能的 SQL 语句集，实质上就是一段存储在数据库中的代码&lt;/p&gt;
&lt;p&gt;优点如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提高运行速度；&lt;/li&gt;
&lt;li&gt;增强了 SQL 的功能的灵活性；&lt;/li&gt;
&lt;li&gt;可以降低网络的通信量；&lt;/li&gt;
&lt;li&gt;减轻了程序编写的工作量；&lt;/li&gt;
&lt;li&gt;间接实现了安全控制功能；&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二创建存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二创建存储过程&#34;&gt;#&lt;/a&gt; 二。创建存储过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;delimiter $$ —— 修改结束符为 $$，因为在使用的封装的时候会经常使用；号，程序会识别出错，为了避免，所以在使用 procedure 的时候，需要先把结束符更改一下&lt;/li&gt;
&lt;li&gt;create procedure [IN | OUT | INPUT] 参数名 数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三存储过程体&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三存储过程体&#34;&gt;#&lt;/a&gt; 三。存储过程体&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;局部变量&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明局部变量：declare 变量名 数据类型；若不给的话，默认数据类型为 null&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部变量赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SET 变量名 = 数值&lt;/li&gt;
&lt;li&gt;select 字段名 into 要赋值的变量名 表名（返回的结果集只能有一行）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程控制语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If    else  end if&lt;/li&gt;
&lt;li&gt;case    when 条件 then 语句    end case&lt;/li&gt;
&lt;li&gt;while  do  end while |  repeat  until   end repeat  | loop     end loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;游标（可以存多个变量，因为 select into 只能保存一行数据，所以可以建立一个游标，再从游标中获取单行数据放入局部变量中）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;打开游标：open 游标名&lt;/li&gt;
&lt;li&gt;读取游标：fetch 游标名 into 变量&lt;/li&gt;
&lt;li&gt;关闭游标：close 游标名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;四调用存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四调用存储过程&#34;&gt;#&lt;/a&gt; 四。调用存储过程&lt;/h4&gt;
&lt;p&gt;其实就是调用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用方法
&lt;ul&gt;
&lt;li&gt;CALL 存储过程名（）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;五删除存储过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五删除存储过程&#34;&gt;#&lt;/a&gt; 五。删除存储过程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;drop procedure [if exists] 存储过程名；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;六样式案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六样式案例&#34;&gt;#&lt;/a&gt; 六。样式案例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;use 数据库名			先调用
delimiter $$		  修改结束符,关闭终端后，会更改回;
create procedure 存储过程名 (IN p_no varchar(10),IN p_name varchar(255))

begin
declare a int default 0;
declare b int;
declare c int;
set b = 10;
select Id into c from pro where pno=&#39;001&#39;;

	insert into pro(pno,pname) values (p_no,p_name);
end $$

call 存储过程名 (实参)		不用觉得很难，其实就是封装
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;七教材案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七教材案例&#34;&gt;#&lt;/a&gt; 七。教材案例&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;delimiter $$
create procedure pro_num (OUT ROWS INT)
begin
declare cid INT;
declare found boolean default true;
declare cur_cid cursor for
	select pno form pro;
declare continue handler for not found 
	set found = 0;
set ROWS =0;
open cur_cid;
fetch cur_cid into cid;
while found do
set ROWS=ROWS+1;
fetch cur_cid into cid;
end while;
colse cur_cid
end $$
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第二节存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节存储函数&#34;&gt;#&lt;/a&gt; 第二节：存储函数&lt;/h3&gt;
&lt;h4 id=&#34;一创建存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一创建存储函数&#34;&gt;#&lt;/a&gt; 一。创建存储函数&lt;/h4&gt;
&lt;p&gt;create function 函数名 (形参 形参的数据类型)&lt;/p&gt;
&lt;h4 id=&#34;二调用存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二调用存储函数&#34;&gt;#&lt;/a&gt; 二。调用存储函数&lt;/h4&gt;
&lt;p&gt;select 函数名 (实参)&lt;/p&gt;
&lt;h4 id=&#34;三删除存储函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三删除存储函数&#34;&gt;#&lt;/a&gt; 三。删除存储函数&lt;/h4&gt;
&lt;p&gt;drop function [if exists] 函数名；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;use 数据库名;
delimiter $$
create function 函数名(形参+形参的数据类型)
	returns 返回值类型
	deterministic				表示函数的 返回值完全由输入参数决定
begin

end $$
delimiter ;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第六章数据库安全与保护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第六章数据库安全与保护&#34;&gt;#&lt;/a&gt; 第六章：数据库安全与保护&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库完整性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库完整性&#34;&gt;#&lt;/a&gt; 第一节：数据库完整性&lt;/h3&gt;
&lt;h4 id=&#34;一完整性约束条件的作用对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一完整性约束条件的作用对象&#34;&gt;#&lt;/a&gt; 一。完整性约束条件的作用对象&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;列级约束&lt;/p&gt;
&lt;p&gt;列级约束主要指对列的类型、取值范围、精度等的约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对数据类型的约束&lt;/li&gt;
&lt;li&gt;对数据格式的约束&lt;/li&gt;
&lt;li&gt;对取值范围或取值集合的约束&lt;/li&gt;
&lt;li&gt;对空值的约束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;元组约束&lt;/p&gt;
&lt;p&gt;元组约束指元组中各个字段之间的相互约束，例如某个活动的开始日期小于结束日期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表级约束&lt;/p&gt;
&lt;p&gt;表级约束指若干元组之间、关系之际的联系的约束，常用在外键上&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二。定义与实现完整性约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实体完整性：保证记录不重复，至少有一列值不重复，用 primary key 添加约束&lt;/p&gt;
&lt;p&gt;候选键约束用关键字 unique 进行约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个表只能由一个主键，但是候选键可以有若干个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照完整性：主要指两个表之间的关系，比如课程表开设依赖于教师表，没有教师就不能由教师的课，保证数据的正确性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;foreign key(本表字段)
	references 外键表(外键的字段名)
		on delete (restrict|cascade|set null|no action)
		on update (restrict|cascade|set null|no action)
		
restrict		当被参照表进行删除或更新时，系统拒绝该操作
cascade			两边可以实时更新
set null|		被参照表（主表）更新时，另一边更改为null
no action		当被参照表进行删除或更新时，系统拒绝该操作,与restrict相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定义完整性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非空约束：在创建表或更新表结构的时候在字段后面增加 &lt;code&gt;not null&lt;/code&gt;  表示该字段不能为空&lt;/li&gt;
&lt;li&gt;check 约束：在创建表或更新表结构的时候使用，可作用在整张表或者单个字段上，用法跟 &lt;code&gt;not null&lt;/code&gt;  一致，不过是增加了 sql 的限定条件。例：年龄不允许小于等于 0。
&lt;ul&gt;
&lt;li&gt;作用在字段上，则是基于列的 check 约束&lt;/li&gt;
&lt;li&gt;作用在表上，则是基于表的 check 约束&lt;/li&gt;
&lt;li&gt;语法：check (sql 表达式)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名完整性约束&lt;/p&gt;
&lt;p&gt;就是给约束起一个名字，方便后面对这个约束进行删除或修改等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给约束起一个名字&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;mysql&amp;gt; create table t_user(
    -&amp;gt; id int(10),
    -&amp;gt; name varchar(32) not null,
    -&amp;gt; constraint t_user_id_pk primary key(id)
    -&amp;gt; );
Query OK, 0 rows affected (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整性约束不能直接被修改。若要修改某个约束，其实是先把约束删除，在添加约束&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加约束
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]primary key(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]foreign key(外键字段名) refernces 被参照表(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 add [constraint 约束名字]unique key(主键字段)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;删除约束
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop foreign key 外键约束名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop primary key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alter table 表名 drop 约束名|候选键字段名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二节触发器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节触发器&#34;&gt;#&lt;/a&gt; 第二节：触发器&lt;/h3&gt;
&lt;p&gt;触发器是保护表数据的数据对象，当指定的表发生插入、更新、删除的时候触发，进行相应的动作。&lt;strong&gt;注：查询不会触发&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建触发器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;create trigger 触发器名 触发器触发的时刻 触发事件 
	on 与触发器绑定的表名 for each row 触发器主体（可以是单条sql语句，也可以是多条执行语句，但需要使用begin...end）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除触发器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drop trigger [if exists][触发器所在的数据库名.]触发器名&lt;/code&gt; ，若没有指定则为当前默认数据库，修改前需要先删除后创建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用数据库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用 NEW 或者 OLD 这两张虚拟表
&lt;ul&gt;
&lt;li&gt;NEW 表示为最新的虚拟表&lt;/li&gt;
&lt;li&gt;OLD 表示为 sql 语句执行前的表，且全部数据为只读，不能被更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在触发器涉及对触发表自身的更新操作时、，只能使用 before update 触发器，after update 不被允许&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第三节安全性与访问控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节安全性与访问控制&#34;&gt;#&lt;/a&gt; 第三节：安全性与访问控制&lt;/h3&gt;
&lt;p&gt;数据库的安全性是指&lt;strong&gt;保护数据库以防止不合法的使用而造成数据泄露、更改或破坏，所以安全性对于任何一个 DBMS 来说都是至关重要的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 mysql 中，&lt;strong&gt;数据库系统对数据定 安全管理是使用身份验证、数据库用户权限确认等访问控制措施，来保护数据库中的信息资源，以防止这些数据遭受破坏&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;一用户账号管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一用户账号管理&#34;&gt;#&lt;/a&gt; 一。用户账号管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建用户账号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt; create user &#39;user_name&#39;@&#39;host_name&#39; IDENTIFIED BY [PASSWORD]password
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建的时候，需要当前登录的用户拥有 mysql 数据库的 insert 权限或全局的 create insert 权限&lt;/li&gt;
&lt;li&gt;创建用户时，若用户名一直，主机名不同，则为两个账号；&lt;/li&gt;
&lt;li&gt;新创建的用户权限是能 show，不用 use 数据库，因而无法访问数据库表；&lt;/li&gt;
&lt;li&gt;create user 时可以不使用密码，但 mysql 允许该操作，但不推荐&lt;/li&gt;
&lt;li&gt;创建用户时，用户名和主机名都重复了会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;drop user &#39;用户名&#39;@&#39;主机名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;删除用户的时候可以删除一个或多个，并且消除它们的权限&lt;/li&gt;
&lt;li&gt;要删除用户的话，必须当前用户拥有 mysql 的删除权限或者全局的删除权限&lt;/li&gt;
&lt;li&gt;删除的时候没有给主机名，默认为 %&lt;/li&gt;
&lt;li&gt;用户的删除不会影响他们创建的表、索引或其他数据库对象，因为数据库没有记录是谁创建了这些对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改用户&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;rename user &#39;当前用户名&#39;@&#39;主机号&#39; to &#39;新的用户名&#39;@&#39;主机号&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;需要拥有相对应的权限&lt;/li&gt;
&lt;li&gt;若系统中旧帐户不存在或者新账户已存在，则会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改用户密码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;set password for &#39;用户名&#39;@&#39;主机名&#39; = password(&#39;更改的新密码&#39;)|已经用password函数加密过的散列值
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;直接写明文是不可以的，因为存储在 mysql.user 表中，都是以 password 函数加密后的形式展示，但是真正输入密码的时候还是使用 password 加密前的密码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二账号权限管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二账号权限管理&#34;&gt;#&lt;/a&gt; 二。账号权限管理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;权限的授予：&lt;/p&gt;
&lt;p&gt;新的 SQL 用户不允许访问属于其他 SQL 用户的表，也不能创建自己的表，它必须被授权。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列权限&lt;/strong&gt;：和表中的一个具体列相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;表权限&lt;/strong&gt;：和一个具体表中的所有数据相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据库权限&lt;/strong&gt;：和一个具体的数据库中的所有表相关&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户权限&lt;/strong&gt;：和 mysql 所有的数据库相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看用户的权限： &lt;code&gt;show grants for &#39;用户名&#39;@&#39;主机名&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;案例演示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;授予用户 &lt;code&gt;zhangsan&lt;/code&gt;  在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  的表 &lt;code&gt;customers&lt;/code&gt;  上拥有对列的 &lt;code&gt;cust_id&lt;/code&gt;  和列 &lt;code&gt;cust_name&lt;/code&gt;  的 SELECT 权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant select(cust_id,cust_name)
	ON mysql_test.customers
	TO &#39;zhangsan&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前系统不存储在用户 &lt;code&gt;liming&lt;/code&gt;  和用户 &lt;code&gt;huang&lt;/code&gt; ，要求创建这两个用户，并设置对应的系统登录口令，同时授权他们在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  的表 &lt;code&gt;customers&lt;/code&gt;  上拥有的 SLECT 和 UPDATE 的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant SELECT,UPDATE
	ON mysql_test.customers
	TO &#39;liming&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;,
		&#39;huang&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;456&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;授予系统中已存在用户 &lt;code&gt;wangwu&lt;/code&gt;  可以在数据库 &lt;code&gt;mysql_test&lt;/code&gt;  中执行所有数据库操作的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant all
	ON mysql_test.*
	TO &#39;wangwu&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;授予当前系统中已存在用户 &lt;code&gt;wangwu&lt;/code&gt;  拥有创建用户的权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant CREATE USER
	ON *.*
	TO &#39;wangwu&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;三权限的转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三权限的转移&#34;&gt;#&lt;/a&gt; 三。权限的转移&lt;/h4&gt;
&lt;p&gt;权限转移的语句其实就是在 grant 中增加 with 子句，其中 &lt;code&gt;with grant option&lt;/code&gt;  表示将授予当前用户的权限授予给其他用户，无论其他用户有没有这个权限，且自己的权限不会消失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;授予使用限制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max_questions：用户每小时允许执行的查询操作次数。&lt;/li&gt;
&lt;li&gt;max_updates：用户每小时允许执行连接操作次数。&lt;/li&gt;
&lt;li&gt;max_connections：用户每小时允许执行的连接操作次数。&lt;/li&gt;
&lt;li&gt;max_user_connections：用户允许同时建立的连接次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改方式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;update user set 限制的权限名 = 0 where user = &#39;用户名&#39;;
flush privileges;		——记得需要刷新之后才能生效（不用grant语句去修改授权表的时候，都需要手动刷新）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;演示案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;授予当前系统中一个不存在的用户 zhou 在数据库 mysql_test 的表 customers 上拥有 SELECT 和 UPDATE 的权限，并允许可以将自身的这个权限授予给其他用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;grant SELECT,UPDATE
	ON mysql_test.customers
	TO &#39;zhou&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123&#39;
	with grant option;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;四权限的撤销&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四权限的撤销&#34;&gt;#&lt;/a&gt; 四。权限的撤销&lt;/h4&gt;
&lt;p&gt;就是回收用户的权限，操作语句跟授予（grant）很相似，但是&lt;strong&gt;需要操作者账户拥有对全局的创建和更新权限&lt;/strong&gt;。语句上就是把 &lt;code&gt;grant&lt;/code&gt;  更改为 &lt;code&gt;revoke&lt;/code&gt; ，把 &lt;code&gt;TO&lt;/code&gt;  改成 &lt;code&gt;FROM&lt;/code&gt; 。可以收回特定用户的部分权限，也可以收回特定用户的全部权限。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作案例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;回收系统中已存在的用户 zhou 在数据库 mysql_test 的表 customers 上的 SELECT 权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;revoke SELECT
	ON mysql_test.customers
	FROM &#39;zhou&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回收系统中已存在的用户 zhou 在数据库 mysql_test 的表 customers 上的所有权限&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;revoke all
	ON mysql_test.customers
	FROM &#39;zhou&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第四节事务与并发控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节事务与并发控制&#34;&gt;#&lt;/a&gt; 第四节：事务与并发控制&lt;/h3&gt;
&lt;h3 id=&#34;一事务的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一事务的概念&#34;&gt;#&lt;/a&gt; 一。事务的概念&lt;/h3&gt;
&lt;p&gt;​	事务是用户定义的一个数据操作序列，这些操作可欧威一个完整的工作单元，&lt;strong&gt;要么全部执行，要么全部不执行，是一个不可分割的工作单位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;** 事务与程序的不同：** 程序是静止的，事务是动态的，是程序的执行而不是程序本身；同一程序的多个独立执行可以同时进行，而每一步执行则是一个不同的事务&lt;/p&gt;
&lt;h3 id=&#34;二事务的acid特征&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二事务的acid特征&#34;&gt;#&lt;/a&gt; 二。事务的 ACID 特征&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原子性（Atomieity）
&lt;ul&gt;
&lt;li&gt;事务的原子性保证事务包含的一组更新操作是原子不可分的，即事务是不可分割的最小工作单位，所包含的这些操作是一个整体。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一致性（Consistency）
&lt;ul&gt;
&lt;li&gt;一致性要求事务必须满足于数据库的完整性约束，且事务执行完毕后将数据库由一个一致性状态转变到另一个一致性状态。数据库的一致性撞他是一种以一致性规则为基础的逻辑属性，一致性和原子性密切相关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）
&lt;ul&gt;
&lt;li&gt;隔离性要求事务是彼此独立的、隔离的，即一个事务的执行不能被其他事务所干扰，一个事务对数据库变更的结果必须在它 COMMIT 后，另一个事务才能存取。&lt;/li&gt;
&lt;li&gt;多个事务并发执行时，其结果等价于它们的一种顺序执行的结果，就如同串行调度执行事务一般。这一特性也称为&lt;strong&gt;可串行性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续性（Durability）
&lt;ul&gt;
&lt;li&gt;持久性也称为永久性，是指一个事务一单提交，它对数据库中数据的改变就应该是永久性的，且接下来的其他操作或故障不应该改对其执行结果有任何影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三并发操作问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三并发操作问题&#34;&gt;#&lt;/a&gt; 三。并发操作问题&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;事务的并发控制的基本单位&lt;/strong&gt;，保证事务的 ACID 特征是事务处理的重要任务。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;典型的并发操作问题（破坏了事务的隔离性）
&lt;ul&gt;
&lt;li&gt;丢失更新
&lt;ul&gt;
&lt;li&gt;两个事务同时修改数据，导致一方的修改被丢失，这就是由于对数据的并发操作而带来的数据不一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不可重复读
&lt;ul&gt;
&lt;li&gt;指事务一读取数据后，事务二更新数据后，事务一无法读取到前一次的读取结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读 “脏” 数据
&lt;ul&gt;
&lt;li&gt;银行取款问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解决并发操作的数据不一致性问题的方法有
&lt;ul&gt;
&lt;li&gt;封锁&lt;/li&gt;
&lt;li&gt;时间戳&lt;/li&gt;
&lt;li&gt;乐观控制法&lt;/li&gt;
&lt;li&gt;多版本并发控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四封锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四封锁&#34;&gt;#&lt;/a&gt; 四。封锁&lt;/h3&gt;
&lt;p&gt;封锁是最常用的并发控制技术。基本思想是：需要时，事物通过向系统请求对它所希望的数据对象（如数据库中的记录）加锁，以确保它不被非预期改变&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;锁&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个锁实质上是允许或阻止一个事物对一个数据对象的存取特权，基本的封锁类型有两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排他锁（Exclusive Lock，X 锁），一般写操作要求用 X 锁&lt;/li&gt;
&lt;li&gt;共享锁（SharedLock，S 锁），一般读操作要求用 S 锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用封锁进行并发控制&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若事务 T 对数据 D 加锁，则所有的事务对数据 D 的锁请求都需要等到事务 T 放锁&lt;/li&gt;
&lt;li&gt;若事务 T 对数据 D 加了 S 锁，则别的事务还可以对数据 D 请求 S 锁&lt;/li&gt;
&lt;li&gt;事务执行数据库操作时都要先请求响应的锁，即对读请求 S 锁，对更新（插入、删除、修改）请求 X 锁。这个过程一般时有 DBMS 在执行操作时自动隐含地进行&lt;/li&gt;
&lt;li&gt;事务一直占有获得的锁直到事务 commit 或 rollback 时释放&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此封锁机制可以解决上述并发操作所带来的三个不一致性问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;封锁的粒度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常以粒度来描述封锁的&lt;strong&gt;数据单元的大小&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DBMS 可以决定不同粒度的锁。由最底层的数据元素到最高层的整个数据库，粒度越细，并发性越大，但软件复杂性和系统开销也就越大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;封锁的级别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;0 级封锁&lt;/p&gt;
&lt;p&gt;封锁的事务不重写其他非 0 级封锁事务的未提交的更新数据。这种状态实际上实用价值不大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;1 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务不允许重写未提交的更新数据。这防止了丢失更新的发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务既不重写也不读未提交的更新数据。这除了 1 级封锁的效果外还防止了读脏数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3 级封锁&lt;/p&gt;
&lt;p&gt;被封锁的事务不读未提交的更新数据，不写任何（包括读操作的）未提交的数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;死锁和活锁&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;活锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;级别低的事务无法执行&lt;/li&gt;
&lt;li&gt;避免方法：采用先来先服务的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死锁（两个以上事务循环等待被同组中的另一事务锁住的数据单元的清醒，称为 “死锁 “）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性锁请求&lt;/li&gt;
&lt;li&gt;锁请求排序&lt;/li&gt;
&lt;li&gt;序列化处理&lt;/li&gt;
&lt;li&gt;资源剥夺&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对待死锁的另一种办法时不去防止，而让其发生并随时进行检测，一旦检测到系统已发生了死锁再进行解除处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可串行性&lt;/p&gt;
&lt;p&gt;一组事务的一个调度就是它们的基本操作的一种排序。若在一个调度中，对于任意两个事务 T1 和 T2，要么 T1 的所有操作都在 T2 前面，要么反之，则该调度是串行的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;两段封锁法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;封锁是一种并发控制技术，而可串行性是并发控制（调度）的正确性标准。&lt;/p&gt;
&lt;p&gt;两段封锁法（Two-Phase Locking，2PL）是一种最简单而有效的保障封锁其调度是可串行性的方法&lt;/p&gt;
&lt;p&gt;两端封锁法是&lt;strong&gt;事务遵循两段锁协议&lt;/strong&gt;的调度方法。所谓协议，就是所有事物都必须遵循的关于基本操作执行顺序的一种限制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发展（Growing）或加锁阶段&lt;/p&gt;
&lt;p&gt;在此段期间，对任一数据对象进行任何操作之前，事物都要获得该对象的一个相应的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收缩（Shrinking）或释放锁阶段&lt;/p&gt;
&lt;p&gt;一旦事务释放了一个锁，则标明它已进入了此阶段，此后它就不能再请求任何另外的锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定理：遵循两端锁协议的事务的任何并发调度都是可串行化的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第五节备份与恢复&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第五节备份与恢复&#34;&gt;#&lt;/a&gt; 第五节：备份与恢复&lt;/h3&gt;
&lt;p&gt;为了保证数据库的&lt;strong&gt;可靠性&lt;/strong&gt;和&lt;strong&gt;完整性&lt;/strong&gt;，DBMS 通常会采用各种有效的措施来进行维护。&lt;/p&gt;
&lt;p&gt;造成数据库中的数据丢失或被破坏可能是由于以下原因&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机硬件故障&lt;/li&gt;
&lt;li&gt;计算机软件故障&lt;/li&gt;
&lt;li&gt;病毒&lt;/li&gt;
&lt;li&gt;认为误操作&lt;/li&gt;
&lt;li&gt;自然灾害&lt;/li&gt;
&lt;li&gt;盗窃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据库备份时通过导出数据或者赋值表文件的方式来制作数据库的复本；数据库恢复则是当数据库出现故障或遭到破坏时，将备份的数据库加载到系统，从而使数据库从错误状态恢复到备份时的正确状态&lt;/p&gt;
&lt;p&gt;数据库恢复时以备份未基础，它是与备份相对应的系统维护和管理操作。系统进行恢复操作时，先执行一些系统安全性的检查，包括检查要恢复的数据库是否存在、数据库是否变化及数据库文件是否兼容等，然后根据锁曹志勇的数据库备份类型采取相应的恢复措施&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 SQL 语句备份与恢复数据库表数据的方法有一点不足：只能导出或导入数据的内容，而不包括表的结构，如果表的结构文件损坏，则必须先设法恢复原来表的结构&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一备份数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一备份数据&#34;&gt;#&lt;/a&gt; 一．备份数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;SELECT sql语句 INTO OUTFILE &#39;导出的路径+文件名&#39;
FIELDS  TERMINATED BY &#39;,&#39;	每个字段之间用,号隔开
OPTIONALLY ENCLOSED BY &amp;quot;&amp;quot;	每个字段用&amp;quot;&amp;quot;包裹起来
ESCAPED BY &#39;*&#39; 				将转义符\改成*
LINES TERMINATED BY &#39;？&#39;		每一行数据用?隔开
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二导入数据&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二导入数据&#34;&gt;#&lt;/a&gt; 二。导入数据&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-mariadb&#34;&gt;LOAD DATA INFILE &#39;路径+文件名&#39;
INTO TABLE &#39;导入到的数据库表名&#39;
[ FIELDS TERMINATED BY 
OPTIONALLY ENCLOSED BY
ESCAPED BY 
LINES TERMINATED BY ] 	这里的设置需要跟备份时的设置保持一致，否则会导入出错
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第七章数据库应用设计与开发实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第七章数据库应用设计与开发实例&#34;&gt;#&lt;/a&gt; 第七章：数据库应用设计与开发实例&lt;/h2&gt;
&lt;h3 id=&#34;第一节需求描述与分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节需求描述与分析&#34;&gt;#&lt;/a&gt; 第一节：需求描述与分析&lt;/h3&gt;
&lt;h4 id=&#34;一功能性需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一功能性需求&#34;&gt;#&lt;/a&gt; 一。功能性需求&lt;/h4&gt;
&lt;h4 id=&#34;二非功能性需求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二非功能性需求&#34;&gt;#&lt;/a&gt; 二。非功能性需求&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;质量需求名称&lt;/th&gt;
&lt;th&gt;质量需求的详细要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可靠性&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;在不运行期间&lt;/strong&gt;，每个月最多出现一次由外界因素造成的系统故障；&lt;br /&gt;&lt;strong&gt;在运行期间&lt;/strong&gt;，除非遇到特殊情况，否则要&lt;strong&gt;保证正常使用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;正确性&lt;/td&gt;
&lt;td&gt;需要&lt;strong&gt;保证&lt;/strong&gt;数据库中的&lt;strong&gt;数据正确&lt;/strong&gt;和系统的各个&lt;strong&gt;功能模块的业务逻辑正确&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容性&lt;/td&gt;
&lt;td&gt;可以在与 IE 内核兼容的任一主流浏览器上运行 (B/S 结构)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;健壮性&lt;/td&gt;
&lt;td&gt;要经常进行健壮性测试，不断加强对非格式化操作的应变能力&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;第二节系统设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节系统设计&#34;&gt;#&lt;/a&gt; 第二节：系统设计&lt;/h3&gt;
&lt;h3 id=&#34;第三节系统实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节系统实现&#34;&gt;#&lt;/a&gt; 第三节：系统实现&lt;/h3&gt;
&lt;h3 id=&#34;第四节系统测试与维护&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第四节系统测试与维护&#34;&gt;#&lt;/a&gt; 第四节：系统测试与维护&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;第八章数据库管理技术的发展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第八章数据库管理技术的发展&#34;&gt;#&lt;/a&gt; 第八章：数据库管理技术的发展&lt;/h2&gt;
&lt;h3 id=&#34;第一节数据库技术发展概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一节数据库技术发展概述&#34;&gt;#&lt;/a&gt; 第一节：数据库技术发展概述&lt;/h3&gt;
&lt;h4 id=&#34;一第一代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一第一代数据库系统&#34;&gt;#&lt;/a&gt; 一。第一代数据库系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;代表
&lt;ul&gt;
&lt;li&gt;IMS，层次模型，IBM 公司做的，1969 年&lt;/li&gt;
&lt;li&gt;CODASYL，网状模式，DBTG 公司制作，1970 年 u&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ul&gt;
&lt;li&gt;支持三级模式（层次模型、网状模型、关系模型都支持三级模式）&lt;/li&gt;
&lt;li&gt;用存取路径表示联系&lt;/li&gt;
&lt;li&gt;独立的 DDL&lt;/li&gt;
&lt;li&gt;导航的 DML&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;二第二代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二第二代数据库系统&#34;&gt;#&lt;/a&gt; 二。第二代数据库系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;关系数据库系统
&lt;ul&gt;
&lt;li&gt;E.F.Codd 提出&lt;strong&gt;关系代数、范式&lt;/strong&gt;，1970 年&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统原型
&lt;ul&gt;
&lt;li&gt;IBM System R&lt;/li&gt;
&lt;li&gt;Berkeley INGRES&lt;/li&gt;
&lt;li&gt;1980 年后，新开发的系统都是关系型的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;三新一代数据库系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三新一代数据库系统&#34;&gt;#&lt;/a&gt; 三。新一代数据库系统&lt;/h4&gt;
&lt;p&gt;OODB 第三代的代表？&lt;/p&gt;
&lt;p&gt;没有被市场普遍接受&lt;/p&gt;
&lt;p&gt;ORDB，新一代将是多种模型并存&lt;/p&gt;
&lt;p&gt;” 第三代 “的基本特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;应支持&lt;strong&gt;数据管理&lt;/strong&gt;、&lt;strong&gt;对象管理&lt;/strong&gt;和&lt;strong&gt;知识管理&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;保持或继承 RDB 的技术&lt;/li&gt;
&lt;li&gt;开放性&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;应用：数据仓库、工程数据库、统计数据库、空间数据库、科学数据库等多种数据库&lt;/p&gt;
&lt;h3 id=&#34;第二节数据仓库与数据挖掘&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第二节数据仓库与数据挖掘&#34;&gt;#&lt;/a&gt; 第二节：数据仓库与数据挖掘&lt;/h3&gt;
&lt;h4 id=&#34;一从数据库到数据仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一从数据库到数据仓库&#34;&gt;#&lt;/a&gt; 一。从数据库到数据仓库&lt;/h4&gt;
&lt;p&gt;数据仓库主要特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;面向主题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集成性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据的非易失性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据的时变性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据仓库具有三个常用的重要概念，即粒度、分割和维&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;粒度&lt;/p&gt;
&lt;p&gt;粒度问题是设计数据仓库的一个最重要的方面。粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分割&lt;/p&gt;
&lt;p&gt;分割时将数据分散到各自的物理单元中，以便能分别处理，以提高数据处理的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;维&lt;/p&gt;
&lt;p&gt;维时人们观察数据的特定角度，是考虑问题时的一类属性&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二数据挖掘技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二数据挖掘技术&#34;&gt;#&lt;/a&gt; 二。数据挖掘技术&lt;/h4&gt;
&lt;p&gt;数据挖掘具备下列几种功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;概念描述&lt;/li&gt;
&lt;li&gt;关联分析&lt;/li&gt;
&lt;li&gt;分类与预测&lt;/li&gt;
&lt;li&gt;聚类&lt;/li&gt;
&lt;li&gt;孤立点检测&lt;/li&gt;
&lt;li&gt;趋势和演变分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第三节大数据管理技能&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第三节大数据管理技能&#34;&gt;#&lt;/a&gt; 第三节：大数据管理技能&lt;/h3&gt;
&lt;h4 id=&#34;一大数据的定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一大数据的定义&#34;&gt;#&lt;/a&gt; 一。大数据的定义&lt;/h4&gt;
&lt;p&gt;数据尚无统一的定义，通常被认为是数据量很大、数据形式多样化的数据&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据量巨大，即大量化（Volume）&lt;/li&gt;
&lt;li&gt;数据种类繁多，即多样化（Variety）&lt;/li&gt;
&lt;li&gt;处理速度快，即快速化（Velocity）&lt;/li&gt;
&lt;li&gt;价值 (Value) 密度低&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二大数据管理技术典型代表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二大数据管理技术典型代表&#34;&gt;#&lt;/a&gt; 二。大数据管理技术典型代表&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;大数据存储&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NoSQL 数据管理系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;键值（Key-value）存储：常见的键值存储数据库包括 Tokyo Cabinet/Tyrant、Redis 和 Oracle BDB 等&lt;/li&gt;
&lt;li&gt;文档存储：常见的文档性数据库由 CouchDB、MongoDB 等&lt;/li&gt;
&lt;li&gt;列存储：常见的列存储数据库由 Hbase&lt;/li&gt;
&lt;li&gt;图存储：图存储数据库是基于图理论构建的，使用节点、属性和边的概念&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MapReduce 技术&lt;/p&gt;
&lt;p&gt;MapReduce 是一种并行变成模型。它把计算过程分解为两个阶段，即 Map 阶段和 Reduce 阶段&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="数据库系统原理" />
        <updated>2021-08-09T06:14:00.000Z</updated>
    </entry>
</feed>
